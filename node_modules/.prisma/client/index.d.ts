
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Home
 * 
 */
export type Home = $Result.DefaultSelection<Prisma.$HomePayload>
/**
 * Model About
 * 
 */
export type About = $Result.DefaultSelection<Prisma.$AboutPayload>
/**
 * Model AboutMe
 * 
 */
export type AboutMe = $Result.DefaultSelection<Prisma.$AboutMePayload>
/**
 * Model Languages
 * 
 */
export type Languages = $Result.DefaultSelection<Prisma.$LanguagesPayload>
/**
 * Model LanguagesItem
 * 
 */
export type LanguagesItem = $Result.DefaultSelection<Prisma.$LanguagesItemPayload>
/**
 * Model whyMe
 * 
 */
export type whyMe = $Result.DefaultSelection<Prisma.$whyMePayload>
/**
 * Model whyMeItems
 * 
 */
export type whyMeItems = $Result.DefaultSelection<Prisma.$whyMeItemsPayload>
/**
 * Model Work
 * 
 */
export type Work = $Result.DefaultSelection<Prisma.$WorkPayload>
/**
 * Model workItems
 * 
 */
export type workItems = $Result.DefaultSelection<Prisma.$workItemsPayload>
/**
 * Model More
 * 
 */
export type More = $Result.DefaultSelection<Prisma.$MorePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.home`: Exposes CRUD operations for the **Home** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Homes
    * const homes = await prisma.home.findMany()
    * ```
    */
  get home(): Prisma.HomeDelegate<ExtArgs>;

  /**
   * `prisma.about`: Exposes CRUD operations for the **About** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Abouts
    * const abouts = await prisma.about.findMany()
    * ```
    */
  get about(): Prisma.AboutDelegate<ExtArgs>;

  /**
   * `prisma.aboutMe`: Exposes CRUD operations for the **AboutMe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AboutMes
    * const aboutMes = await prisma.aboutMe.findMany()
    * ```
    */
  get aboutMe(): Prisma.AboutMeDelegate<ExtArgs>;

  /**
   * `prisma.languages`: Exposes CRUD operations for the **Languages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Languages
    * const languages = await prisma.languages.findMany()
    * ```
    */
  get languages(): Prisma.LanguagesDelegate<ExtArgs>;

  /**
   * `prisma.languagesItem`: Exposes CRUD operations for the **LanguagesItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LanguagesItems
    * const languagesItems = await prisma.languagesItem.findMany()
    * ```
    */
  get languagesItem(): Prisma.LanguagesItemDelegate<ExtArgs>;

  /**
   * `prisma.whyMe`: Exposes CRUD operations for the **whyMe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WhyMes
    * const whyMes = await prisma.whyMe.findMany()
    * ```
    */
  get whyMe(): Prisma.whyMeDelegate<ExtArgs>;

  /**
   * `prisma.whyMeItems`: Exposes CRUD operations for the **whyMeItems** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WhyMeItems
    * const whyMeItems = await prisma.whyMeItems.findMany()
    * ```
    */
  get whyMeItems(): Prisma.whyMeItemsDelegate<ExtArgs>;

  /**
   * `prisma.work`: Exposes CRUD operations for the **Work** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Works
    * const works = await prisma.work.findMany()
    * ```
    */
  get work(): Prisma.WorkDelegate<ExtArgs>;

  /**
   * `prisma.workItems`: Exposes CRUD operations for the **workItems** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkItems
    * const workItems = await prisma.workItems.findMany()
    * ```
    */
  get workItems(): Prisma.workItemsDelegate<ExtArgs>;

  /**
   * `prisma.more`: Exposes CRUD operations for the **More** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mores
    * const mores = await prisma.more.findMany()
    * ```
    */
  get more(): Prisma.MoreDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.10.2
   * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Home: 'Home',
    About: 'About',
    AboutMe: 'AboutMe',
    Languages: 'Languages',
    LanguagesItem: 'LanguagesItem',
    whyMe: 'whyMe',
    whyMeItems: 'whyMeItems',
    Work: 'Work',
    workItems: 'workItems',
    More: 'More'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'home' | 'about' | 'aboutMe' | 'languages' | 'languagesItem' | 'whyMe' | 'whyMeItems' | 'work' | 'workItems' | 'more'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Home: {
        payload: Prisma.$HomePayload<ExtArgs>
        fields: Prisma.HomeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HomeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HomePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HomeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HomePayload>
          }
          findFirst: {
            args: Prisma.HomeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HomePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HomeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HomePayload>
          }
          findMany: {
            args: Prisma.HomeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HomePayload>[]
          }
          create: {
            args: Prisma.HomeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HomePayload>
          }
          createMany: {
            args: Prisma.HomeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HomeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HomePayload>
          }
          update: {
            args: Prisma.HomeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HomePayload>
          }
          deleteMany: {
            args: Prisma.HomeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HomeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HomeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HomePayload>
          }
          aggregate: {
            args: Prisma.HomeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHome>
          }
          groupBy: {
            args: Prisma.HomeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HomeGroupByOutputType>[]
          }
          count: {
            args: Prisma.HomeCountArgs<ExtArgs>,
            result: $Utils.Optional<HomeCountAggregateOutputType> | number
          }
        }
      }
      About: {
        payload: Prisma.$AboutPayload<ExtArgs>
        fields: Prisma.AboutFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AboutFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AboutPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AboutFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AboutPayload>
          }
          findFirst: {
            args: Prisma.AboutFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AboutPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AboutFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AboutPayload>
          }
          findMany: {
            args: Prisma.AboutFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AboutPayload>[]
          }
          create: {
            args: Prisma.AboutCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AboutPayload>
          }
          createMany: {
            args: Prisma.AboutCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AboutDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AboutPayload>
          }
          update: {
            args: Prisma.AboutUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AboutPayload>
          }
          deleteMany: {
            args: Prisma.AboutDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AboutUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AboutUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AboutPayload>
          }
          aggregate: {
            args: Prisma.AboutAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAbout>
          }
          groupBy: {
            args: Prisma.AboutGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AboutGroupByOutputType>[]
          }
          count: {
            args: Prisma.AboutCountArgs<ExtArgs>,
            result: $Utils.Optional<AboutCountAggregateOutputType> | number
          }
        }
      }
      AboutMe: {
        payload: Prisma.$AboutMePayload<ExtArgs>
        fields: Prisma.AboutMeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AboutMeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AboutMePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AboutMeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AboutMePayload>
          }
          findFirst: {
            args: Prisma.AboutMeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AboutMePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AboutMeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AboutMePayload>
          }
          findMany: {
            args: Prisma.AboutMeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AboutMePayload>[]
          }
          create: {
            args: Prisma.AboutMeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AboutMePayload>
          }
          createMany: {
            args: Prisma.AboutMeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AboutMeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AboutMePayload>
          }
          update: {
            args: Prisma.AboutMeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AboutMePayload>
          }
          deleteMany: {
            args: Prisma.AboutMeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AboutMeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AboutMeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AboutMePayload>
          }
          aggregate: {
            args: Prisma.AboutMeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAboutMe>
          }
          groupBy: {
            args: Prisma.AboutMeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AboutMeGroupByOutputType>[]
          }
          count: {
            args: Prisma.AboutMeCountArgs<ExtArgs>,
            result: $Utils.Optional<AboutMeCountAggregateOutputType> | number
          }
        }
      }
      Languages: {
        payload: Prisma.$LanguagesPayload<ExtArgs>
        fields: Prisma.LanguagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LanguagesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LanguagesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>
          }
          findFirst: {
            args: Prisma.LanguagesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LanguagesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>
          }
          findMany: {
            args: Prisma.LanguagesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>[]
          }
          create: {
            args: Prisma.LanguagesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>
          }
          createMany: {
            args: Prisma.LanguagesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LanguagesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>
          }
          update: {
            args: Prisma.LanguagesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>
          }
          deleteMany: {
            args: Prisma.LanguagesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LanguagesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LanguagesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesPayload>
          }
          aggregate: {
            args: Prisma.LanguagesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLanguages>
          }
          groupBy: {
            args: Prisma.LanguagesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LanguagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.LanguagesCountArgs<ExtArgs>,
            result: $Utils.Optional<LanguagesCountAggregateOutputType> | number
          }
        }
      }
      LanguagesItem: {
        payload: Prisma.$LanguagesItemPayload<ExtArgs>
        fields: Prisma.LanguagesItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LanguagesItemFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LanguagesItemFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesItemPayload>
          }
          findFirst: {
            args: Prisma.LanguagesItemFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LanguagesItemFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesItemPayload>
          }
          findMany: {
            args: Prisma.LanguagesItemFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesItemPayload>[]
          }
          create: {
            args: Prisma.LanguagesItemCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesItemPayload>
          }
          createMany: {
            args: Prisma.LanguagesItemCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LanguagesItemDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesItemPayload>
          }
          update: {
            args: Prisma.LanguagesItemUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesItemPayload>
          }
          deleteMany: {
            args: Prisma.LanguagesItemDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LanguagesItemUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LanguagesItemUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagesItemPayload>
          }
          aggregate: {
            args: Prisma.LanguagesItemAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLanguagesItem>
          }
          groupBy: {
            args: Prisma.LanguagesItemGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LanguagesItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.LanguagesItemCountArgs<ExtArgs>,
            result: $Utils.Optional<LanguagesItemCountAggregateOutputType> | number
          }
        }
      }
      whyMe: {
        payload: Prisma.$whyMePayload<ExtArgs>
        fields: Prisma.whyMeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.whyMeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$whyMePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.whyMeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$whyMePayload>
          }
          findFirst: {
            args: Prisma.whyMeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$whyMePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.whyMeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$whyMePayload>
          }
          findMany: {
            args: Prisma.whyMeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$whyMePayload>[]
          }
          create: {
            args: Prisma.whyMeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$whyMePayload>
          }
          createMany: {
            args: Prisma.whyMeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.whyMeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$whyMePayload>
          }
          update: {
            args: Prisma.whyMeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$whyMePayload>
          }
          deleteMany: {
            args: Prisma.whyMeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.whyMeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.whyMeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$whyMePayload>
          }
          aggregate: {
            args: Prisma.WhyMeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWhyMe>
          }
          groupBy: {
            args: Prisma.whyMeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WhyMeGroupByOutputType>[]
          }
          count: {
            args: Prisma.whyMeCountArgs<ExtArgs>,
            result: $Utils.Optional<WhyMeCountAggregateOutputType> | number
          }
        }
      }
      whyMeItems: {
        payload: Prisma.$whyMeItemsPayload<ExtArgs>
        fields: Prisma.whyMeItemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.whyMeItemsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$whyMeItemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.whyMeItemsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$whyMeItemsPayload>
          }
          findFirst: {
            args: Prisma.whyMeItemsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$whyMeItemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.whyMeItemsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$whyMeItemsPayload>
          }
          findMany: {
            args: Prisma.whyMeItemsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$whyMeItemsPayload>[]
          }
          create: {
            args: Prisma.whyMeItemsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$whyMeItemsPayload>
          }
          createMany: {
            args: Prisma.whyMeItemsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.whyMeItemsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$whyMeItemsPayload>
          }
          update: {
            args: Prisma.whyMeItemsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$whyMeItemsPayload>
          }
          deleteMany: {
            args: Prisma.whyMeItemsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.whyMeItemsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.whyMeItemsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$whyMeItemsPayload>
          }
          aggregate: {
            args: Prisma.WhyMeItemsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWhyMeItems>
          }
          groupBy: {
            args: Prisma.whyMeItemsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WhyMeItemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.whyMeItemsCountArgs<ExtArgs>,
            result: $Utils.Optional<WhyMeItemsCountAggregateOutputType> | number
          }
        }
      }
      Work: {
        payload: Prisma.$WorkPayload<ExtArgs>
        fields: Prisma.WorkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkPayload>
          }
          findFirst: {
            args: Prisma.WorkFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkPayload>
          }
          findMany: {
            args: Prisma.WorkFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkPayload>[]
          }
          create: {
            args: Prisma.WorkCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkPayload>
          }
          createMany: {
            args: Prisma.WorkCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WorkDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkPayload>
          }
          update: {
            args: Prisma.WorkUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkPayload>
          }
          deleteMany: {
            args: Prisma.WorkDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WorkUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WorkUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkPayload>
          }
          aggregate: {
            args: Prisma.WorkAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWork>
          }
          groupBy: {
            args: Prisma.WorkGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WorkGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkCountArgs<ExtArgs>,
            result: $Utils.Optional<WorkCountAggregateOutputType> | number
          }
        }
      }
      workItems: {
        payload: Prisma.$workItemsPayload<ExtArgs>
        fields: Prisma.workItemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.workItemsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$workItemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.workItemsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$workItemsPayload>
          }
          findFirst: {
            args: Prisma.workItemsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$workItemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.workItemsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$workItemsPayload>
          }
          findMany: {
            args: Prisma.workItemsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$workItemsPayload>[]
          }
          create: {
            args: Prisma.workItemsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$workItemsPayload>
          }
          createMany: {
            args: Prisma.workItemsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.workItemsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$workItemsPayload>
          }
          update: {
            args: Prisma.workItemsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$workItemsPayload>
          }
          deleteMany: {
            args: Prisma.workItemsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.workItemsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.workItemsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$workItemsPayload>
          }
          aggregate: {
            args: Prisma.WorkItemsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWorkItems>
          }
          groupBy: {
            args: Prisma.workItemsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WorkItemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.workItemsCountArgs<ExtArgs>,
            result: $Utils.Optional<WorkItemsCountAggregateOutputType> | number
          }
        }
      }
      More: {
        payload: Prisma.$MorePayload<ExtArgs>
        fields: Prisma.MoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MoreFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MoreFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MorePayload>
          }
          findFirst: {
            args: Prisma.MoreFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MoreFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MorePayload>
          }
          findMany: {
            args: Prisma.MoreFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MorePayload>[]
          }
          create: {
            args: Prisma.MoreCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MorePayload>
          }
          createMany: {
            args: Prisma.MoreCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MoreDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MorePayload>
          }
          update: {
            args: Prisma.MoreUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MorePayload>
          }
          deleteMany: {
            args: Prisma.MoreDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MoreUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MoreUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MorePayload>
          }
          aggregate: {
            args: Prisma.MoreAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMore>
          }
          groupBy: {
            args: Prisma.MoreGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.MoreCountArgs<ExtArgs>,
            result: $Utils.Optional<MoreCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AboutCountOutputType
   */

  export type AboutCountOutputType = {
    about_me: number
  }

  export type AboutCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    about_me?: boolean | AboutCountOutputTypeCountAbout_meArgs
  }

  // Custom InputTypes

  /**
   * AboutCountOutputType without action
   */
  export type AboutCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutCountOutputType
     */
    select?: AboutCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AboutCountOutputType without action
   */
  export type AboutCountOutputTypeCountAbout_meArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AboutMeWhereInput
  }



  /**
   * Count Type LanguagesCountOutputType
   */

  export type LanguagesCountOutputType = {
    language_items: number
  }

  export type LanguagesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    language_items?: boolean | LanguagesCountOutputTypeCountLanguage_itemsArgs
  }

  // Custom InputTypes

  /**
   * LanguagesCountOutputType without action
   */
  export type LanguagesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguagesCountOutputType
     */
    select?: LanguagesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * LanguagesCountOutputType without action
   */
  export type LanguagesCountOutputTypeCountLanguage_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguagesItemWhereInput
  }



  /**
   * Count Type WhyMeCountOutputType
   */

  export type WhyMeCountOutputType = {
    why_me_items: number
  }

  export type WhyMeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    why_me_items?: boolean | WhyMeCountOutputTypeCountWhy_me_itemsArgs
  }

  // Custom InputTypes

  /**
   * WhyMeCountOutputType without action
   */
  export type WhyMeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WhyMeCountOutputType
     */
    select?: WhyMeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * WhyMeCountOutputType without action
   */
  export type WhyMeCountOutputTypeCountWhy_me_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: whyMeItemsWhereInput
  }



  /**
   * Count Type WorkCountOutputType
   */

  export type WorkCountOutputType = {
    work_items: number
  }

  export type WorkCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    work_items?: boolean | WorkCountOutputTypeCountWork_itemsArgs
  }

  // Custom InputTypes

  /**
   * WorkCountOutputType without action
   */
  export type WorkCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkCountOutputType
     */
    select?: WorkCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * WorkCountOutputType without action
   */
  export type WorkCountOutputTypeCountWork_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: workItemsWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
    image: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
    image: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    created_at: number
    updated_at: number
    image: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    created_at?: true
    updated_at?: true
    image?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    created_at?: true
    updated_at?: true
    image?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    created_at?: true
    updated_at?: true
    image?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    name: string
    password: string
    created_at: Date
    updated_at: Date
    image: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    created_at?: boolean
    updated_at?: boolean
    image?: boolean
    Home?: boolean | User$HomeArgs<ExtArgs>
    About?: boolean | User$AboutArgs<ExtArgs>
    languages?: boolean | User$languagesArgs<ExtArgs>
    work?: boolean | User$workArgs<ExtArgs>
    More?: boolean | User$MoreArgs<ExtArgs>
    whyMe?: boolean | User$whyMeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    created_at?: boolean
    updated_at?: boolean
    image?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Home?: boolean | User$HomeArgs<ExtArgs>
    About?: boolean | User$AboutArgs<ExtArgs>
    languages?: boolean | User$languagesArgs<ExtArgs>
    work?: boolean | User$workArgs<ExtArgs>
    More?: boolean | User$MoreArgs<ExtArgs>
    whyMe?: boolean | User$whyMeArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Home: Prisma.$HomePayload<ExtArgs> | null
      About: Prisma.$AboutPayload<ExtArgs> | null
      languages: Prisma.$LanguagesPayload<ExtArgs> | null
      work: Prisma.$WorkPayload<ExtArgs> | null
      More: Prisma.$MorePayload<ExtArgs> | null
      whyMe: Prisma.$whyMePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      name: string
      password: string
      created_at: Date
      updated_at: Date
      image: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Home<T extends User$HomeArgs<ExtArgs> = {}>(args?: Subset<T, User$HomeArgs<ExtArgs>>): Prisma__HomeClient<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    About<T extends User$AboutArgs<ExtArgs> = {}>(args?: Subset<T, User$AboutArgs<ExtArgs>>): Prisma__AboutClient<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    languages<T extends User$languagesArgs<ExtArgs> = {}>(args?: Subset<T, User$languagesArgs<ExtArgs>>): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    work<T extends User$workArgs<ExtArgs> = {}>(args?: Subset<T, User$workArgs<ExtArgs>>): Prisma__WorkClient<$Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    More<T extends User$MoreArgs<ExtArgs> = {}>(args?: Subset<T, User$MoreArgs<ExtArgs>>): Prisma__MoreClient<$Result.GetResult<Prisma.$MorePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    whyMe<T extends User$whyMeArgs<ExtArgs> = {}>(args?: Subset<T, User$whyMeArgs<ExtArgs>>): Prisma__whyMeClient<$Result.GetResult<Prisma.$whyMePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly created_at: FieldRef<"User", 'DateTime'>
    readonly updated_at: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.Home
   */
  export type User$HomeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HomeInclude<ExtArgs> | null
    where?: HomeWhereInput
  }


  /**
   * User.About
   */
  export type User$AboutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude<ExtArgs> | null
    where?: AboutWhereInput
  }


  /**
   * User.languages
   */
  export type User$languagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    where?: LanguagesWhereInput
  }


  /**
   * User.work
   */
  export type User$workArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Work
     */
    select?: WorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkInclude<ExtArgs> | null
    where?: WorkWhereInput
  }


  /**
   * User.More
   */
  export type User$MoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the More
     */
    select?: MoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MoreInclude<ExtArgs> | null
    where?: MoreWhereInput
  }


  /**
   * User.whyMe
   */
  export type User$whyMeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMe
     */
    select?: whyMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeInclude<ExtArgs> | null
    where?: whyMeWhereInput
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Home
   */

  export type AggregateHome = {
    _count: HomeCountAggregateOutputType | null
    _avg: HomeAvgAggregateOutputType | null
    _sum: HomeSumAggregateOutputType | null
    _min: HomeMinAggregateOutputType | null
    _max: HomeMaxAggregateOutputType | null
  }

  export type HomeAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type HomeSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type HomeMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    logo_name: string | null
    image: string | null
    title: string | null
    description: string | null
    copy_email: string | null
  }

  export type HomeMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    logo_name: string | null
    image: string | null
    title: string | null
    description: string | null
    copy_email: string | null
  }

  export type HomeCountAggregateOutputType = {
    id: number
    user_id: number
    logo_name: number
    image: number
    title: number
    description: number
    copy_email: number
    _all: number
  }


  export type HomeAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type HomeSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type HomeMinAggregateInputType = {
    id?: true
    user_id?: true
    logo_name?: true
    image?: true
    title?: true
    description?: true
    copy_email?: true
  }

  export type HomeMaxAggregateInputType = {
    id?: true
    user_id?: true
    logo_name?: true
    image?: true
    title?: true
    description?: true
    copy_email?: true
  }

  export type HomeCountAggregateInputType = {
    id?: true
    user_id?: true
    logo_name?: true
    image?: true
    title?: true
    description?: true
    copy_email?: true
    _all?: true
  }

  export type HomeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Home to aggregate.
     */
    where?: HomeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Homes to fetch.
     */
    orderBy?: HomeOrderByWithRelationInput | HomeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HomeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Homes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Homes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Homes
    **/
    _count?: true | HomeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HomeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HomeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HomeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HomeMaxAggregateInputType
  }

  export type GetHomeAggregateType<T extends HomeAggregateArgs> = {
        [P in keyof T & keyof AggregateHome]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHome[P]>
      : GetScalarType<T[P], AggregateHome[P]>
  }




  export type HomeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HomeWhereInput
    orderBy?: HomeOrderByWithAggregationInput | HomeOrderByWithAggregationInput[]
    by: HomeScalarFieldEnum[] | HomeScalarFieldEnum
    having?: HomeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HomeCountAggregateInputType | true
    _avg?: HomeAvgAggregateInputType
    _sum?: HomeSumAggregateInputType
    _min?: HomeMinAggregateInputType
    _max?: HomeMaxAggregateInputType
  }

  export type HomeGroupByOutputType = {
    id: number
    user_id: number
    logo_name: string
    image: string
    title: string
    description: string
    copy_email: string
    _count: HomeCountAggregateOutputType | null
    _avg: HomeAvgAggregateOutputType | null
    _sum: HomeSumAggregateOutputType | null
    _min: HomeMinAggregateOutputType | null
    _max: HomeMaxAggregateOutputType | null
  }

  type GetHomeGroupByPayload<T extends HomeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HomeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HomeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HomeGroupByOutputType[P]>
            : GetScalarType<T[P], HomeGroupByOutputType[P]>
        }
      >
    >


  export type HomeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    logo_name?: boolean
    image?: boolean
    title?: boolean
    description?: boolean
    copy_email?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["home"]>

  export type HomeSelectScalar = {
    id?: boolean
    user_id?: boolean
    logo_name?: boolean
    image?: boolean
    title?: boolean
    description?: boolean
    copy_email?: boolean
  }

  export type HomeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $HomePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Home"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      logo_name: string
      image: string
      title: string
      description: string
      copy_email: string
    }, ExtArgs["result"]["home"]>
    composites: {}
  }


  type HomeGetPayload<S extends boolean | null | undefined | HomeDefaultArgs> = $Result.GetResult<Prisma.$HomePayload, S>

  type HomeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HomeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HomeCountAggregateInputType | true
    }

  export interface HomeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Home'], meta: { name: 'Home' } }
    /**
     * Find zero or one Home that matches the filter.
     * @param {HomeFindUniqueArgs} args - Arguments to find a Home
     * @example
     * // Get one Home
     * const home = await prisma.home.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HomeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HomeFindUniqueArgs<ExtArgs>>
    ): Prisma__HomeClient<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Home that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HomeFindUniqueOrThrowArgs} args - Arguments to find a Home
     * @example
     * // Get one Home
     * const home = await prisma.home.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HomeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HomeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HomeClient<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Home that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeFindFirstArgs} args - Arguments to find a Home
     * @example
     * // Get one Home
     * const home = await prisma.home.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HomeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HomeFindFirstArgs<ExtArgs>>
    ): Prisma__HomeClient<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Home that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeFindFirstOrThrowArgs} args - Arguments to find a Home
     * @example
     * // Get one Home
     * const home = await prisma.home.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HomeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HomeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HomeClient<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Homes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Homes
     * const homes = await prisma.home.findMany()
     * 
     * // Get first 10 Homes
     * const homes = await prisma.home.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const homeWithIdOnly = await prisma.home.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HomeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HomeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Home.
     * @param {HomeCreateArgs} args - Arguments to create a Home.
     * @example
     * // Create one Home
     * const Home = await prisma.home.create({
     *   data: {
     *     // ... data to create a Home
     *   }
     * })
     * 
    **/
    create<T extends HomeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HomeCreateArgs<ExtArgs>>
    ): Prisma__HomeClient<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Homes.
     *     @param {HomeCreateManyArgs} args - Arguments to create many Homes.
     *     @example
     *     // Create many Homes
     *     const home = await prisma.home.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HomeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HomeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Home.
     * @param {HomeDeleteArgs} args - Arguments to delete one Home.
     * @example
     * // Delete one Home
     * const Home = await prisma.home.delete({
     *   where: {
     *     // ... filter to delete one Home
     *   }
     * })
     * 
    **/
    delete<T extends HomeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HomeDeleteArgs<ExtArgs>>
    ): Prisma__HomeClient<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Home.
     * @param {HomeUpdateArgs} args - Arguments to update one Home.
     * @example
     * // Update one Home
     * const home = await prisma.home.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HomeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HomeUpdateArgs<ExtArgs>>
    ): Prisma__HomeClient<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Homes.
     * @param {HomeDeleteManyArgs} args - Arguments to filter Homes to delete.
     * @example
     * // Delete a few Homes
     * const { count } = await prisma.home.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HomeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HomeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Homes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Homes
     * const home = await prisma.home.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HomeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HomeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Home.
     * @param {HomeUpsertArgs} args - Arguments to update or create a Home.
     * @example
     * // Update or create a Home
     * const home = await prisma.home.upsert({
     *   create: {
     *     // ... data to create a Home
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Home we want to update
     *   }
     * })
    **/
    upsert<T extends HomeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HomeUpsertArgs<ExtArgs>>
    ): Prisma__HomeClient<$Result.GetResult<Prisma.$HomePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Homes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeCountArgs} args - Arguments to filter Homes to count.
     * @example
     * // Count the number of Homes
     * const count = await prisma.home.count({
     *   where: {
     *     // ... the filter for the Homes we want to count
     *   }
     * })
    **/
    count<T extends HomeCountArgs>(
      args?: Subset<T, HomeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HomeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Home.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HomeAggregateArgs>(args: Subset<T, HomeAggregateArgs>): Prisma.PrismaPromise<GetHomeAggregateType<T>>

    /**
     * Group by Home.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HomeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HomeGroupByArgs['orderBy'] }
        : { orderBy?: HomeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HomeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHomeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Home model
   */
  readonly fields: HomeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Home.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HomeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Home model
   */ 
  interface HomeFieldRefs {
    readonly id: FieldRef<"Home", 'Int'>
    readonly user_id: FieldRef<"Home", 'Int'>
    readonly logo_name: FieldRef<"Home", 'String'>
    readonly image: FieldRef<"Home", 'String'>
    readonly title: FieldRef<"Home", 'String'>
    readonly description: FieldRef<"Home", 'String'>
    readonly copy_email: FieldRef<"Home", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Home findUnique
   */
  export type HomeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HomeInclude<ExtArgs> | null
    /**
     * Filter, which Home to fetch.
     */
    where: HomeWhereUniqueInput
  }


  /**
   * Home findUniqueOrThrow
   */
  export type HomeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HomeInclude<ExtArgs> | null
    /**
     * Filter, which Home to fetch.
     */
    where: HomeWhereUniqueInput
  }


  /**
   * Home findFirst
   */
  export type HomeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HomeInclude<ExtArgs> | null
    /**
     * Filter, which Home to fetch.
     */
    where?: HomeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Homes to fetch.
     */
    orderBy?: HomeOrderByWithRelationInput | HomeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Homes.
     */
    cursor?: HomeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Homes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Homes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Homes.
     */
    distinct?: HomeScalarFieldEnum | HomeScalarFieldEnum[]
  }


  /**
   * Home findFirstOrThrow
   */
  export type HomeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HomeInclude<ExtArgs> | null
    /**
     * Filter, which Home to fetch.
     */
    where?: HomeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Homes to fetch.
     */
    orderBy?: HomeOrderByWithRelationInput | HomeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Homes.
     */
    cursor?: HomeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Homes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Homes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Homes.
     */
    distinct?: HomeScalarFieldEnum | HomeScalarFieldEnum[]
  }


  /**
   * Home findMany
   */
  export type HomeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HomeInclude<ExtArgs> | null
    /**
     * Filter, which Homes to fetch.
     */
    where?: HomeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Homes to fetch.
     */
    orderBy?: HomeOrderByWithRelationInput | HomeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Homes.
     */
    cursor?: HomeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Homes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Homes.
     */
    skip?: number
    distinct?: HomeScalarFieldEnum | HomeScalarFieldEnum[]
  }


  /**
   * Home create
   */
  export type HomeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HomeInclude<ExtArgs> | null
    /**
     * The data needed to create a Home.
     */
    data: XOR<HomeCreateInput, HomeUncheckedCreateInput>
  }


  /**
   * Home createMany
   */
  export type HomeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Homes.
     */
    data: HomeCreateManyInput | HomeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Home update
   */
  export type HomeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HomeInclude<ExtArgs> | null
    /**
     * The data needed to update a Home.
     */
    data: XOR<HomeUpdateInput, HomeUncheckedUpdateInput>
    /**
     * Choose, which Home to update.
     */
    where: HomeWhereUniqueInput
  }


  /**
   * Home updateMany
   */
  export type HomeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Homes.
     */
    data: XOR<HomeUpdateManyMutationInput, HomeUncheckedUpdateManyInput>
    /**
     * Filter which Homes to update
     */
    where?: HomeWhereInput
  }


  /**
   * Home upsert
   */
  export type HomeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HomeInclude<ExtArgs> | null
    /**
     * The filter to search for the Home to update in case it exists.
     */
    where: HomeWhereUniqueInput
    /**
     * In case the Home found by the `where` argument doesn't exist, create a new Home with this data.
     */
    create: XOR<HomeCreateInput, HomeUncheckedCreateInput>
    /**
     * In case the Home was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HomeUpdateInput, HomeUncheckedUpdateInput>
  }


  /**
   * Home delete
   */
  export type HomeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HomeInclude<ExtArgs> | null
    /**
     * Filter which Home to delete.
     */
    where: HomeWhereUniqueInput
  }


  /**
   * Home deleteMany
   */
  export type HomeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Homes to delete
     */
    where?: HomeWhereInput
  }


  /**
   * Home without action
   */
  export type HomeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Home
     */
    select?: HomeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HomeInclude<ExtArgs> | null
  }



  /**
   * Model About
   */

  export type AggregateAbout = {
    _count: AboutCountAggregateOutputType | null
    _avg: AboutAvgAggregateOutputType | null
    _sum: AboutSumAggregateOutputType | null
    _min: AboutMinAggregateOutputType | null
    _max: AboutMaxAggregateOutputType | null
  }

  export type AboutAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type AboutSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type AboutMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    sub_title: string | null
    title: string | null
    description: string | null
    image: string | null
  }

  export type AboutMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    sub_title: string | null
    title: string | null
    description: string | null
    image: string | null
  }

  export type AboutCountAggregateOutputType = {
    id: number
    user_id: number
    sub_title: number
    title: number
    description: number
    image: number
    _all: number
  }


  export type AboutAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type AboutSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type AboutMinAggregateInputType = {
    id?: true
    user_id?: true
    sub_title?: true
    title?: true
    description?: true
    image?: true
  }

  export type AboutMaxAggregateInputType = {
    id?: true
    user_id?: true
    sub_title?: true
    title?: true
    description?: true
    image?: true
  }

  export type AboutCountAggregateInputType = {
    id?: true
    user_id?: true
    sub_title?: true
    title?: true
    description?: true
    image?: true
    _all?: true
  }

  export type AboutAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which About to aggregate.
     */
    where?: AboutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abouts to fetch.
     */
    orderBy?: AboutOrderByWithRelationInput | AboutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AboutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Abouts
    **/
    _count?: true | AboutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AboutAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AboutSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AboutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AboutMaxAggregateInputType
  }

  export type GetAboutAggregateType<T extends AboutAggregateArgs> = {
        [P in keyof T & keyof AggregateAbout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAbout[P]>
      : GetScalarType<T[P], AggregateAbout[P]>
  }




  export type AboutGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AboutWhereInput
    orderBy?: AboutOrderByWithAggregationInput | AboutOrderByWithAggregationInput[]
    by: AboutScalarFieldEnum[] | AboutScalarFieldEnum
    having?: AboutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AboutCountAggregateInputType | true
    _avg?: AboutAvgAggregateInputType
    _sum?: AboutSumAggregateInputType
    _min?: AboutMinAggregateInputType
    _max?: AboutMaxAggregateInputType
  }

  export type AboutGroupByOutputType = {
    id: number
    user_id: number
    sub_title: string
    title: string
    description: string
    image: string
    _count: AboutCountAggregateOutputType | null
    _avg: AboutAvgAggregateOutputType | null
    _sum: AboutSumAggregateOutputType | null
    _min: AboutMinAggregateOutputType | null
    _max: AboutMaxAggregateOutputType | null
  }

  type GetAboutGroupByPayload<T extends AboutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AboutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AboutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AboutGroupByOutputType[P]>
            : GetScalarType<T[P], AboutGroupByOutputType[P]>
        }
      >
    >


  export type AboutSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    sub_title?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    about_me?: boolean | About$about_meArgs<ExtArgs>
    _count?: boolean | AboutCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["about"]>

  export type AboutSelectScalar = {
    id?: boolean
    user_id?: boolean
    sub_title?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
  }

  export type AboutInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    about_me?: boolean | About$about_meArgs<ExtArgs>
    _count?: boolean | AboutCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AboutPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "About"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      about_me: Prisma.$AboutMePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      sub_title: string
      title: string
      description: string
      image: string
    }, ExtArgs["result"]["about"]>
    composites: {}
  }


  type AboutGetPayload<S extends boolean | null | undefined | AboutDefaultArgs> = $Result.GetResult<Prisma.$AboutPayload, S>

  type AboutCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AboutFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AboutCountAggregateInputType | true
    }

  export interface AboutDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['About'], meta: { name: 'About' } }
    /**
     * Find zero or one About that matches the filter.
     * @param {AboutFindUniqueArgs} args - Arguments to find a About
     * @example
     * // Get one About
     * const about = await prisma.about.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AboutFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AboutFindUniqueArgs<ExtArgs>>
    ): Prisma__AboutClient<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one About that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AboutFindUniqueOrThrowArgs} args - Arguments to find a About
     * @example
     * // Get one About
     * const about = await prisma.about.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AboutFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AboutFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AboutClient<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first About that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutFindFirstArgs} args - Arguments to find a About
     * @example
     * // Get one About
     * const about = await prisma.about.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AboutFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AboutFindFirstArgs<ExtArgs>>
    ): Prisma__AboutClient<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first About that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutFindFirstOrThrowArgs} args - Arguments to find a About
     * @example
     * // Get one About
     * const about = await prisma.about.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AboutFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AboutFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AboutClient<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Abouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Abouts
     * const abouts = await prisma.about.findMany()
     * 
     * // Get first 10 Abouts
     * const abouts = await prisma.about.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aboutWithIdOnly = await prisma.about.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AboutFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AboutFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a About.
     * @param {AboutCreateArgs} args - Arguments to create a About.
     * @example
     * // Create one About
     * const About = await prisma.about.create({
     *   data: {
     *     // ... data to create a About
     *   }
     * })
     * 
    **/
    create<T extends AboutCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AboutCreateArgs<ExtArgs>>
    ): Prisma__AboutClient<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Abouts.
     *     @param {AboutCreateManyArgs} args - Arguments to create many Abouts.
     *     @example
     *     // Create many Abouts
     *     const about = await prisma.about.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AboutCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AboutCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a About.
     * @param {AboutDeleteArgs} args - Arguments to delete one About.
     * @example
     * // Delete one About
     * const About = await prisma.about.delete({
     *   where: {
     *     // ... filter to delete one About
     *   }
     * })
     * 
    **/
    delete<T extends AboutDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AboutDeleteArgs<ExtArgs>>
    ): Prisma__AboutClient<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one About.
     * @param {AboutUpdateArgs} args - Arguments to update one About.
     * @example
     * // Update one About
     * const about = await prisma.about.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AboutUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AboutUpdateArgs<ExtArgs>>
    ): Prisma__AboutClient<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Abouts.
     * @param {AboutDeleteManyArgs} args - Arguments to filter Abouts to delete.
     * @example
     * // Delete a few Abouts
     * const { count } = await prisma.about.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AboutDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AboutDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Abouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Abouts
     * const about = await prisma.about.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AboutUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AboutUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one About.
     * @param {AboutUpsertArgs} args - Arguments to update or create a About.
     * @example
     * // Update or create a About
     * const about = await prisma.about.upsert({
     *   create: {
     *     // ... data to create a About
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the About we want to update
     *   }
     * })
    **/
    upsert<T extends AboutUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AboutUpsertArgs<ExtArgs>>
    ): Prisma__AboutClient<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Abouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutCountArgs} args - Arguments to filter Abouts to count.
     * @example
     * // Count the number of Abouts
     * const count = await prisma.about.count({
     *   where: {
     *     // ... the filter for the Abouts we want to count
     *   }
     * })
    **/
    count<T extends AboutCountArgs>(
      args?: Subset<T, AboutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AboutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a About.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AboutAggregateArgs>(args: Subset<T, AboutAggregateArgs>): Prisma.PrismaPromise<GetAboutAggregateType<T>>

    /**
     * Group by About.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AboutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AboutGroupByArgs['orderBy'] }
        : { orderBy?: AboutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AboutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAboutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the About model
   */
  readonly fields: AboutFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for About.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AboutClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    about_me<T extends About$about_meArgs<ExtArgs> = {}>(args?: Subset<T, About$about_meArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AboutMePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the About model
   */ 
  interface AboutFieldRefs {
    readonly id: FieldRef<"About", 'Int'>
    readonly user_id: FieldRef<"About", 'Int'>
    readonly sub_title: FieldRef<"About", 'String'>
    readonly title: FieldRef<"About", 'String'>
    readonly description: FieldRef<"About", 'String'>
    readonly image: FieldRef<"About", 'String'>
  }
    

  // Custom InputTypes

  /**
   * About findUnique
   */
  export type AboutFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude<ExtArgs> | null
    /**
     * Filter, which About to fetch.
     */
    where: AboutWhereUniqueInput
  }


  /**
   * About findUniqueOrThrow
   */
  export type AboutFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude<ExtArgs> | null
    /**
     * Filter, which About to fetch.
     */
    where: AboutWhereUniqueInput
  }


  /**
   * About findFirst
   */
  export type AboutFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude<ExtArgs> | null
    /**
     * Filter, which About to fetch.
     */
    where?: AboutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abouts to fetch.
     */
    orderBy?: AboutOrderByWithRelationInput | AboutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Abouts.
     */
    cursor?: AboutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Abouts.
     */
    distinct?: AboutScalarFieldEnum | AboutScalarFieldEnum[]
  }


  /**
   * About findFirstOrThrow
   */
  export type AboutFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude<ExtArgs> | null
    /**
     * Filter, which About to fetch.
     */
    where?: AboutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abouts to fetch.
     */
    orderBy?: AboutOrderByWithRelationInput | AboutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Abouts.
     */
    cursor?: AboutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Abouts.
     */
    distinct?: AboutScalarFieldEnum | AboutScalarFieldEnum[]
  }


  /**
   * About findMany
   */
  export type AboutFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude<ExtArgs> | null
    /**
     * Filter, which Abouts to fetch.
     */
    where?: AboutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abouts to fetch.
     */
    orderBy?: AboutOrderByWithRelationInput | AboutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Abouts.
     */
    cursor?: AboutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abouts.
     */
    skip?: number
    distinct?: AboutScalarFieldEnum | AboutScalarFieldEnum[]
  }


  /**
   * About create
   */
  export type AboutCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude<ExtArgs> | null
    /**
     * The data needed to create a About.
     */
    data: XOR<AboutCreateInput, AboutUncheckedCreateInput>
  }


  /**
   * About createMany
   */
  export type AboutCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Abouts.
     */
    data: AboutCreateManyInput | AboutCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * About update
   */
  export type AboutUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude<ExtArgs> | null
    /**
     * The data needed to update a About.
     */
    data: XOR<AboutUpdateInput, AboutUncheckedUpdateInput>
    /**
     * Choose, which About to update.
     */
    where: AboutWhereUniqueInput
  }


  /**
   * About updateMany
   */
  export type AboutUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Abouts.
     */
    data: XOR<AboutUpdateManyMutationInput, AboutUncheckedUpdateManyInput>
    /**
     * Filter which Abouts to update
     */
    where?: AboutWhereInput
  }


  /**
   * About upsert
   */
  export type AboutUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude<ExtArgs> | null
    /**
     * The filter to search for the About to update in case it exists.
     */
    where: AboutWhereUniqueInput
    /**
     * In case the About found by the `where` argument doesn't exist, create a new About with this data.
     */
    create: XOR<AboutCreateInput, AboutUncheckedCreateInput>
    /**
     * In case the About was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AboutUpdateInput, AboutUncheckedUpdateInput>
  }


  /**
   * About delete
   */
  export type AboutDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude<ExtArgs> | null
    /**
     * Filter which About to delete.
     */
    where: AboutWhereUniqueInput
  }


  /**
   * About deleteMany
   */
  export type AboutDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Abouts to delete
     */
    where?: AboutWhereInput
  }


  /**
   * About.about_me
   */
  export type About$about_meArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutMe
     */
    select?: AboutMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutMeInclude<ExtArgs> | null
    where?: AboutMeWhereInput
    orderBy?: AboutMeOrderByWithRelationInput | AboutMeOrderByWithRelationInput[]
    cursor?: AboutMeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AboutMeScalarFieldEnum | AboutMeScalarFieldEnum[]
  }


  /**
   * About without action
   */
  export type AboutDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude<ExtArgs> | null
  }



  /**
   * Model AboutMe
   */

  export type AggregateAboutMe = {
    _count: AboutMeCountAggregateOutputType | null
    _avg: AboutMeAvgAggregateOutputType | null
    _sum: AboutMeSumAggregateOutputType | null
    _min: AboutMeMinAggregateOutputType | null
    _max: AboutMeMaxAggregateOutputType | null
  }

  export type AboutMeAvgAggregateOutputType = {
    id: number | null
    about_id: number | null
  }

  export type AboutMeSumAggregateOutputType = {
    id: number | null
    about_id: number | null
  }

  export type AboutMeMinAggregateOutputType = {
    id: number | null
    about_id: number | null
    about_me_title: string | null
    about_me_description: string | null
  }

  export type AboutMeMaxAggregateOutputType = {
    id: number | null
    about_id: number | null
    about_me_title: string | null
    about_me_description: string | null
  }

  export type AboutMeCountAggregateOutputType = {
    id: number
    about_id: number
    about_me_title: number
    about_me_description: number
    _all: number
  }


  export type AboutMeAvgAggregateInputType = {
    id?: true
    about_id?: true
  }

  export type AboutMeSumAggregateInputType = {
    id?: true
    about_id?: true
  }

  export type AboutMeMinAggregateInputType = {
    id?: true
    about_id?: true
    about_me_title?: true
    about_me_description?: true
  }

  export type AboutMeMaxAggregateInputType = {
    id?: true
    about_id?: true
    about_me_title?: true
    about_me_description?: true
  }

  export type AboutMeCountAggregateInputType = {
    id?: true
    about_id?: true
    about_me_title?: true
    about_me_description?: true
    _all?: true
  }

  export type AboutMeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AboutMe to aggregate.
     */
    where?: AboutMeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AboutMes to fetch.
     */
    orderBy?: AboutMeOrderByWithRelationInput | AboutMeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AboutMeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AboutMes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AboutMes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AboutMes
    **/
    _count?: true | AboutMeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AboutMeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AboutMeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AboutMeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AboutMeMaxAggregateInputType
  }

  export type GetAboutMeAggregateType<T extends AboutMeAggregateArgs> = {
        [P in keyof T & keyof AggregateAboutMe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAboutMe[P]>
      : GetScalarType<T[P], AggregateAboutMe[P]>
  }




  export type AboutMeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AboutMeWhereInput
    orderBy?: AboutMeOrderByWithAggregationInput | AboutMeOrderByWithAggregationInput[]
    by: AboutMeScalarFieldEnum[] | AboutMeScalarFieldEnum
    having?: AboutMeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AboutMeCountAggregateInputType | true
    _avg?: AboutMeAvgAggregateInputType
    _sum?: AboutMeSumAggregateInputType
    _min?: AboutMeMinAggregateInputType
    _max?: AboutMeMaxAggregateInputType
  }

  export type AboutMeGroupByOutputType = {
    id: number
    about_id: number | null
    about_me_title: string | null
    about_me_description: string | null
    _count: AboutMeCountAggregateOutputType | null
    _avg: AboutMeAvgAggregateOutputType | null
    _sum: AboutMeSumAggregateOutputType | null
    _min: AboutMeMinAggregateOutputType | null
    _max: AboutMeMaxAggregateOutputType | null
  }

  type GetAboutMeGroupByPayload<T extends AboutMeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AboutMeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AboutMeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AboutMeGroupByOutputType[P]>
            : GetScalarType<T[P], AboutMeGroupByOutputType[P]>
        }
      >
    >


  export type AboutMeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    about_id?: boolean
    about_me_title?: boolean
    about_me_description?: boolean
    About?: boolean | AboutMe$AboutArgs<ExtArgs>
  }, ExtArgs["result"]["aboutMe"]>

  export type AboutMeSelectScalar = {
    id?: boolean
    about_id?: boolean
    about_me_title?: boolean
    about_me_description?: boolean
  }

  export type AboutMeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    About?: boolean | AboutMe$AboutArgs<ExtArgs>
  }


  export type $AboutMePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AboutMe"
    objects: {
      About: Prisma.$AboutPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      about_id: number | null
      about_me_title: string | null
      about_me_description: string | null
    }, ExtArgs["result"]["aboutMe"]>
    composites: {}
  }


  type AboutMeGetPayload<S extends boolean | null | undefined | AboutMeDefaultArgs> = $Result.GetResult<Prisma.$AboutMePayload, S>

  type AboutMeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AboutMeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AboutMeCountAggregateInputType | true
    }

  export interface AboutMeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AboutMe'], meta: { name: 'AboutMe' } }
    /**
     * Find zero or one AboutMe that matches the filter.
     * @param {AboutMeFindUniqueArgs} args - Arguments to find a AboutMe
     * @example
     * // Get one AboutMe
     * const aboutMe = await prisma.aboutMe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AboutMeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AboutMeFindUniqueArgs<ExtArgs>>
    ): Prisma__AboutMeClient<$Result.GetResult<Prisma.$AboutMePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AboutMe that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AboutMeFindUniqueOrThrowArgs} args - Arguments to find a AboutMe
     * @example
     * // Get one AboutMe
     * const aboutMe = await prisma.aboutMe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AboutMeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AboutMeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AboutMeClient<$Result.GetResult<Prisma.$AboutMePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AboutMe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutMeFindFirstArgs} args - Arguments to find a AboutMe
     * @example
     * // Get one AboutMe
     * const aboutMe = await prisma.aboutMe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AboutMeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AboutMeFindFirstArgs<ExtArgs>>
    ): Prisma__AboutMeClient<$Result.GetResult<Prisma.$AboutMePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AboutMe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutMeFindFirstOrThrowArgs} args - Arguments to find a AboutMe
     * @example
     * // Get one AboutMe
     * const aboutMe = await prisma.aboutMe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AboutMeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AboutMeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AboutMeClient<$Result.GetResult<Prisma.$AboutMePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AboutMes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutMeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AboutMes
     * const aboutMes = await prisma.aboutMe.findMany()
     * 
     * // Get first 10 AboutMes
     * const aboutMes = await prisma.aboutMe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aboutMeWithIdOnly = await prisma.aboutMe.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AboutMeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AboutMeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AboutMePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AboutMe.
     * @param {AboutMeCreateArgs} args - Arguments to create a AboutMe.
     * @example
     * // Create one AboutMe
     * const AboutMe = await prisma.aboutMe.create({
     *   data: {
     *     // ... data to create a AboutMe
     *   }
     * })
     * 
    **/
    create<T extends AboutMeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AboutMeCreateArgs<ExtArgs>>
    ): Prisma__AboutMeClient<$Result.GetResult<Prisma.$AboutMePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AboutMes.
     *     @param {AboutMeCreateManyArgs} args - Arguments to create many AboutMes.
     *     @example
     *     // Create many AboutMes
     *     const aboutMe = await prisma.aboutMe.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AboutMeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AboutMeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AboutMe.
     * @param {AboutMeDeleteArgs} args - Arguments to delete one AboutMe.
     * @example
     * // Delete one AboutMe
     * const AboutMe = await prisma.aboutMe.delete({
     *   where: {
     *     // ... filter to delete one AboutMe
     *   }
     * })
     * 
    **/
    delete<T extends AboutMeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AboutMeDeleteArgs<ExtArgs>>
    ): Prisma__AboutMeClient<$Result.GetResult<Prisma.$AboutMePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AboutMe.
     * @param {AboutMeUpdateArgs} args - Arguments to update one AboutMe.
     * @example
     * // Update one AboutMe
     * const aboutMe = await prisma.aboutMe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AboutMeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AboutMeUpdateArgs<ExtArgs>>
    ): Prisma__AboutMeClient<$Result.GetResult<Prisma.$AboutMePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AboutMes.
     * @param {AboutMeDeleteManyArgs} args - Arguments to filter AboutMes to delete.
     * @example
     * // Delete a few AboutMes
     * const { count } = await prisma.aboutMe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AboutMeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AboutMeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AboutMes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutMeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AboutMes
     * const aboutMe = await prisma.aboutMe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AboutMeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AboutMeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AboutMe.
     * @param {AboutMeUpsertArgs} args - Arguments to update or create a AboutMe.
     * @example
     * // Update or create a AboutMe
     * const aboutMe = await prisma.aboutMe.upsert({
     *   create: {
     *     // ... data to create a AboutMe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AboutMe we want to update
     *   }
     * })
    **/
    upsert<T extends AboutMeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AboutMeUpsertArgs<ExtArgs>>
    ): Prisma__AboutMeClient<$Result.GetResult<Prisma.$AboutMePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AboutMes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutMeCountArgs} args - Arguments to filter AboutMes to count.
     * @example
     * // Count the number of AboutMes
     * const count = await prisma.aboutMe.count({
     *   where: {
     *     // ... the filter for the AboutMes we want to count
     *   }
     * })
    **/
    count<T extends AboutMeCountArgs>(
      args?: Subset<T, AboutMeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AboutMeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AboutMe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutMeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AboutMeAggregateArgs>(args: Subset<T, AboutMeAggregateArgs>): Prisma.PrismaPromise<GetAboutMeAggregateType<T>>

    /**
     * Group by AboutMe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutMeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AboutMeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AboutMeGroupByArgs['orderBy'] }
        : { orderBy?: AboutMeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AboutMeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAboutMeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AboutMe model
   */
  readonly fields: AboutMeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AboutMe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AboutMeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    About<T extends AboutMe$AboutArgs<ExtArgs> = {}>(args?: Subset<T, AboutMe$AboutArgs<ExtArgs>>): Prisma__AboutClient<$Result.GetResult<Prisma.$AboutPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AboutMe model
   */ 
  interface AboutMeFieldRefs {
    readonly id: FieldRef<"AboutMe", 'Int'>
    readonly about_id: FieldRef<"AboutMe", 'Int'>
    readonly about_me_title: FieldRef<"AboutMe", 'String'>
    readonly about_me_description: FieldRef<"AboutMe", 'String'>
  }
    

  // Custom InputTypes

  /**
   * AboutMe findUnique
   */
  export type AboutMeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutMe
     */
    select?: AboutMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutMeInclude<ExtArgs> | null
    /**
     * Filter, which AboutMe to fetch.
     */
    where: AboutMeWhereUniqueInput
  }


  /**
   * AboutMe findUniqueOrThrow
   */
  export type AboutMeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutMe
     */
    select?: AboutMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutMeInclude<ExtArgs> | null
    /**
     * Filter, which AboutMe to fetch.
     */
    where: AboutMeWhereUniqueInput
  }


  /**
   * AboutMe findFirst
   */
  export type AboutMeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutMe
     */
    select?: AboutMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutMeInclude<ExtArgs> | null
    /**
     * Filter, which AboutMe to fetch.
     */
    where?: AboutMeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AboutMes to fetch.
     */
    orderBy?: AboutMeOrderByWithRelationInput | AboutMeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AboutMes.
     */
    cursor?: AboutMeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AboutMes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AboutMes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AboutMes.
     */
    distinct?: AboutMeScalarFieldEnum | AboutMeScalarFieldEnum[]
  }


  /**
   * AboutMe findFirstOrThrow
   */
  export type AboutMeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutMe
     */
    select?: AboutMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutMeInclude<ExtArgs> | null
    /**
     * Filter, which AboutMe to fetch.
     */
    where?: AboutMeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AboutMes to fetch.
     */
    orderBy?: AboutMeOrderByWithRelationInput | AboutMeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AboutMes.
     */
    cursor?: AboutMeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AboutMes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AboutMes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AboutMes.
     */
    distinct?: AboutMeScalarFieldEnum | AboutMeScalarFieldEnum[]
  }


  /**
   * AboutMe findMany
   */
  export type AboutMeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutMe
     */
    select?: AboutMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutMeInclude<ExtArgs> | null
    /**
     * Filter, which AboutMes to fetch.
     */
    where?: AboutMeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AboutMes to fetch.
     */
    orderBy?: AboutMeOrderByWithRelationInput | AboutMeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AboutMes.
     */
    cursor?: AboutMeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AboutMes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AboutMes.
     */
    skip?: number
    distinct?: AboutMeScalarFieldEnum | AboutMeScalarFieldEnum[]
  }


  /**
   * AboutMe create
   */
  export type AboutMeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutMe
     */
    select?: AboutMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutMeInclude<ExtArgs> | null
    /**
     * The data needed to create a AboutMe.
     */
    data?: XOR<AboutMeCreateInput, AboutMeUncheckedCreateInput>
  }


  /**
   * AboutMe createMany
   */
  export type AboutMeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AboutMes.
     */
    data: AboutMeCreateManyInput | AboutMeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * AboutMe update
   */
  export type AboutMeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutMe
     */
    select?: AboutMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutMeInclude<ExtArgs> | null
    /**
     * The data needed to update a AboutMe.
     */
    data: XOR<AboutMeUpdateInput, AboutMeUncheckedUpdateInput>
    /**
     * Choose, which AboutMe to update.
     */
    where: AboutMeWhereUniqueInput
  }


  /**
   * AboutMe updateMany
   */
  export type AboutMeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AboutMes.
     */
    data: XOR<AboutMeUpdateManyMutationInput, AboutMeUncheckedUpdateManyInput>
    /**
     * Filter which AboutMes to update
     */
    where?: AboutMeWhereInput
  }


  /**
   * AboutMe upsert
   */
  export type AboutMeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutMe
     */
    select?: AboutMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutMeInclude<ExtArgs> | null
    /**
     * The filter to search for the AboutMe to update in case it exists.
     */
    where: AboutMeWhereUniqueInput
    /**
     * In case the AboutMe found by the `where` argument doesn't exist, create a new AboutMe with this data.
     */
    create: XOR<AboutMeCreateInput, AboutMeUncheckedCreateInput>
    /**
     * In case the AboutMe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AboutMeUpdateInput, AboutMeUncheckedUpdateInput>
  }


  /**
   * AboutMe delete
   */
  export type AboutMeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutMe
     */
    select?: AboutMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutMeInclude<ExtArgs> | null
    /**
     * Filter which AboutMe to delete.
     */
    where: AboutMeWhereUniqueInput
  }


  /**
   * AboutMe deleteMany
   */
  export type AboutMeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AboutMes to delete
     */
    where?: AboutMeWhereInput
  }


  /**
   * AboutMe.About
   */
  export type AboutMe$AboutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the About
     */
    select?: AboutSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutInclude<ExtArgs> | null
    where?: AboutWhereInput
  }


  /**
   * AboutMe without action
   */
  export type AboutMeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutMe
     */
    select?: AboutMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AboutMeInclude<ExtArgs> | null
  }



  /**
   * Model Languages
   */

  export type AggregateLanguages = {
    _count: LanguagesCountAggregateOutputType | null
    _avg: LanguagesAvgAggregateOutputType | null
    _sum: LanguagesSumAggregateOutputType | null
    _min: LanguagesMinAggregateOutputType | null
    _max: LanguagesMaxAggregateOutputType | null
  }

  export type LanguagesAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type LanguagesSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type LanguagesMinAggregateOutputType = {
    id: number | null
    subTitle: string | null
    title: string | null
    user_id: number | null
  }

  export type LanguagesMaxAggregateOutputType = {
    id: number | null
    subTitle: string | null
    title: string | null
    user_id: number | null
  }

  export type LanguagesCountAggregateOutputType = {
    id: number
    subTitle: number
    title: number
    user_id: number
    _all: number
  }


  export type LanguagesAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type LanguagesSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type LanguagesMinAggregateInputType = {
    id?: true
    subTitle?: true
    title?: true
    user_id?: true
  }

  export type LanguagesMaxAggregateInputType = {
    id?: true
    subTitle?: true
    title?: true
    user_id?: true
  }

  export type LanguagesCountAggregateInputType = {
    id?: true
    subTitle?: true
    title?: true
    user_id?: true
    _all?: true
  }

  export type LanguagesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Languages to aggregate.
     */
    where?: LanguagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguagesOrderByWithRelationInput | LanguagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LanguagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Languages
    **/
    _count?: true | LanguagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LanguagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LanguagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LanguagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LanguagesMaxAggregateInputType
  }

  export type GetLanguagesAggregateType<T extends LanguagesAggregateArgs> = {
        [P in keyof T & keyof AggregateLanguages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanguages[P]>
      : GetScalarType<T[P], AggregateLanguages[P]>
  }




  export type LanguagesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguagesWhereInput
    orderBy?: LanguagesOrderByWithAggregationInput | LanguagesOrderByWithAggregationInput[]
    by: LanguagesScalarFieldEnum[] | LanguagesScalarFieldEnum
    having?: LanguagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LanguagesCountAggregateInputType | true
    _avg?: LanguagesAvgAggregateInputType
    _sum?: LanguagesSumAggregateInputType
    _min?: LanguagesMinAggregateInputType
    _max?: LanguagesMaxAggregateInputType
  }

  export type LanguagesGroupByOutputType = {
    id: number
    subTitle: string
    title: string
    user_id: number
    _count: LanguagesCountAggregateOutputType | null
    _avg: LanguagesAvgAggregateOutputType | null
    _sum: LanguagesSumAggregateOutputType | null
    _min: LanguagesMinAggregateOutputType | null
    _max: LanguagesMaxAggregateOutputType | null
  }

  type GetLanguagesGroupByPayload<T extends LanguagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LanguagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LanguagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LanguagesGroupByOutputType[P]>
            : GetScalarType<T[P], LanguagesGroupByOutputType[P]>
        }
      >
    >


  export type LanguagesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subTitle?: boolean
    title?: boolean
    user_id?: boolean
    language_items?: boolean | Languages$language_itemsArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | LanguagesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languages"]>

  export type LanguagesSelectScalar = {
    id?: boolean
    subTitle?: boolean
    title?: boolean
    user_id?: boolean
  }

  export type LanguagesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    language_items?: boolean | Languages$language_itemsArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | LanguagesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $LanguagesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Languages"
    objects: {
      language_items: Prisma.$LanguagesItemPayload<ExtArgs>[]
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      subTitle: string
      title: string
      user_id: number
    }, ExtArgs["result"]["languages"]>
    composites: {}
  }


  type LanguagesGetPayload<S extends boolean | null | undefined | LanguagesDefaultArgs> = $Result.GetResult<Prisma.$LanguagesPayload, S>

  type LanguagesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LanguagesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LanguagesCountAggregateInputType | true
    }

  export interface LanguagesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Languages'], meta: { name: 'Languages' } }
    /**
     * Find zero or one Languages that matches the filter.
     * @param {LanguagesFindUniqueArgs} args - Arguments to find a Languages
     * @example
     * // Get one Languages
     * const languages = await prisma.languages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LanguagesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LanguagesFindUniqueArgs<ExtArgs>>
    ): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Languages that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LanguagesFindUniqueOrThrowArgs} args - Arguments to find a Languages
     * @example
     * // Get one Languages
     * const languages = await prisma.languages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LanguagesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguagesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Languages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesFindFirstArgs} args - Arguments to find a Languages
     * @example
     * // Get one Languages
     * const languages = await prisma.languages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LanguagesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguagesFindFirstArgs<ExtArgs>>
    ): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Languages that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesFindFirstOrThrowArgs} args - Arguments to find a Languages
     * @example
     * // Get one Languages
     * const languages = await prisma.languages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LanguagesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguagesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Languages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Languages
     * const languages = await prisma.languages.findMany()
     * 
     * // Get first 10 Languages
     * const languages = await prisma.languages.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const languagesWithIdOnly = await prisma.languages.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LanguagesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguagesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Languages.
     * @param {LanguagesCreateArgs} args - Arguments to create a Languages.
     * @example
     * // Create one Languages
     * const Languages = await prisma.languages.create({
     *   data: {
     *     // ... data to create a Languages
     *   }
     * })
     * 
    **/
    create<T extends LanguagesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LanguagesCreateArgs<ExtArgs>>
    ): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Languages.
     *     @param {LanguagesCreateManyArgs} args - Arguments to create many Languages.
     *     @example
     *     // Create many Languages
     *     const languages = await prisma.languages.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LanguagesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguagesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Languages.
     * @param {LanguagesDeleteArgs} args - Arguments to delete one Languages.
     * @example
     * // Delete one Languages
     * const Languages = await prisma.languages.delete({
     *   where: {
     *     // ... filter to delete one Languages
     *   }
     * })
     * 
    **/
    delete<T extends LanguagesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LanguagesDeleteArgs<ExtArgs>>
    ): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Languages.
     * @param {LanguagesUpdateArgs} args - Arguments to update one Languages.
     * @example
     * // Update one Languages
     * const languages = await prisma.languages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LanguagesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LanguagesUpdateArgs<ExtArgs>>
    ): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Languages.
     * @param {LanguagesDeleteManyArgs} args - Arguments to filter Languages to delete.
     * @example
     * // Delete a few Languages
     * const { count } = await prisma.languages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LanguagesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguagesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Languages
     * const languages = await prisma.languages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LanguagesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LanguagesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Languages.
     * @param {LanguagesUpsertArgs} args - Arguments to update or create a Languages.
     * @example
     * // Update or create a Languages
     * const languages = await prisma.languages.upsert({
     *   create: {
     *     // ... data to create a Languages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Languages we want to update
     *   }
     * })
    **/
    upsert<T extends LanguagesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LanguagesUpsertArgs<ExtArgs>>
    ): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesCountArgs} args - Arguments to filter Languages to count.
     * @example
     * // Count the number of Languages
     * const count = await prisma.languages.count({
     *   where: {
     *     // ... the filter for the Languages we want to count
     *   }
     * })
    **/
    count<T extends LanguagesCountArgs>(
      args?: Subset<T, LanguagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LanguagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LanguagesAggregateArgs>(args: Subset<T, LanguagesAggregateArgs>): Prisma.PrismaPromise<GetLanguagesAggregateType<T>>

    /**
     * Group by Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LanguagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LanguagesGroupByArgs['orderBy'] }
        : { orderBy?: LanguagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LanguagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanguagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Languages model
   */
  readonly fields: LanguagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Languages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LanguagesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    language_items<T extends Languages$language_itemsArgs<ExtArgs> = {}>(args?: Subset<T, Languages$language_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguagesItemPayload<ExtArgs>, T, 'findMany'> | Null>;

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Languages model
   */ 
  interface LanguagesFieldRefs {
    readonly id: FieldRef<"Languages", 'Int'>
    readonly subTitle: FieldRef<"Languages", 'String'>
    readonly title: FieldRef<"Languages", 'String'>
    readonly user_id: FieldRef<"Languages", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Languages findUnique
   */
  export type LanguagesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * Filter, which Languages to fetch.
     */
    where: LanguagesWhereUniqueInput
  }


  /**
   * Languages findUniqueOrThrow
   */
  export type LanguagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * Filter, which Languages to fetch.
     */
    where: LanguagesWhereUniqueInput
  }


  /**
   * Languages findFirst
   */
  export type LanguagesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * Filter, which Languages to fetch.
     */
    where?: LanguagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguagesOrderByWithRelationInput | LanguagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Languages.
     */
    cursor?: LanguagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Languages.
     */
    distinct?: LanguagesScalarFieldEnum | LanguagesScalarFieldEnum[]
  }


  /**
   * Languages findFirstOrThrow
   */
  export type LanguagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * Filter, which Languages to fetch.
     */
    where?: LanguagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguagesOrderByWithRelationInput | LanguagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Languages.
     */
    cursor?: LanguagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Languages.
     */
    distinct?: LanguagesScalarFieldEnum | LanguagesScalarFieldEnum[]
  }


  /**
   * Languages findMany
   */
  export type LanguagesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * Filter, which Languages to fetch.
     */
    where?: LanguagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguagesOrderByWithRelationInput | LanguagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Languages.
     */
    cursor?: LanguagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    distinct?: LanguagesScalarFieldEnum | LanguagesScalarFieldEnum[]
  }


  /**
   * Languages create
   */
  export type LanguagesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * The data needed to create a Languages.
     */
    data: XOR<LanguagesCreateInput, LanguagesUncheckedCreateInput>
  }


  /**
   * Languages createMany
   */
  export type LanguagesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Languages.
     */
    data: LanguagesCreateManyInput | LanguagesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Languages update
   */
  export type LanguagesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * The data needed to update a Languages.
     */
    data: XOR<LanguagesUpdateInput, LanguagesUncheckedUpdateInput>
    /**
     * Choose, which Languages to update.
     */
    where: LanguagesWhereUniqueInput
  }


  /**
   * Languages updateMany
   */
  export type LanguagesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Languages.
     */
    data: XOR<LanguagesUpdateManyMutationInput, LanguagesUncheckedUpdateManyInput>
    /**
     * Filter which Languages to update
     */
    where?: LanguagesWhereInput
  }


  /**
   * Languages upsert
   */
  export type LanguagesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * The filter to search for the Languages to update in case it exists.
     */
    where: LanguagesWhereUniqueInput
    /**
     * In case the Languages found by the `where` argument doesn't exist, create a new Languages with this data.
     */
    create: XOR<LanguagesCreateInput, LanguagesUncheckedCreateInput>
    /**
     * In case the Languages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LanguagesUpdateInput, LanguagesUncheckedUpdateInput>
  }


  /**
   * Languages delete
   */
  export type LanguagesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    /**
     * Filter which Languages to delete.
     */
    where: LanguagesWhereUniqueInput
  }


  /**
   * Languages deleteMany
   */
  export type LanguagesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Languages to delete
     */
    where?: LanguagesWhereInput
  }


  /**
   * Languages.language_items
   */
  export type Languages$language_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguagesItem
     */
    select?: LanguagesItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesItemInclude<ExtArgs> | null
    where?: LanguagesItemWhereInput
    orderBy?: LanguagesItemOrderByWithRelationInput | LanguagesItemOrderByWithRelationInput[]
    cursor?: LanguagesItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LanguagesItemScalarFieldEnum | LanguagesItemScalarFieldEnum[]
  }


  /**
   * Languages without action
   */
  export type LanguagesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
  }



  /**
   * Model LanguagesItem
   */

  export type AggregateLanguagesItem = {
    _count: LanguagesItemCountAggregateOutputType | null
    _avg: LanguagesItemAvgAggregateOutputType | null
    _sum: LanguagesItemSumAggregateOutputType | null
    _min: LanguagesItemMinAggregateOutputType | null
    _max: LanguagesItemMaxAggregateOutputType | null
  }

  export type LanguagesItemAvgAggregateOutputType = {
    id: number | null
    languages_id: number | null
  }

  export type LanguagesItemSumAggregateOutputType = {
    id: number | null
    languages_id: number | null
  }

  export type LanguagesItemMinAggregateOutputType = {
    id: number | null
    languages_id: number | null
    image: string | null
    language_name: string | null
  }

  export type LanguagesItemMaxAggregateOutputType = {
    id: number | null
    languages_id: number | null
    image: string | null
    language_name: string | null
  }

  export type LanguagesItemCountAggregateOutputType = {
    id: number
    languages_id: number
    image: number
    language_name: number
    _all: number
  }


  export type LanguagesItemAvgAggregateInputType = {
    id?: true
    languages_id?: true
  }

  export type LanguagesItemSumAggregateInputType = {
    id?: true
    languages_id?: true
  }

  export type LanguagesItemMinAggregateInputType = {
    id?: true
    languages_id?: true
    image?: true
    language_name?: true
  }

  export type LanguagesItemMaxAggregateInputType = {
    id?: true
    languages_id?: true
    image?: true
    language_name?: true
  }

  export type LanguagesItemCountAggregateInputType = {
    id?: true
    languages_id?: true
    image?: true
    language_name?: true
    _all?: true
  }

  export type LanguagesItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LanguagesItem to aggregate.
     */
    where?: LanguagesItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguagesItems to fetch.
     */
    orderBy?: LanguagesItemOrderByWithRelationInput | LanguagesItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LanguagesItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguagesItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguagesItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LanguagesItems
    **/
    _count?: true | LanguagesItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LanguagesItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LanguagesItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LanguagesItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LanguagesItemMaxAggregateInputType
  }

  export type GetLanguagesItemAggregateType<T extends LanguagesItemAggregateArgs> = {
        [P in keyof T & keyof AggregateLanguagesItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanguagesItem[P]>
      : GetScalarType<T[P], AggregateLanguagesItem[P]>
  }




  export type LanguagesItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguagesItemWhereInput
    orderBy?: LanguagesItemOrderByWithAggregationInput | LanguagesItemOrderByWithAggregationInput[]
    by: LanguagesItemScalarFieldEnum[] | LanguagesItemScalarFieldEnum
    having?: LanguagesItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LanguagesItemCountAggregateInputType | true
    _avg?: LanguagesItemAvgAggregateInputType
    _sum?: LanguagesItemSumAggregateInputType
    _min?: LanguagesItemMinAggregateInputType
    _max?: LanguagesItemMaxAggregateInputType
  }

  export type LanguagesItemGroupByOutputType = {
    id: number
    languages_id: number | null
    image: string
    language_name: string
    _count: LanguagesItemCountAggregateOutputType | null
    _avg: LanguagesItemAvgAggregateOutputType | null
    _sum: LanguagesItemSumAggregateOutputType | null
    _min: LanguagesItemMinAggregateOutputType | null
    _max: LanguagesItemMaxAggregateOutputType | null
  }

  type GetLanguagesItemGroupByPayload<T extends LanguagesItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LanguagesItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LanguagesItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LanguagesItemGroupByOutputType[P]>
            : GetScalarType<T[P], LanguagesItemGroupByOutputType[P]>
        }
      >
    >


  export type LanguagesItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    languages_id?: boolean
    image?: boolean
    language_name?: boolean
    Languages?: boolean | LanguagesItem$LanguagesArgs<ExtArgs>
  }, ExtArgs["result"]["languagesItem"]>

  export type LanguagesItemSelectScalar = {
    id?: boolean
    languages_id?: boolean
    image?: boolean
    language_name?: boolean
  }

  export type LanguagesItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Languages?: boolean | LanguagesItem$LanguagesArgs<ExtArgs>
  }


  export type $LanguagesItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LanguagesItem"
    objects: {
      Languages: Prisma.$LanguagesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      languages_id: number | null
      image: string
      language_name: string
    }, ExtArgs["result"]["languagesItem"]>
    composites: {}
  }


  type LanguagesItemGetPayload<S extends boolean | null | undefined | LanguagesItemDefaultArgs> = $Result.GetResult<Prisma.$LanguagesItemPayload, S>

  type LanguagesItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LanguagesItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LanguagesItemCountAggregateInputType | true
    }

  export interface LanguagesItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LanguagesItem'], meta: { name: 'LanguagesItem' } }
    /**
     * Find zero or one LanguagesItem that matches the filter.
     * @param {LanguagesItemFindUniqueArgs} args - Arguments to find a LanguagesItem
     * @example
     * // Get one LanguagesItem
     * const languagesItem = await prisma.languagesItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LanguagesItemFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LanguagesItemFindUniqueArgs<ExtArgs>>
    ): Prisma__LanguagesItemClient<$Result.GetResult<Prisma.$LanguagesItemPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one LanguagesItem that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LanguagesItemFindUniqueOrThrowArgs} args - Arguments to find a LanguagesItem
     * @example
     * // Get one LanguagesItem
     * const languagesItem = await prisma.languagesItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LanguagesItemFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguagesItemFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LanguagesItemClient<$Result.GetResult<Prisma.$LanguagesItemPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first LanguagesItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesItemFindFirstArgs} args - Arguments to find a LanguagesItem
     * @example
     * // Get one LanguagesItem
     * const languagesItem = await prisma.languagesItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LanguagesItemFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguagesItemFindFirstArgs<ExtArgs>>
    ): Prisma__LanguagesItemClient<$Result.GetResult<Prisma.$LanguagesItemPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first LanguagesItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesItemFindFirstOrThrowArgs} args - Arguments to find a LanguagesItem
     * @example
     * // Get one LanguagesItem
     * const languagesItem = await prisma.languagesItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LanguagesItemFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguagesItemFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LanguagesItemClient<$Result.GetResult<Prisma.$LanguagesItemPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more LanguagesItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LanguagesItems
     * const languagesItems = await prisma.languagesItem.findMany()
     * 
     * // Get first 10 LanguagesItems
     * const languagesItems = await prisma.languagesItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const languagesItemWithIdOnly = await prisma.languagesItem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LanguagesItemFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguagesItemFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguagesItemPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a LanguagesItem.
     * @param {LanguagesItemCreateArgs} args - Arguments to create a LanguagesItem.
     * @example
     * // Create one LanguagesItem
     * const LanguagesItem = await prisma.languagesItem.create({
     *   data: {
     *     // ... data to create a LanguagesItem
     *   }
     * })
     * 
    **/
    create<T extends LanguagesItemCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LanguagesItemCreateArgs<ExtArgs>>
    ): Prisma__LanguagesItemClient<$Result.GetResult<Prisma.$LanguagesItemPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many LanguagesItems.
     *     @param {LanguagesItemCreateManyArgs} args - Arguments to create many LanguagesItems.
     *     @example
     *     // Create many LanguagesItems
     *     const languagesItem = await prisma.languagesItem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LanguagesItemCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguagesItemCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LanguagesItem.
     * @param {LanguagesItemDeleteArgs} args - Arguments to delete one LanguagesItem.
     * @example
     * // Delete one LanguagesItem
     * const LanguagesItem = await prisma.languagesItem.delete({
     *   where: {
     *     // ... filter to delete one LanguagesItem
     *   }
     * })
     * 
    **/
    delete<T extends LanguagesItemDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LanguagesItemDeleteArgs<ExtArgs>>
    ): Prisma__LanguagesItemClient<$Result.GetResult<Prisma.$LanguagesItemPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one LanguagesItem.
     * @param {LanguagesItemUpdateArgs} args - Arguments to update one LanguagesItem.
     * @example
     * // Update one LanguagesItem
     * const languagesItem = await prisma.languagesItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LanguagesItemUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LanguagesItemUpdateArgs<ExtArgs>>
    ): Prisma__LanguagesItemClient<$Result.GetResult<Prisma.$LanguagesItemPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more LanguagesItems.
     * @param {LanguagesItemDeleteManyArgs} args - Arguments to filter LanguagesItems to delete.
     * @example
     * // Delete a few LanguagesItems
     * const { count } = await prisma.languagesItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LanguagesItemDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguagesItemDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LanguagesItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LanguagesItems
     * const languagesItem = await prisma.languagesItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LanguagesItemUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LanguagesItemUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LanguagesItem.
     * @param {LanguagesItemUpsertArgs} args - Arguments to update or create a LanguagesItem.
     * @example
     * // Update or create a LanguagesItem
     * const languagesItem = await prisma.languagesItem.upsert({
     *   create: {
     *     // ... data to create a LanguagesItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LanguagesItem we want to update
     *   }
     * })
    **/
    upsert<T extends LanguagesItemUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LanguagesItemUpsertArgs<ExtArgs>>
    ): Prisma__LanguagesItemClient<$Result.GetResult<Prisma.$LanguagesItemPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of LanguagesItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesItemCountArgs} args - Arguments to filter LanguagesItems to count.
     * @example
     * // Count the number of LanguagesItems
     * const count = await prisma.languagesItem.count({
     *   where: {
     *     // ... the filter for the LanguagesItems we want to count
     *   }
     * })
    **/
    count<T extends LanguagesItemCountArgs>(
      args?: Subset<T, LanguagesItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LanguagesItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LanguagesItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LanguagesItemAggregateArgs>(args: Subset<T, LanguagesItemAggregateArgs>): Prisma.PrismaPromise<GetLanguagesItemAggregateType<T>>

    /**
     * Group by LanguagesItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguagesItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LanguagesItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LanguagesItemGroupByArgs['orderBy'] }
        : { orderBy?: LanguagesItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LanguagesItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanguagesItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LanguagesItem model
   */
  readonly fields: LanguagesItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LanguagesItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LanguagesItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Languages<T extends LanguagesItem$LanguagesArgs<ExtArgs> = {}>(args?: Subset<T, LanguagesItem$LanguagesArgs<ExtArgs>>): Prisma__LanguagesClient<$Result.GetResult<Prisma.$LanguagesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the LanguagesItem model
   */ 
  interface LanguagesItemFieldRefs {
    readonly id: FieldRef<"LanguagesItem", 'Int'>
    readonly languages_id: FieldRef<"LanguagesItem", 'Int'>
    readonly image: FieldRef<"LanguagesItem", 'String'>
    readonly language_name: FieldRef<"LanguagesItem", 'String'>
  }
    

  // Custom InputTypes

  /**
   * LanguagesItem findUnique
   */
  export type LanguagesItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguagesItem
     */
    select?: LanguagesItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesItemInclude<ExtArgs> | null
    /**
     * Filter, which LanguagesItem to fetch.
     */
    where: LanguagesItemWhereUniqueInput
  }


  /**
   * LanguagesItem findUniqueOrThrow
   */
  export type LanguagesItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguagesItem
     */
    select?: LanguagesItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesItemInclude<ExtArgs> | null
    /**
     * Filter, which LanguagesItem to fetch.
     */
    where: LanguagesItemWhereUniqueInput
  }


  /**
   * LanguagesItem findFirst
   */
  export type LanguagesItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguagesItem
     */
    select?: LanguagesItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesItemInclude<ExtArgs> | null
    /**
     * Filter, which LanguagesItem to fetch.
     */
    where?: LanguagesItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguagesItems to fetch.
     */
    orderBy?: LanguagesItemOrderByWithRelationInput | LanguagesItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LanguagesItems.
     */
    cursor?: LanguagesItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguagesItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguagesItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LanguagesItems.
     */
    distinct?: LanguagesItemScalarFieldEnum | LanguagesItemScalarFieldEnum[]
  }


  /**
   * LanguagesItem findFirstOrThrow
   */
  export type LanguagesItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguagesItem
     */
    select?: LanguagesItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesItemInclude<ExtArgs> | null
    /**
     * Filter, which LanguagesItem to fetch.
     */
    where?: LanguagesItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguagesItems to fetch.
     */
    orderBy?: LanguagesItemOrderByWithRelationInput | LanguagesItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LanguagesItems.
     */
    cursor?: LanguagesItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguagesItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguagesItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LanguagesItems.
     */
    distinct?: LanguagesItemScalarFieldEnum | LanguagesItemScalarFieldEnum[]
  }


  /**
   * LanguagesItem findMany
   */
  export type LanguagesItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguagesItem
     */
    select?: LanguagesItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesItemInclude<ExtArgs> | null
    /**
     * Filter, which LanguagesItems to fetch.
     */
    where?: LanguagesItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguagesItems to fetch.
     */
    orderBy?: LanguagesItemOrderByWithRelationInput | LanguagesItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LanguagesItems.
     */
    cursor?: LanguagesItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguagesItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguagesItems.
     */
    skip?: number
    distinct?: LanguagesItemScalarFieldEnum | LanguagesItemScalarFieldEnum[]
  }


  /**
   * LanguagesItem create
   */
  export type LanguagesItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguagesItem
     */
    select?: LanguagesItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesItemInclude<ExtArgs> | null
    /**
     * The data needed to create a LanguagesItem.
     */
    data: XOR<LanguagesItemCreateInput, LanguagesItemUncheckedCreateInput>
  }


  /**
   * LanguagesItem createMany
   */
  export type LanguagesItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LanguagesItems.
     */
    data: LanguagesItemCreateManyInput | LanguagesItemCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * LanguagesItem update
   */
  export type LanguagesItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguagesItem
     */
    select?: LanguagesItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesItemInclude<ExtArgs> | null
    /**
     * The data needed to update a LanguagesItem.
     */
    data: XOR<LanguagesItemUpdateInput, LanguagesItemUncheckedUpdateInput>
    /**
     * Choose, which LanguagesItem to update.
     */
    where: LanguagesItemWhereUniqueInput
  }


  /**
   * LanguagesItem updateMany
   */
  export type LanguagesItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LanguagesItems.
     */
    data: XOR<LanguagesItemUpdateManyMutationInput, LanguagesItemUncheckedUpdateManyInput>
    /**
     * Filter which LanguagesItems to update
     */
    where?: LanguagesItemWhereInput
  }


  /**
   * LanguagesItem upsert
   */
  export type LanguagesItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguagesItem
     */
    select?: LanguagesItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesItemInclude<ExtArgs> | null
    /**
     * The filter to search for the LanguagesItem to update in case it exists.
     */
    where: LanguagesItemWhereUniqueInput
    /**
     * In case the LanguagesItem found by the `where` argument doesn't exist, create a new LanguagesItem with this data.
     */
    create: XOR<LanguagesItemCreateInput, LanguagesItemUncheckedCreateInput>
    /**
     * In case the LanguagesItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LanguagesItemUpdateInput, LanguagesItemUncheckedUpdateInput>
  }


  /**
   * LanguagesItem delete
   */
  export type LanguagesItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguagesItem
     */
    select?: LanguagesItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesItemInclude<ExtArgs> | null
    /**
     * Filter which LanguagesItem to delete.
     */
    where: LanguagesItemWhereUniqueInput
  }


  /**
   * LanguagesItem deleteMany
   */
  export type LanguagesItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LanguagesItems to delete
     */
    where?: LanguagesItemWhereInput
  }


  /**
   * LanguagesItem.Languages
   */
  export type LanguagesItem$LanguagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Languages
     */
    select?: LanguagesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesInclude<ExtArgs> | null
    where?: LanguagesWhereInput
  }


  /**
   * LanguagesItem without action
   */
  export type LanguagesItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguagesItem
     */
    select?: LanguagesItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguagesItemInclude<ExtArgs> | null
  }



  /**
   * Model whyMe
   */

  export type AggregateWhyMe = {
    _count: WhyMeCountAggregateOutputType | null
    _avg: WhyMeAvgAggregateOutputType | null
    _sum: WhyMeSumAggregateOutputType | null
    _min: WhyMeMinAggregateOutputType | null
    _max: WhyMeMaxAggregateOutputType | null
  }

  export type WhyMeAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type WhyMeSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type WhyMeMinAggregateOutputType = {
    id: number | null
    subTitle: string | null
    title: string | null
    user_id: number | null
  }

  export type WhyMeMaxAggregateOutputType = {
    id: number | null
    subTitle: string | null
    title: string | null
    user_id: number | null
  }

  export type WhyMeCountAggregateOutputType = {
    id: number
    subTitle: number
    title: number
    user_id: number
    _all: number
  }


  export type WhyMeAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type WhyMeSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type WhyMeMinAggregateInputType = {
    id?: true
    subTitle?: true
    title?: true
    user_id?: true
  }

  export type WhyMeMaxAggregateInputType = {
    id?: true
    subTitle?: true
    title?: true
    user_id?: true
  }

  export type WhyMeCountAggregateInputType = {
    id?: true
    subTitle?: true
    title?: true
    user_id?: true
    _all?: true
  }

  export type WhyMeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which whyMe to aggregate.
     */
    where?: whyMeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of whyMes to fetch.
     */
    orderBy?: whyMeOrderByWithRelationInput | whyMeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: whyMeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` whyMes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` whyMes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned whyMes
    **/
    _count?: true | WhyMeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WhyMeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WhyMeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WhyMeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WhyMeMaxAggregateInputType
  }

  export type GetWhyMeAggregateType<T extends WhyMeAggregateArgs> = {
        [P in keyof T & keyof AggregateWhyMe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWhyMe[P]>
      : GetScalarType<T[P], AggregateWhyMe[P]>
  }




  export type whyMeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: whyMeWhereInput
    orderBy?: whyMeOrderByWithAggregationInput | whyMeOrderByWithAggregationInput[]
    by: WhyMeScalarFieldEnum[] | WhyMeScalarFieldEnum
    having?: whyMeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WhyMeCountAggregateInputType | true
    _avg?: WhyMeAvgAggregateInputType
    _sum?: WhyMeSumAggregateInputType
    _min?: WhyMeMinAggregateInputType
    _max?: WhyMeMaxAggregateInputType
  }

  export type WhyMeGroupByOutputType = {
    id: number
    subTitle: string
    title: string
    user_id: number
    _count: WhyMeCountAggregateOutputType | null
    _avg: WhyMeAvgAggregateOutputType | null
    _sum: WhyMeSumAggregateOutputType | null
    _min: WhyMeMinAggregateOutputType | null
    _max: WhyMeMaxAggregateOutputType | null
  }

  type GetWhyMeGroupByPayload<T extends whyMeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WhyMeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WhyMeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WhyMeGroupByOutputType[P]>
            : GetScalarType<T[P], WhyMeGroupByOutputType[P]>
        }
      >
    >


  export type whyMeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subTitle?: boolean
    title?: boolean
    user_id?: boolean
    why_me_items?: boolean | whyMe$why_me_itemsArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | WhyMeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["whyMe"]>

  export type whyMeSelectScalar = {
    id?: boolean
    subTitle?: boolean
    title?: boolean
    user_id?: boolean
  }

  export type whyMeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    why_me_items?: boolean | whyMe$why_me_itemsArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | WhyMeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $whyMePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "whyMe"
    objects: {
      why_me_items: Prisma.$whyMeItemsPayload<ExtArgs>[]
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      subTitle: string
      title: string
      user_id: number
    }, ExtArgs["result"]["whyMe"]>
    composites: {}
  }


  type whyMeGetPayload<S extends boolean | null | undefined | whyMeDefaultArgs> = $Result.GetResult<Prisma.$whyMePayload, S>

  type whyMeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<whyMeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WhyMeCountAggregateInputType | true
    }

  export interface whyMeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['whyMe'], meta: { name: 'whyMe' } }
    /**
     * Find zero or one WhyMe that matches the filter.
     * @param {whyMeFindUniqueArgs} args - Arguments to find a WhyMe
     * @example
     * // Get one WhyMe
     * const whyMe = await prisma.whyMe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends whyMeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, whyMeFindUniqueArgs<ExtArgs>>
    ): Prisma__whyMeClient<$Result.GetResult<Prisma.$whyMePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one WhyMe that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {whyMeFindUniqueOrThrowArgs} args - Arguments to find a WhyMe
     * @example
     * // Get one WhyMe
     * const whyMe = await prisma.whyMe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends whyMeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, whyMeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__whyMeClient<$Result.GetResult<Prisma.$whyMePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first WhyMe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {whyMeFindFirstArgs} args - Arguments to find a WhyMe
     * @example
     * // Get one WhyMe
     * const whyMe = await prisma.whyMe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends whyMeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, whyMeFindFirstArgs<ExtArgs>>
    ): Prisma__whyMeClient<$Result.GetResult<Prisma.$whyMePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first WhyMe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {whyMeFindFirstOrThrowArgs} args - Arguments to find a WhyMe
     * @example
     * // Get one WhyMe
     * const whyMe = await prisma.whyMe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends whyMeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, whyMeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__whyMeClient<$Result.GetResult<Prisma.$whyMePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more WhyMes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {whyMeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WhyMes
     * const whyMes = await prisma.whyMe.findMany()
     * 
     * // Get first 10 WhyMes
     * const whyMes = await prisma.whyMe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const whyMeWithIdOnly = await prisma.whyMe.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends whyMeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, whyMeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$whyMePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a WhyMe.
     * @param {whyMeCreateArgs} args - Arguments to create a WhyMe.
     * @example
     * // Create one WhyMe
     * const WhyMe = await prisma.whyMe.create({
     *   data: {
     *     // ... data to create a WhyMe
     *   }
     * })
     * 
    **/
    create<T extends whyMeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, whyMeCreateArgs<ExtArgs>>
    ): Prisma__whyMeClient<$Result.GetResult<Prisma.$whyMePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many WhyMes.
     *     @param {whyMeCreateManyArgs} args - Arguments to create many WhyMes.
     *     @example
     *     // Create many WhyMes
     *     const whyMe = await prisma.whyMe.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends whyMeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, whyMeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WhyMe.
     * @param {whyMeDeleteArgs} args - Arguments to delete one WhyMe.
     * @example
     * // Delete one WhyMe
     * const WhyMe = await prisma.whyMe.delete({
     *   where: {
     *     // ... filter to delete one WhyMe
     *   }
     * })
     * 
    **/
    delete<T extends whyMeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, whyMeDeleteArgs<ExtArgs>>
    ): Prisma__whyMeClient<$Result.GetResult<Prisma.$whyMePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one WhyMe.
     * @param {whyMeUpdateArgs} args - Arguments to update one WhyMe.
     * @example
     * // Update one WhyMe
     * const whyMe = await prisma.whyMe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends whyMeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, whyMeUpdateArgs<ExtArgs>>
    ): Prisma__whyMeClient<$Result.GetResult<Prisma.$whyMePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more WhyMes.
     * @param {whyMeDeleteManyArgs} args - Arguments to filter WhyMes to delete.
     * @example
     * // Delete a few WhyMes
     * const { count } = await prisma.whyMe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends whyMeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, whyMeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WhyMes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {whyMeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WhyMes
     * const whyMe = await prisma.whyMe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends whyMeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, whyMeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WhyMe.
     * @param {whyMeUpsertArgs} args - Arguments to update or create a WhyMe.
     * @example
     * // Update or create a WhyMe
     * const whyMe = await prisma.whyMe.upsert({
     *   create: {
     *     // ... data to create a WhyMe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WhyMe we want to update
     *   }
     * })
    **/
    upsert<T extends whyMeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, whyMeUpsertArgs<ExtArgs>>
    ): Prisma__whyMeClient<$Result.GetResult<Prisma.$whyMePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of WhyMes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {whyMeCountArgs} args - Arguments to filter WhyMes to count.
     * @example
     * // Count the number of WhyMes
     * const count = await prisma.whyMe.count({
     *   where: {
     *     // ... the filter for the WhyMes we want to count
     *   }
     * })
    **/
    count<T extends whyMeCountArgs>(
      args?: Subset<T, whyMeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WhyMeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WhyMe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WhyMeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WhyMeAggregateArgs>(args: Subset<T, WhyMeAggregateArgs>): Prisma.PrismaPromise<GetWhyMeAggregateType<T>>

    /**
     * Group by WhyMe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {whyMeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends whyMeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: whyMeGroupByArgs['orderBy'] }
        : { orderBy?: whyMeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, whyMeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWhyMeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the whyMe model
   */
  readonly fields: whyMeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for whyMe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__whyMeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    why_me_items<T extends whyMe$why_me_itemsArgs<ExtArgs> = {}>(args?: Subset<T, whyMe$why_me_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$whyMeItemsPayload<ExtArgs>, T, 'findMany'> | Null>;

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the whyMe model
   */ 
  interface whyMeFieldRefs {
    readonly id: FieldRef<"whyMe", 'Int'>
    readonly subTitle: FieldRef<"whyMe", 'String'>
    readonly title: FieldRef<"whyMe", 'String'>
    readonly user_id: FieldRef<"whyMe", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * whyMe findUnique
   */
  export type whyMeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMe
     */
    select?: whyMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeInclude<ExtArgs> | null
    /**
     * Filter, which whyMe to fetch.
     */
    where: whyMeWhereUniqueInput
  }


  /**
   * whyMe findUniqueOrThrow
   */
  export type whyMeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMe
     */
    select?: whyMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeInclude<ExtArgs> | null
    /**
     * Filter, which whyMe to fetch.
     */
    where: whyMeWhereUniqueInput
  }


  /**
   * whyMe findFirst
   */
  export type whyMeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMe
     */
    select?: whyMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeInclude<ExtArgs> | null
    /**
     * Filter, which whyMe to fetch.
     */
    where?: whyMeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of whyMes to fetch.
     */
    orderBy?: whyMeOrderByWithRelationInput | whyMeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for whyMes.
     */
    cursor?: whyMeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` whyMes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` whyMes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of whyMes.
     */
    distinct?: WhyMeScalarFieldEnum | WhyMeScalarFieldEnum[]
  }


  /**
   * whyMe findFirstOrThrow
   */
  export type whyMeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMe
     */
    select?: whyMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeInclude<ExtArgs> | null
    /**
     * Filter, which whyMe to fetch.
     */
    where?: whyMeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of whyMes to fetch.
     */
    orderBy?: whyMeOrderByWithRelationInput | whyMeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for whyMes.
     */
    cursor?: whyMeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` whyMes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` whyMes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of whyMes.
     */
    distinct?: WhyMeScalarFieldEnum | WhyMeScalarFieldEnum[]
  }


  /**
   * whyMe findMany
   */
  export type whyMeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMe
     */
    select?: whyMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeInclude<ExtArgs> | null
    /**
     * Filter, which whyMes to fetch.
     */
    where?: whyMeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of whyMes to fetch.
     */
    orderBy?: whyMeOrderByWithRelationInput | whyMeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing whyMes.
     */
    cursor?: whyMeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` whyMes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` whyMes.
     */
    skip?: number
    distinct?: WhyMeScalarFieldEnum | WhyMeScalarFieldEnum[]
  }


  /**
   * whyMe create
   */
  export type whyMeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMe
     */
    select?: whyMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeInclude<ExtArgs> | null
    /**
     * The data needed to create a whyMe.
     */
    data: XOR<whyMeCreateInput, whyMeUncheckedCreateInput>
  }


  /**
   * whyMe createMany
   */
  export type whyMeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many whyMes.
     */
    data: whyMeCreateManyInput | whyMeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * whyMe update
   */
  export type whyMeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMe
     */
    select?: whyMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeInclude<ExtArgs> | null
    /**
     * The data needed to update a whyMe.
     */
    data: XOR<whyMeUpdateInput, whyMeUncheckedUpdateInput>
    /**
     * Choose, which whyMe to update.
     */
    where: whyMeWhereUniqueInput
  }


  /**
   * whyMe updateMany
   */
  export type whyMeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update whyMes.
     */
    data: XOR<whyMeUpdateManyMutationInput, whyMeUncheckedUpdateManyInput>
    /**
     * Filter which whyMes to update
     */
    where?: whyMeWhereInput
  }


  /**
   * whyMe upsert
   */
  export type whyMeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMe
     */
    select?: whyMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeInclude<ExtArgs> | null
    /**
     * The filter to search for the whyMe to update in case it exists.
     */
    where: whyMeWhereUniqueInput
    /**
     * In case the whyMe found by the `where` argument doesn't exist, create a new whyMe with this data.
     */
    create: XOR<whyMeCreateInput, whyMeUncheckedCreateInput>
    /**
     * In case the whyMe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<whyMeUpdateInput, whyMeUncheckedUpdateInput>
  }


  /**
   * whyMe delete
   */
  export type whyMeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMe
     */
    select?: whyMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeInclude<ExtArgs> | null
    /**
     * Filter which whyMe to delete.
     */
    where: whyMeWhereUniqueInput
  }


  /**
   * whyMe deleteMany
   */
  export type whyMeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which whyMes to delete
     */
    where?: whyMeWhereInput
  }


  /**
   * whyMe.why_me_items
   */
  export type whyMe$why_me_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMeItems
     */
    select?: whyMeItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeItemsInclude<ExtArgs> | null
    where?: whyMeItemsWhereInput
    orderBy?: whyMeItemsOrderByWithRelationInput | whyMeItemsOrderByWithRelationInput[]
    cursor?: whyMeItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WhyMeItemsScalarFieldEnum | WhyMeItemsScalarFieldEnum[]
  }


  /**
   * whyMe without action
   */
  export type whyMeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMe
     */
    select?: whyMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeInclude<ExtArgs> | null
  }



  /**
   * Model whyMeItems
   */

  export type AggregateWhyMeItems = {
    _count: WhyMeItemsCountAggregateOutputType | null
    _avg: WhyMeItemsAvgAggregateOutputType | null
    _sum: WhyMeItemsSumAggregateOutputType | null
    _min: WhyMeItemsMinAggregateOutputType | null
    _max: WhyMeItemsMaxAggregateOutputType | null
  }

  export type WhyMeItemsAvgAggregateOutputType = {
    id: number | null
    why_me_id: number | null
  }

  export type WhyMeItemsSumAggregateOutputType = {
    id: number | null
    why_me_id: number | null
  }

  export type WhyMeItemsMinAggregateOutputType = {
    id: number | null
    why_me_id: number | null
    image: string | null
    title: string | null
    description: string | null
  }

  export type WhyMeItemsMaxAggregateOutputType = {
    id: number | null
    why_me_id: number | null
    image: string | null
    title: string | null
    description: string | null
  }

  export type WhyMeItemsCountAggregateOutputType = {
    id: number
    why_me_id: number
    image: number
    title: number
    description: number
    _all: number
  }


  export type WhyMeItemsAvgAggregateInputType = {
    id?: true
    why_me_id?: true
  }

  export type WhyMeItemsSumAggregateInputType = {
    id?: true
    why_me_id?: true
  }

  export type WhyMeItemsMinAggregateInputType = {
    id?: true
    why_me_id?: true
    image?: true
    title?: true
    description?: true
  }

  export type WhyMeItemsMaxAggregateInputType = {
    id?: true
    why_me_id?: true
    image?: true
    title?: true
    description?: true
  }

  export type WhyMeItemsCountAggregateInputType = {
    id?: true
    why_me_id?: true
    image?: true
    title?: true
    description?: true
    _all?: true
  }

  export type WhyMeItemsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which whyMeItems to aggregate.
     */
    where?: whyMeItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of whyMeItems to fetch.
     */
    orderBy?: whyMeItemsOrderByWithRelationInput | whyMeItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: whyMeItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` whyMeItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` whyMeItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned whyMeItems
    **/
    _count?: true | WhyMeItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WhyMeItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WhyMeItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WhyMeItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WhyMeItemsMaxAggregateInputType
  }

  export type GetWhyMeItemsAggregateType<T extends WhyMeItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateWhyMeItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWhyMeItems[P]>
      : GetScalarType<T[P], AggregateWhyMeItems[P]>
  }




  export type whyMeItemsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: whyMeItemsWhereInput
    orderBy?: whyMeItemsOrderByWithAggregationInput | whyMeItemsOrderByWithAggregationInput[]
    by: WhyMeItemsScalarFieldEnum[] | WhyMeItemsScalarFieldEnum
    having?: whyMeItemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WhyMeItemsCountAggregateInputType | true
    _avg?: WhyMeItemsAvgAggregateInputType
    _sum?: WhyMeItemsSumAggregateInputType
    _min?: WhyMeItemsMinAggregateInputType
    _max?: WhyMeItemsMaxAggregateInputType
  }

  export type WhyMeItemsGroupByOutputType = {
    id: number
    why_me_id: number | null
    image: string
    title: string
    description: string
    _count: WhyMeItemsCountAggregateOutputType | null
    _avg: WhyMeItemsAvgAggregateOutputType | null
    _sum: WhyMeItemsSumAggregateOutputType | null
    _min: WhyMeItemsMinAggregateOutputType | null
    _max: WhyMeItemsMaxAggregateOutputType | null
  }

  type GetWhyMeItemsGroupByPayload<T extends whyMeItemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WhyMeItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WhyMeItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WhyMeItemsGroupByOutputType[P]>
            : GetScalarType<T[P], WhyMeItemsGroupByOutputType[P]>
        }
      >
    >


  export type whyMeItemsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    why_me_id?: boolean
    image?: boolean
    title?: boolean
    description?: boolean
    whyMe?: boolean | whyMeItems$whyMeArgs<ExtArgs>
  }, ExtArgs["result"]["whyMeItems"]>

  export type whyMeItemsSelectScalar = {
    id?: boolean
    why_me_id?: boolean
    image?: boolean
    title?: boolean
    description?: boolean
  }

  export type whyMeItemsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    whyMe?: boolean | whyMeItems$whyMeArgs<ExtArgs>
  }


  export type $whyMeItemsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "whyMeItems"
    objects: {
      whyMe: Prisma.$whyMePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      why_me_id: number | null
      image: string
      title: string
      description: string
    }, ExtArgs["result"]["whyMeItems"]>
    composites: {}
  }


  type whyMeItemsGetPayload<S extends boolean | null | undefined | whyMeItemsDefaultArgs> = $Result.GetResult<Prisma.$whyMeItemsPayload, S>

  type whyMeItemsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<whyMeItemsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WhyMeItemsCountAggregateInputType | true
    }

  export interface whyMeItemsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['whyMeItems'], meta: { name: 'whyMeItems' } }
    /**
     * Find zero or one WhyMeItems that matches the filter.
     * @param {whyMeItemsFindUniqueArgs} args - Arguments to find a WhyMeItems
     * @example
     * // Get one WhyMeItems
     * const whyMeItems = await prisma.whyMeItems.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends whyMeItemsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, whyMeItemsFindUniqueArgs<ExtArgs>>
    ): Prisma__whyMeItemsClient<$Result.GetResult<Prisma.$whyMeItemsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one WhyMeItems that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {whyMeItemsFindUniqueOrThrowArgs} args - Arguments to find a WhyMeItems
     * @example
     * // Get one WhyMeItems
     * const whyMeItems = await prisma.whyMeItems.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends whyMeItemsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, whyMeItemsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__whyMeItemsClient<$Result.GetResult<Prisma.$whyMeItemsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first WhyMeItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {whyMeItemsFindFirstArgs} args - Arguments to find a WhyMeItems
     * @example
     * // Get one WhyMeItems
     * const whyMeItems = await prisma.whyMeItems.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends whyMeItemsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, whyMeItemsFindFirstArgs<ExtArgs>>
    ): Prisma__whyMeItemsClient<$Result.GetResult<Prisma.$whyMeItemsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first WhyMeItems that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {whyMeItemsFindFirstOrThrowArgs} args - Arguments to find a WhyMeItems
     * @example
     * // Get one WhyMeItems
     * const whyMeItems = await prisma.whyMeItems.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends whyMeItemsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, whyMeItemsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__whyMeItemsClient<$Result.GetResult<Prisma.$whyMeItemsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more WhyMeItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {whyMeItemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WhyMeItems
     * const whyMeItems = await prisma.whyMeItems.findMany()
     * 
     * // Get first 10 WhyMeItems
     * const whyMeItems = await prisma.whyMeItems.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const whyMeItemsWithIdOnly = await prisma.whyMeItems.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends whyMeItemsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, whyMeItemsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$whyMeItemsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a WhyMeItems.
     * @param {whyMeItemsCreateArgs} args - Arguments to create a WhyMeItems.
     * @example
     * // Create one WhyMeItems
     * const WhyMeItems = await prisma.whyMeItems.create({
     *   data: {
     *     // ... data to create a WhyMeItems
     *   }
     * })
     * 
    **/
    create<T extends whyMeItemsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, whyMeItemsCreateArgs<ExtArgs>>
    ): Prisma__whyMeItemsClient<$Result.GetResult<Prisma.$whyMeItemsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many WhyMeItems.
     *     @param {whyMeItemsCreateManyArgs} args - Arguments to create many WhyMeItems.
     *     @example
     *     // Create many WhyMeItems
     *     const whyMeItems = await prisma.whyMeItems.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends whyMeItemsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, whyMeItemsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WhyMeItems.
     * @param {whyMeItemsDeleteArgs} args - Arguments to delete one WhyMeItems.
     * @example
     * // Delete one WhyMeItems
     * const WhyMeItems = await prisma.whyMeItems.delete({
     *   where: {
     *     // ... filter to delete one WhyMeItems
     *   }
     * })
     * 
    **/
    delete<T extends whyMeItemsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, whyMeItemsDeleteArgs<ExtArgs>>
    ): Prisma__whyMeItemsClient<$Result.GetResult<Prisma.$whyMeItemsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one WhyMeItems.
     * @param {whyMeItemsUpdateArgs} args - Arguments to update one WhyMeItems.
     * @example
     * // Update one WhyMeItems
     * const whyMeItems = await prisma.whyMeItems.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends whyMeItemsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, whyMeItemsUpdateArgs<ExtArgs>>
    ): Prisma__whyMeItemsClient<$Result.GetResult<Prisma.$whyMeItemsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more WhyMeItems.
     * @param {whyMeItemsDeleteManyArgs} args - Arguments to filter WhyMeItems to delete.
     * @example
     * // Delete a few WhyMeItems
     * const { count } = await prisma.whyMeItems.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends whyMeItemsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, whyMeItemsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WhyMeItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {whyMeItemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WhyMeItems
     * const whyMeItems = await prisma.whyMeItems.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends whyMeItemsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, whyMeItemsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WhyMeItems.
     * @param {whyMeItemsUpsertArgs} args - Arguments to update or create a WhyMeItems.
     * @example
     * // Update or create a WhyMeItems
     * const whyMeItems = await prisma.whyMeItems.upsert({
     *   create: {
     *     // ... data to create a WhyMeItems
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WhyMeItems we want to update
     *   }
     * })
    **/
    upsert<T extends whyMeItemsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, whyMeItemsUpsertArgs<ExtArgs>>
    ): Prisma__whyMeItemsClient<$Result.GetResult<Prisma.$whyMeItemsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of WhyMeItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {whyMeItemsCountArgs} args - Arguments to filter WhyMeItems to count.
     * @example
     * // Count the number of WhyMeItems
     * const count = await prisma.whyMeItems.count({
     *   where: {
     *     // ... the filter for the WhyMeItems we want to count
     *   }
     * })
    **/
    count<T extends whyMeItemsCountArgs>(
      args?: Subset<T, whyMeItemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WhyMeItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WhyMeItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WhyMeItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WhyMeItemsAggregateArgs>(args: Subset<T, WhyMeItemsAggregateArgs>): Prisma.PrismaPromise<GetWhyMeItemsAggregateType<T>>

    /**
     * Group by WhyMeItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {whyMeItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends whyMeItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: whyMeItemsGroupByArgs['orderBy'] }
        : { orderBy?: whyMeItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, whyMeItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWhyMeItemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the whyMeItems model
   */
  readonly fields: whyMeItemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for whyMeItems.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__whyMeItemsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    whyMe<T extends whyMeItems$whyMeArgs<ExtArgs> = {}>(args?: Subset<T, whyMeItems$whyMeArgs<ExtArgs>>): Prisma__whyMeClient<$Result.GetResult<Prisma.$whyMePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the whyMeItems model
   */ 
  interface whyMeItemsFieldRefs {
    readonly id: FieldRef<"whyMeItems", 'Int'>
    readonly why_me_id: FieldRef<"whyMeItems", 'Int'>
    readonly image: FieldRef<"whyMeItems", 'String'>
    readonly title: FieldRef<"whyMeItems", 'String'>
    readonly description: FieldRef<"whyMeItems", 'String'>
  }
    

  // Custom InputTypes

  /**
   * whyMeItems findUnique
   */
  export type whyMeItemsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMeItems
     */
    select?: whyMeItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeItemsInclude<ExtArgs> | null
    /**
     * Filter, which whyMeItems to fetch.
     */
    where: whyMeItemsWhereUniqueInput
  }


  /**
   * whyMeItems findUniqueOrThrow
   */
  export type whyMeItemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMeItems
     */
    select?: whyMeItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeItemsInclude<ExtArgs> | null
    /**
     * Filter, which whyMeItems to fetch.
     */
    where: whyMeItemsWhereUniqueInput
  }


  /**
   * whyMeItems findFirst
   */
  export type whyMeItemsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMeItems
     */
    select?: whyMeItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeItemsInclude<ExtArgs> | null
    /**
     * Filter, which whyMeItems to fetch.
     */
    where?: whyMeItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of whyMeItems to fetch.
     */
    orderBy?: whyMeItemsOrderByWithRelationInput | whyMeItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for whyMeItems.
     */
    cursor?: whyMeItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` whyMeItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` whyMeItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of whyMeItems.
     */
    distinct?: WhyMeItemsScalarFieldEnum | WhyMeItemsScalarFieldEnum[]
  }


  /**
   * whyMeItems findFirstOrThrow
   */
  export type whyMeItemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMeItems
     */
    select?: whyMeItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeItemsInclude<ExtArgs> | null
    /**
     * Filter, which whyMeItems to fetch.
     */
    where?: whyMeItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of whyMeItems to fetch.
     */
    orderBy?: whyMeItemsOrderByWithRelationInput | whyMeItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for whyMeItems.
     */
    cursor?: whyMeItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` whyMeItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` whyMeItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of whyMeItems.
     */
    distinct?: WhyMeItemsScalarFieldEnum | WhyMeItemsScalarFieldEnum[]
  }


  /**
   * whyMeItems findMany
   */
  export type whyMeItemsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMeItems
     */
    select?: whyMeItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeItemsInclude<ExtArgs> | null
    /**
     * Filter, which whyMeItems to fetch.
     */
    where?: whyMeItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of whyMeItems to fetch.
     */
    orderBy?: whyMeItemsOrderByWithRelationInput | whyMeItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing whyMeItems.
     */
    cursor?: whyMeItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` whyMeItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` whyMeItems.
     */
    skip?: number
    distinct?: WhyMeItemsScalarFieldEnum | WhyMeItemsScalarFieldEnum[]
  }


  /**
   * whyMeItems create
   */
  export type whyMeItemsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMeItems
     */
    select?: whyMeItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeItemsInclude<ExtArgs> | null
    /**
     * The data needed to create a whyMeItems.
     */
    data: XOR<whyMeItemsCreateInput, whyMeItemsUncheckedCreateInput>
  }


  /**
   * whyMeItems createMany
   */
  export type whyMeItemsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many whyMeItems.
     */
    data: whyMeItemsCreateManyInput | whyMeItemsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * whyMeItems update
   */
  export type whyMeItemsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMeItems
     */
    select?: whyMeItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeItemsInclude<ExtArgs> | null
    /**
     * The data needed to update a whyMeItems.
     */
    data: XOR<whyMeItemsUpdateInput, whyMeItemsUncheckedUpdateInput>
    /**
     * Choose, which whyMeItems to update.
     */
    where: whyMeItemsWhereUniqueInput
  }


  /**
   * whyMeItems updateMany
   */
  export type whyMeItemsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update whyMeItems.
     */
    data: XOR<whyMeItemsUpdateManyMutationInput, whyMeItemsUncheckedUpdateManyInput>
    /**
     * Filter which whyMeItems to update
     */
    where?: whyMeItemsWhereInput
  }


  /**
   * whyMeItems upsert
   */
  export type whyMeItemsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMeItems
     */
    select?: whyMeItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeItemsInclude<ExtArgs> | null
    /**
     * The filter to search for the whyMeItems to update in case it exists.
     */
    where: whyMeItemsWhereUniqueInput
    /**
     * In case the whyMeItems found by the `where` argument doesn't exist, create a new whyMeItems with this data.
     */
    create: XOR<whyMeItemsCreateInput, whyMeItemsUncheckedCreateInput>
    /**
     * In case the whyMeItems was found with the provided `where` argument, update it with this data.
     */
    update: XOR<whyMeItemsUpdateInput, whyMeItemsUncheckedUpdateInput>
  }


  /**
   * whyMeItems delete
   */
  export type whyMeItemsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMeItems
     */
    select?: whyMeItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeItemsInclude<ExtArgs> | null
    /**
     * Filter which whyMeItems to delete.
     */
    where: whyMeItemsWhereUniqueInput
  }


  /**
   * whyMeItems deleteMany
   */
  export type whyMeItemsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which whyMeItems to delete
     */
    where?: whyMeItemsWhereInput
  }


  /**
   * whyMeItems.whyMe
   */
  export type whyMeItems$whyMeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMe
     */
    select?: whyMeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeInclude<ExtArgs> | null
    where?: whyMeWhereInput
  }


  /**
   * whyMeItems without action
   */
  export type whyMeItemsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the whyMeItems
     */
    select?: whyMeItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: whyMeItemsInclude<ExtArgs> | null
  }



  /**
   * Model Work
   */

  export type AggregateWork = {
    _count: WorkCountAggregateOutputType | null
    _avg: WorkAvgAggregateOutputType | null
    _sum: WorkSumAggregateOutputType | null
    _min: WorkMinAggregateOutputType | null
    _max: WorkMaxAggregateOutputType | null
  }

  export type WorkAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type WorkSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type WorkMinAggregateOutputType = {
    id: number | null
    subtitle: string | null
    title: string | null
    work_links: string | null
    user_id: number | null
  }

  export type WorkMaxAggregateOutputType = {
    id: number | null
    subtitle: string | null
    title: string | null
    work_links: string | null
    user_id: number | null
  }

  export type WorkCountAggregateOutputType = {
    id: number
    subtitle: number
    title: number
    work_links: number
    user_id: number
    _all: number
  }


  export type WorkAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type WorkSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type WorkMinAggregateInputType = {
    id?: true
    subtitle?: true
    title?: true
    work_links?: true
    user_id?: true
  }

  export type WorkMaxAggregateInputType = {
    id?: true
    subtitle?: true
    title?: true
    work_links?: true
    user_id?: true
  }

  export type WorkCountAggregateInputType = {
    id?: true
    subtitle?: true
    title?: true
    work_links?: true
    user_id?: true
    _all?: true
  }

  export type WorkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Work to aggregate.
     */
    where?: WorkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Works to fetch.
     */
    orderBy?: WorkOrderByWithRelationInput | WorkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Works from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Works.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Works
    **/
    _count?: true | WorkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkMaxAggregateInputType
  }

  export type GetWorkAggregateType<T extends WorkAggregateArgs> = {
        [P in keyof T & keyof AggregateWork]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWork[P]>
      : GetScalarType<T[P], AggregateWork[P]>
  }




  export type WorkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkWhereInput
    orderBy?: WorkOrderByWithAggregationInput | WorkOrderByWithAggregationInput[]
    by: WorkScalarFieldEnum[] | WorkScalarFieldEnum
    having?: WorkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkCountAggregateInputType | true
    _avg?: WorkAvgAggregateInputType
    _sum?: WorkSumAggregateInputType
    _min?: WorkMinAggregateInputType
    _max?: WorkMaxAggregateInputType
  }

  export type WorkGroupByOutputType = {
    id: number
    subtitle: string
    title: string
    work_links: string
    user_id: number
    _count: WorkCountAggregateOutputType | null
    _avg: WorkAvgAggregateOutputType | null
    _sum: WorkSumAggregateOutputType | null
    _min: WorkMinAggregateOutputType | null
    _max: WorkMaxAggregateOutputType | null
  }

  type GetWorkGroupByPayload<T extends WorkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkGroupByOutputType[P]>
            : GetScalarType<T[P], WorkGroupByOutputType[P]>
        }
      >
    >


  export type WorkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subtitle?: boolean
    title?: boolean
    work_links?: boolean
    user_id?: boolean
    work_items?: boolean | Work$work_itemsArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | WorkCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["work"]>

  export type WorkSelectScalar = {
    id?: boolean
    subtitle?: boolean
    title?: boolean
    work_links?: boolean
    user_id?: boolean
  }

  export type WorkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    work_items?: boolean | Work$work_itemsArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | WorkCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $WorkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Work"
    objects: {
      work_items: Prisma.$workItemsPayload<ExtArgs>[]
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      subtitle: string
      title: string
      work_links: string
      user_id: number
    }, ExtArgs["result"]["work"]>
    composites: {}
  }


  type WorkGetPayload<S extends boolean | null | undefined | WorkDefaultArgs> = $Result.GetResult<Prisma.$WorkPayload, S>

  type WorkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkCountAggregateInputType | true
    }

  export interface WorkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Work'], meta: { name: 'Work' } }
    /**
     * Find zero or one Work that matches the filter.
     * @param {WorkFindUniqueArgs} args - Arguments to find a Work
     * @example
     * // Get one Work
     * const work = await prisma.work.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WorkFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WorkFindUniqueArgs<ExtArgs>>
    ): Prisma__WorkClient<$Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Work that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WorkFindUniqueOrThrowArgs} args - Arguments to find a Work
     * @example
     * // Get one Work
     * const work = await prisma.work.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WorkFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WorkClient<$Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Work that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkFindFirstArgs} args - Arguments to find a Work
     * @example
     * // Get one Work
     * const work = await prisma.work.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WorkFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkFindFirstArgs<ExtArgs>>
    ): Prisma__WorkClient<$Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Work that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkFindFirstOrThrowArgs} args - Arguments to find a Work
     * @example
     * // Get one Work
     * const work = await prisma.work.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WorkFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WorkClient<$Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Works that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Works
     * const works = await prisma.work.findMany()
     * 
     * // Get first 10 Works
     * const works = await prisma.work.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workWithIdOnly = await prisma.work.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WorkFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Work.
     * @param {WorkCreateArgs} args - Arguments to create a Work.
     * @example
     * // Create one Work
     * const Work = await prisma.work.create({
     *   data: {
     *     // ... data to create a Work
     *   }
     * })
     * 
    **/
    create<T extends WorkCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkCreateArgs<ExtArgs>>
    ): Prisma__WorkClient<$Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Works.
     *     @param {WorkCreateManyArgs} args - Arguments to create many Works.
     *     @example
     *     // Create many Works
     *     const work = await prisma.work.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WorkCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Work.
     * @param {WorkDeleteArgs} args - Arguments to delete one Work.
     * @example
     * // Delete one Work
     * const Work = await prisma.work.delete({
     *   where: {
     *     // ... filter to delete one Work
     *   }
     * })
     * 
    **/
    delete<T extends WorkDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WorkDeleteArgs<ExtArgs>>
    ): Prisma__WorkClient<$Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Work.
     * @param {WorkUpdateArgs} args - Arguments to update one Work.
     * @example
     * // Update one Work
     * const work = await prisma.work.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WorkUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkUpdateArgs<ExtArgs>>
    ): Prisma__WorkClient<$Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Works.
     * @param {WorkDeleteManyArgs} args - Arguments to filter Works to delete.
     * @example
     * // Delete a few Works
     * const { count } = await prisma.work.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WorkDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Works.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Works
     * const work = await prisma.work.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WorkUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WorkUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Work.
     * @param {WorkUpsertArgs} args - Arguments to update or create a Work.
     * @example
     * // Update or create a Work
     * const work = await prisma.work.upsert({
     *   create: {
     *     // ... data to create a Work
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Work we want to update
     *   }
     * })
    **/
    upsert<T extends WorkUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WorkUpsertArgs<ExtArgs>>
    ): Prisma__WorkClient<$Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Works.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkCountArgs} args - Arguments to filter Works to count.
     * @example
     * // Count the number of Works
     * const count = await prisma.work.count({
     *   where: {
     *     // ... the filter for the Works we want to count
     *   }
     * })
    **/
    count<T extends WorkCountArgs>(
      args?: Subset<T, WorkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Work.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkAggregateArgs>(args: Subset<T, WorkAggregateArgs>): Prisma.PrismaPromise<GetWorkAggregateType<T>>

    /**
     * Group by Work.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkGroupByArgs['orderBy'] }
        : { orderBy?: WorkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Work model
   */
  readonly fields: WorkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Work.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    work_items<T extends Work$work_itemsArgs<ExtArgs> = {}>(args?: Subset<T, Work$work_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workItemsPayload<ExtArgs>, T, 'findMany'> | Null>;

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Work model
   */ 
  interface WorkFieldRefs {
    readonly id: FieldRef<"Work", 'Int'>
    readonly subtitle: FieldRef<"Work", 'String'>
    readonly title: FieldRef<"Work", 'String'>
    readonly work_links: FieldRef<"Work", 'String'>
    readonly user_id: FieldRef<"Work", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Work findUnique
   */
  export type WorkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Work
     */
    select?: WorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkInclude<ExtArgs> | null
    /**
     * Filter, which Work to fetch.
     */
    where: WorkWhereUniqueInput
  }


  /**
   * Work findUniqueOrThrow
   */
  export type WorkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Work
     */
    select?: WorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkInclude<ExtArgs> | null
    /**
     * Filter, which Work to fetch.
     */
    where: WorkWhereUniqueInput
  }


  /**
   * Work findFirst
   */
  export type WorkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Work
     */
    select?: WorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkInclude<ExtArgs> | null
    /**
     * Filter, which Work to fetch.
     */
    where?: WorkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Works to fetch.
     */
    orderBy?: WorkOrderByWithRelationInput | WorkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Works.
     */
    cursor?: WorkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Works from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Works.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Works.
     */
    distinct?: WorkScalarFieldEnum | WorkScalarFieldEnum[]
  }


  /**
   * Work findFirstOrThrow
   */
  export type WorkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Work
     */
    select?: WorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkInclude<ExtArgs> | null
    /**
     * Filter, which Work to fetch.
     */
    where?: WorkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Works to fetch.
     */
    orderBy?: WorkOrderByWithRelationInput | WorkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Works.
     */
    cursor?: WorkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Works from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Works.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Works.
     */
    distinct?: WorkScalarFieldEnum | WorkScalarFieldEnum[]
  }


  /**
   * Work findMany
   */
  export type WorkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Work
     */
    select?: WorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkInclude<ExtArgs> | null
    /**
     * Filter, which Works to fetch.
     */
    where?: WorkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Works to fetch.
     */
    orderBy?: WorkOrderByWithRelationInput | WorkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Works.
     */
    cursor?: WorkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Works from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Works.
     */
    skip?: number
    distinct?: WorkScalarFieldEnum | WorkScalarFieldEnum[]
  }


  /**
   * Work create
   */
  export type WorkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Work
     */
    select?: WorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkInclude<ExtArgs> | null
    /**
     * The data needed to create a Work.
     */
    data: XOR<WorkCreateInput, WorkUncheckedCreateInput>
  }


  /**
   * Work createMany
   */
  export type WorkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Works.
     */
    data: WorkCreateManyInput | WorkCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Work update
   */
  export type WorkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Work
     */
    select?: WorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkInclude<ExtArgs> | null
    /**
     * The data needed to update a Work.
     */
    data: XOR<WorkUpdateInput, WorkUncheckedUpdateInput>
    /**
     * Choose, which Work to update.
     */
    where: WorkWhereUniqueInput
  }


  /**
   * Work updateMany
   */
  export type WorkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Works.
     */
    data: XOR<WorkUpdateManyMutationInput, WorkUncheckedUpdateManyInput>
    /**
     * Filter which Works to update
     */
    where?: WorkWhereInput
  }


  /**
   * Work upsert
   */
  export type WorkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Work
     */
    select?: WorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkInclude<ExtArgs> | null
    /**
     * The filter to search for the Work to update in case it exists.
     */
    where: WorkWhereUniqueInput
    /**
     * In case the Work found by the `where` argument doesn't exist, create a new Work with this data.
     */
    create: XOR<WorkCreateInput, WorkUncheckedCreateInput>
    /**
     * In case the Work was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkUpdateInput, WorkUncheckedUpdateInput>
  }


  /**
   * Work delete
   */
  export type WorkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Work
     */
    select?: WorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkInclude<ExtArgs> | null
    /**
     * Filter which Work to delete.
     */
    where: WorkWhereUniqueInput
  }


  /**
   * Work deleteMany
   */
  export type WorkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Works to delete
     */
    where?: WorkWhereInput
  }


  /**
   * Work.work_items
   */
  export type Work$work_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workItems
     */
    select?: workItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: workItemsInclude<ExtArgs> | null
    where?: workItemsWhereInput
    orderBy?: workItemsOrderByWithRelationInput | workItemsOrderByWithRelationInput[]
    cursor?: workItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkItemsScalarFieldEnum | WorkItemsScalarFieldEnum[]
  }


  /**
   * Work without action
   */
  export type WorkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Work
     */
    select?: WorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkInclude<ExtArgs> | null
  }



  /**
   * Model workItems
   */

  export type AggregateWorkItems = {
    _count: WorkItemsCountAggregateOutputType | null
    _avg: WorkItemsAvgAggregateOutputType | null
    _sum: WorkItemsSumAggregateOutputType | null
    _min: WorkItemsMinAggregateOutputType | null
    _max: WorkItemsMaxAggregateOutputType | null
  }

  export type WorkItemsAvgAggregateOutputType = {
    id: number | null
    workId: number | null
  }

  export type WorkItemsSumAggregateOutputType = {
    id: number | null
    workId: number | null
  }

  export type WorkItemsMinAggregateOutputType = {
    id: number | null
    workId: number | null
    image: string | null
    title: string | null
    sub_title: string | null
    description: string | null
  }

  export type WorkItemsMaxAggregateOutputType = {
    id: number | null
    workId: number | null
    image: string | null
    title: string | null
    sub_title: string | null
    description: string | null
  }

  export type WorkItemsCountAggregateOutputType = {
    id: number
    workId: number
    image: number
    title: number
    sub_title: number
    description: number
    _all: number
  }


  export type WorkItemsAvgAggregateInputType = {
    id?: true
    workId?: true
  }

  export type WorkItemsSumAggregateInputType = {
    id?: true
    workId?: true
  }

  export type WorkItemsMinAggregateInputType = {
    id?: true
    workId?: true
    image?: true
    title?: true
    sub_title?: true
    description?: true
  }

  export type WorkItemsMaxAggregateInputType = {
    id?: true
    workId?: true
    image?: true
    title?: true
    sub_title?: true
    description?: true
  }

  export type WorkItemsCountAggregateInputType = {
    id?: true
    workId?: true
    image?: true
    title?: true
    sub_title?: true
    description?: true
    _all?: true
  }

  export type WorkItemsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which workItems to aggregate.
     */
    where?: workItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workItems to fetch.
     */
    orderBy?: workItemsOrderByWithRelationInput | workItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: workItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned workItems
    **/
    _count?: true | WorkItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkItemsMaxAggregateInputType
  }

  export type GetWorkItemsAggregateType<T extends WorkItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkItems[P]>
      : GetScalarType<T[P], AggregateWorkItems[P]>
  }




  export type workItemsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: workItemsWhereInput
    orderBy?: workItemsOrderByWithAggregationInput | workItemsOrderByWithAggregationInput[]
    by: WorkItemsScalarFieldEnum[] | WorkItemsScalarFieldEnum
    having?: workItemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkItemsCountAggregateInputType | true
    _avg?: WorkItemsAvgAggregateInputType
    _sum?: WorkItemsSumAggregateInputType
    _min?: WorkItemsMinAggregateInputType
    _max?: WorkItemsMaxAggregateInputType
  }

  export type WorkItemsGroupByOutputType = {
    id: number
    workId: number | null
    image: string
    title: string
    sub_title: string
    description: string
    _count: WorkItemsCountAggregateOutputType | null
    _avg: WorkItemsAvgAggregateOutputType | null
    _sum: WorkItemsSumAggregateOutputType | null
    _min: WorkItemsMinAggregateOutputType | null
    _max: WorkItemsMaxAggregateOutputType | null
  }

  type GetWorkItemsGroupByPayload<T extends workItemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkItemsGroupByOutputType[P]>
            : GetScalarType<T[P], WorkItemsGroupByOutputType[P]>
        }
      >
    >


  export type workItemsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workId?: boolean
    image?: boolean
    title?: boolean
    sub_title?: boolean
    description?: boolean
    Work?: boolean | workItems$WorkArgs<ExtArgs>
  }, ExtArgs["result"]["workItems"]>

  export type workItemsSelectScalar = {
    id?: boolean
    workId?: boolean
    image?: boolean
    title?: boolean
    sub_title?: boolean
    description?: boolean
  }

  export type workItemsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Work?: boolean | workItems$WorkArgs<ExtArgs>
  }


  export type $workItemsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "workItems"
    objects: {
      Work: Prisma.$WorkPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      workId: number | null
      image: string
      title: string
      sub_title: string
      description: string
    }, ExtArgs["result"]["workItems"]>
    composites: {}
  }


  type workItemsGetPayload<S extends boolean | null | undefined | workItemsDefaultArgs> = $Result.GetResult<Prisma.$workItemsPayload, S>

  type workItemsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<workItemsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkItemsCountAggregateInputType | true
    }

  export interface workItemsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['workItems'], meta: { name: 'workItems' } }
    /**
     * Find zero or one WorkItems that matches the filter.
     * @param {workItemsFindUniqueArgs} args - Arguments to find a WorkItems
     * @example
     * // Get one WorkItems
     * const workItems = await prisma.workItems.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends workItemsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, workItemsFindUniqueArgs<ExtArgs>>
    ): Prisma__workItemsClient<$Result.GetResult<Prisma.$workItemsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one WorkItems that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {workItemsFindUniqueOrThrowArgs} args - Arguments to find a WorkItems
     * @example
     * // Get one WorkItems
     * const workItems = await prisma.workItems.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends workItemsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, workItemsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__workItemsClient<$Result.GetResult<Prisma.$workItemsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first WorkItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workItemsFindFirstArgs} args - Arguments to find a WorkItems
     * @example
     * // Get one WorkItems
     * const workItems = await prisma.workItems.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends workItemsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, workItemsFindFirstArgs<ExtArgs>>
    ): Prisma__workItemsClient<$Result.GetResult<Prisma.$workItemsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first WorkItems that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workItemsFindFirstOrThrowArgs} args - Arguments to find a WorkItems
     * @example
     * // Get one WorkItems
     * const workItems = await prisma.workItems.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends workItemsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, workItemsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__workItemsClient<$Result.GetResult<Prisma.$workItemsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more WorkItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workItemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkItems
     * const workItems = await prisma.workItems.findMany()
     * 
     * // Get first 10 WorkItems
     * const workItems = await prisma.workItems.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workItemsWithIdOnly = await prisma.workItems.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends workItemsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, workItemsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workItemsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a WorkItems.
     * @param {workItemsCreateArgs} args - Arguments to create a WorkItems.
     * @example
     * // Create one WorkItems
     * const WorkItems = await prisma.workItems.create({
     *   data: {
     *     // ... data to create a WorkItems
     *   }
     * })
     * 
    **/
    create<T extends workItemsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, workItemsCreateArgs<ExtArgs>>
    ): Prisma__workItemsClient<$Result.GetResult<Prisma.$workItemsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many WorkItems.
     *     @param {workItemsCreateManyArgs} args - Arguments to create many WorkItems.
     *     @example
     *     // Create many WorkItems
     *     const workItems = await prisma.workItems.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends workItemsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, workItemsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WorkItems.
     * @param {workItemsDeleteArgs} args - Arguments to delete one WorkItems.
     * @example
     * // Delete one WorkItems
     * const WorkItems = await prisma.workItems.delete({
     *   where: {
     *     // ... filter to delete one WorkItems
     *   }
     * })
     * 
    **/
    delete<T extends workItemsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, workItemsDeleteArgs<ExtArgs>>
    ): Prisma__workItemsClient<$Result.GetResult<Prisma.$workItemsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one WorkItems.
     * @param {workItemsUpdateArgs} args - Arguments to update one WorkItems.
     * @example
     * // Update one WorkItems
     * const workItems = await prisma.workItems.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends workItemsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, workItemsUpdateArgs<ExtArgs>>
    ): Prisma__workItemsClient<$Result.GetResult<Prisma.$workItemsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more WorkItems.
     * @param {workItemsDeleteManyArgs} args - Arguments to filter WorkItems to delete.
     * @example
     * // Delete a few WorkItems
     * const { count } = await prisma.workItems.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends workItemsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, workItemsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workItemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkItems
     * const workItems = await prisma.workItems.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends workItemsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, workItemsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkItems.
     * @param {workItemsUpsertArgs} args - Arguments to update or create a WorkItems.
     * @example
     * // Update or create a WorkItems
     * const workItems = await prisma.workItems.upsert({
     *   create: {
     *     // ... data to create a WorkItems
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkItems we want to update
     *   }
     * })
    **/
    upsert<T extends workItemsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, workItemsUpsertArgs<ExtArgs>>
    ): Prisma__workItemsClient<$Result.GetResult<Prisma.$workItemsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of WorkItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workItemsCountArgs} args - Arguments to filter WorkItems to count.
     * @example
     * // Count the number of WorkItems
     * const count = await prisma.workItems.count({
     *   where: {
     *     // ... the filter for the WorkItems we want to count
     *   }
     * })
    **/
    count<T extends workItemsCountArgs>(
      args?: Subset<T, workItemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkItemsAggregateArgs>(args: Subset<T, WorkItemsAggregateArgs>): Prisma.PrismaPromise<GetWorkItemsAggregateType<T>>

    /**
     * Group by WorkItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends workItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: workItemsGroupByArgs['orderBy'] }
        : { orderBy?: workItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, workItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkItemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the workItems model
   */
  readonly fields: workItemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for workItems.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__workItemsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Work<T extends workItems$WorkArgs<ExtArgs> = {}>(args?: Subset<T, workItems$WorkArgs<ExtArgs>>): Prisma__WorkClient<$Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the workItems model
   */ 
  interface workItemsFieldRefs {
    readonly id: FieldRef<"workItems", 'Int'>
    readonly workId: FieldRef<"workItems", 'Int'>
    readonly image: FieldRef<"workItems", 'String'>
    readonly title: FieldRef<"workItems", 'String'>
    readonly sub_title: FieldRef<"workItems", 'String'>
    readonly description: FieldRef<"workItems", 'String'>
  }
    

  // Custom InputTypes

  /**
   * workItems findUnique
   */
  export type workItemsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workItems
     */
    select?: workItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: workItemsInclude<ExtArgs> | null
    /**
     * Filter, which workItems to fetch.
     */
    where: workItemsWhereUniqueInput
  }


  /**
   * workItems findUniqueOrThrow
   */
  export type workItemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workItems
     */
    select?: workItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: workItemsInclude<ExtArgs> | null
    /**
     * Filter, which workItems to fetch.
     */
    where: workItemsWhereUniqueInput
  }


  /**
   * workItems findFirst
   */
  export type workItemsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workItems
     */
    select?: workItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: workItemsInclude<ExtArgs> | null
    /**
     * Filter, which workItems to fetch.
     */
    where?: workItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workItems to fetch.
     */
    orderBy?: workItemsOrderByWithRelationInput | workItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for workItems.
     */
    cursor?: workItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of workItems.
     */
    distinct?: WorkItemsScalarFieldEnum | WorkItemsScalarFieldEnum[]
  }


  /**
   * workItems findFirstOrThrow
   */
  export type workItemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workItems
     */
    select?: workItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: workItemsInclude<ExtArgs> | null
    /**
     * Filter, which workItems to fetch.
     */
    where?: workItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workItems to fetch.
     */
    orderBy?: workItemsOrderByWithRelationInput | workItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for workItems.
     */
    cursor?: workItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of workItems.
     */
    distinct?: WorkItemsScalarFieldEnum | WorkItemsScalarFieldEnum[]
  }


  /**
   * workItems findMany
   */
  export type workItemsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workItems
     */
    select?: workItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: workItemsInclude<ExtArgs> | null
    /**
     * Filter, which workItems to fetch.
     */
    where?: workItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workItems to fetch.
     */
    orderBy?: workItemsOrderByWithRelationInput | workItemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing workItems.
     */
    cursor?: workItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workItems.
     */
    skip?: number
    distinct?: WorkItemsScalarFieldEnum | WorkItemsScalarFieldEnum[]
  }


  /**
   * workItems create
   */
  export type workItemsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workItems
     */
    select?: workItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: workItemsInclude<ExtArgs> | null
    /**
     * The data needed to create a workItems.
     */
    data: XOR<workItemsCreateInput, workItemsUncheckedCreateInput>
  }


  /**
   * workItems createMany
   */
  export type workItemsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many workItems.
     */
    data: workItemsCreateManyInput | workItemsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * workItems update
   */
  export type workItemsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workItems
     */
    select?: workItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: workItemsInclude<ExtArgs> | null
    /**
     * The data needed to update a workItems.
     */
    data: XOR<workItemsUpdateInput, workItemsUncheckedUpdateInput>
    /**
     * Choose, which workItems to update.
     */
    where: workItemsWhereUniqueInput
  }


  /**
   * workItems updateMany
   */
  export type workItemsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update workItems.
     */
    data: XOR<workItemsUpdateManyMutationInput, workItemsUncheckedUpdateManyInput>
    /**
     * Filter which workItems to update
     */
    where?: workItemsWhereInput
  }


  /**
   * workItems upsert
   */
  export type workItemsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workItems
     */
    select?: workItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: workItemsInclude<ExtArgs> | null
    /**
     * The filter to search for the workItems to update in case it exists.
     */
    where: workItemsWhereUniqueInput
    /**
     * In case the workItems found by the `where` argument doesn't exist, create a new workItems with this data.
     */
    create: XOR<workItemsCreateInput, workItemsUncheckedCreateInput>
    /**
     * In case the workItems was found with the provided `where` argument, update it with this data.
     */
    update: XOR<workItemsUpdateInput, workItemsUncheckedUpdateInput>
  }


  /**
   * workItems delete
   */
  export type workItemsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workItems
     */
    select?: workItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: workItemsInclude<ExtArgs> | null
    /**
     * Filter which workItems to delete.
     */
    where: workItemsWhereUniqueInput
  }


  /**
   * workItems deleteMany
   */
  export type workItemsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which workItems to delete
     */
    where?: workItemsWhereInput
  }


  /**
   * workItems.Work
   */
  export type workItems$WorkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Work
     */
    select?: WorkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkInclude<ExtArgs> | null
    where?: WorkWhereInput
  }


  /**
   * workItems without action
   */
  export type workItemsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workItems
     */
    select?: workItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: workItemsInclude<ExtArgs> | null
  }



  /**
   * Model More
   */

  export type AggregateMore = {
    _count: MoreCountAggregateOutputType | null
    _avg: MoreAvgAggregateOutputType | null
    _sum: MoreSumAggregateOutputType | null
    _min: MoreMinAggregateOutputType | null
    _max: MoreMaxAggregateOutputType | null
  }

  export type MoreAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type MoreSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type MoreMinAggregateOutputType = {
    id: number | null
    title: string | null
    sub_title: string | null
    links: string | null
    user_id: number | null
  }

  export type MoreMaxAggregateOutputType = {
    id: number | null
    title: string | null
    sub_title: string | null
    links: string | null
    user_id: number | null
  }

  export type MoreCountAggregateOutputType = {
    id: number
    title: number
    sub_title: number
    links: number
    user_id: number
    _all: number
  }


  export type MoreAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type MoreSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type MoreMinAggregateInputType = {
    id?: true
    title?: true
    sub_title?: true
    links?: true
    user_id?: true
  }

  export type MoreMaxAggregateInputType = {
    id?: true
    title?: true
    sub_title?: true
    links?: true
    user_id?: true
  }

  export type MoreCountAggregateInputType = {
    id?: true
    title?: true
    sub_title?: true
    links?: true
    user_id?: true
    _all?: true
  }

  export type MoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which More to aggregate.
     */
    where?: MoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mores to fetch.
     */
    orderBy?: MoreOrderByWithRelationInput | MoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Mores
    **/
    _count?: true | MoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MoreMaxAggregateInputType
  }

  export type GetMoreAggregateType<T extends MoreAggregateArgs> = {
        [P in keyof T & keyof AggregateMore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMore[P]>
      : GetScalarType<T[P], AggregateMore[P]>
  }




  export type MoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MoreWhereInput
    orderBy?: MoreOrderByWithAggregationInput | MoreOrderByWithAggregationInput[]
    by: MoreScalarFieldEnum[] | MoreScalarFieldEnum
    having?: MoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MoreCountAggregateInputType | true
    _avg?: MoreAvgAggregateInputType
    _sum?: MoreSumAggregateInputType
    _min?: MoreMinAggregateInputType
    _max?: MoreMaxAggregateInputType
  }

  export type MoreGroupByOutputType = {
    id: number
    title: string
    sub_title: string
    links: string
    user_id: number
    _count: MoreCountAggregateOutputType | null
    _avg: MoreAvgAggregateOutputType | null
    _sum: MoreSumAggregateOutputType | null
    _min: MoreMinAggregateOutputType | null
    _max: MoreMaxAggregateOutputType | null
  }

  type GetMoreGroupByPayload<T extends MoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MoreGroupByOutputType[P]>
            : GetScalarType<T[P], MoreGroupByOutputType[P]>
        }
      >
    >


  export type MoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    sub_title?: boolean
    links?: boolean
    user_id?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["more"]>

  export type MoreSelectScalar = {
    id?: boolean
    title?: boolean
    sub_title?: boolean
    links?: boolean
    user_id?: boolean
  }

  export type MoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $MorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "More"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      sub_title: string
      links: string
      user_id: number
    }, ExtArgs["result"]["more"]>
    composites: {}
  }


  type MoreGetPayload<S extends boolean | null | undefined | MoreDefaultArgs> = $Result.GetResult<Prisma.$MorePayload, S>

  type MoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MoreFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MoreCountAggregateInputType | true
    }

  export interface MoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['More'], meta: { name: 'More' } }
    /**
     * Find zero or one More that matches the filter.
     * @param {MoreFindUniqueArgs} args - Arguments to find a More
     * @example
     * // Get one More
     * const more = await prisma.more.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MoreFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MoreFindUniqueArgs<ExtArgs>>
    ): Prisma__MoreClient<$Result.GetResult<Prisma.$MorePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one More that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MoreFindUniqueOrThrowArgs} args - Arguments to find a More
     * @example
     * // Get one More
     * const more = await prisma.more.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MoreFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MoreFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MoreClient<$Result.GetResult<Prisma.$MorePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first More that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoreFindFirstArgs} args - Arguments to find a More
     * @example
     * // Get one More
     * const more = await prisma.more.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MoreFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MoreFindFirstArgs<ExtArgs>>
    ): Prisma__MoreClient<$Result.GetResult<Prisma.$MorePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first More that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoreFindFirstOrThrowArgs} args - Arguments to find a More
     * @example
     * // Get one More
     * const more = await prisma.more.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MoreFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MoreFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MoreClient<$Result.GetResult<Prisma.$MorePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Mores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoreFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mores
     * const mores = await prisma.more.findMany()
     * 
     * // Get first 10 Mores
     * const mores = await prisma.more.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const moreWithIdOnly = await prisma.more.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MoreFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MoreFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MorePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a More.
     * @param {MoreCreateArgs} args - Arguments to create a More.
     * @example
     * // Create one More
     * const More = await prisma.more.create({
     *   data: {
     *     // ... data to create a More
     *   }
     * })
     * 
    **/
    create<T extends MoreCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MoreCreateArgs<ExtArgs>>
    ): Prisma__MoreClient<$Result.GetResult<Prisma.$MorePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Mores.
     *     @param {MoreCreateManyArgs} args - Arguments to create many Mores.
     *     @example
     *     // Create many Mores
     *     const more = await prisma.more.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MoreCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MoreCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a More.
     * @param {MoreDeleteArgs} args - Arguments to delete one More.
     * @example
     * // Delete one More
     * const More = await prisma.more.delete({
     *   where: {
     *     // ... filter to delete one More
     *   }
     * })
     * 
    **/
    delete<T extends MoreDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MoreDeleteArgs<ExtArgs>>
    ): Prisma__MoreClient<$Result.GetResult<Prisma.$MorePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one More.
     * @param {MoreUpdateArgs} args - Arguments to update one More.
     * @example
     * // Update one More
     * const more = await prisma.more.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MoreUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MoreUpdateArgs<ExtArgs>>
    ): Prisma__MoreClient<$Result.GetResult<Prisma.$MorePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Mores.
     * @param {MoreDeleteManyArgs} args - Arguments to filter Mores to delete.
     * @example
     * // Delete a few Mores
     * const { count } = await prisma.more.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MoreDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MoreDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mores
     * const more = await prisma.more.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MoreUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MoreUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one More.
     * @param {MoreUpsertArgs} args - Arguments to update or create a More.
     * @example
     * // Update or create a More
     * const more = await prisma.more.upsert({
     *   create: {
     *     // ... data to create a More
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the More we want to update
     *   }
     * })
    **/
    upsert<T extends MoreUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MoreUpsertArgs<ExtArgs>>
    ): Prisma__MoreClient<$Result.GetResult<Prisma.$MorePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Mores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoreCountArgs} args - Arguments to filter Mores to count.
     * @example
     * // Count the number of Mores
     * const count = await prisma.more.count({
     *   where: {
     *     // ... the filter for the Mores we want to count
     *   }
     * })
    **/
    count<T extends MoreCountArgs>(
      args?: Subset<T, MoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a More.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MoreAggregateArgs>(args: Subset<T, MoreAggregateArgs>): Prisma.PrismaPromise<GetMoreAggregateType<T>>

    /**
     * Group by More.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MoreGroupByArgs['orderBy'] }
        : { orderBy?: MoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the More model
   */
  readonly fields: MoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for More.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the More model
   */ 
  interface MoreFieldRefs {
    readonly id: FieldRef<"More", 'Int'>
    readonly title: FieldRef<"More", 'String'>
    readonly sub_title: FieldRef<"More", 'String'>
    readonly links: FieldRef<"More", 'String'>
    readonly user_id: FieldRef<"More", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * More findUnique
   */
  export type MoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the More
     */
    select?: MoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MoreInclude<ExtArgs> | null
    /**
     * Filter, which More to fetch.
     */
    where: MoreWhereUniqueInput
  }


  /**
   * More findUniqueOrThrow
   */
  export type MoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the More
     */
    select?: MoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MoreInclude<ExtArgs> | null
    /**
     * Filter, which More to fetch.
     */
    where: MoreWhereUniqueInput
  }


  /**
   * More findFirst
   */
  export type MoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the More
     */
    select?: MoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MoreInclude<ExtArgs> | null
    /**
     * Filter, which More to fetch.
     */
    where?: MoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mores to fetch.
     */
    orderBy?: MoreOrderByWithRelationInput | MoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mores.
     */
    cursor?: MoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mores.
     */
    distinct?: MoreScalarFieldEnum | MoreScalarFieldEnum[]
  }


  /**
   * More findFirstOrThrow
   */
  export type MoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the More
     */
    select?: MoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MoreInclude<ExtArgs> | null
    /**
     * Filter, which More to fetch.
     */
    where?: MoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mores to fetch.
     */
    orderBy?: MoreOrderByWithRelationInput | MoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mores.
     */
    cursor?: MoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mores.
     */
    distinct?: MoreScalarFieldEnum | MoreScalarFieldEnum[]
  }


  /**
   * More findMany
   */
  export type MoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the More
     */
    select?: MoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MoreInclude<ExtArgs> | null
    /**
     * Filter, which Mores to fetch.
     */
    where?: MoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mores to fetch.
     */
    orderBy?: MoreOrderByWithRelationInput | MoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Mores.
     */
    cursor?: MoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mores.
     */
    skip?: number
    distinct?: MoreScalarFieldEnum | MoreScalarFieldEnum[]
  }


  /**
   * More create
   */
  export type MoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the More
     */
    select?: MoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MoreInclude<ExtArgs> | null
    /**
     * The data needed to create a More.
     */
    data: XOR<MoreCreateInput, MoreUncheckedCreateInput>
  }


  /**
   * More createMany
   */
  export type MoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Mores.
     */
    data: MoreCreateManyInput | MoreCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * More update
   */
  export type MoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the More
     */
    select?: MoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MoreInclude<ExtArgs> | null
    /**
     * The data needed to update a More.
     */
    data: XOR<MoreUpdateInput, MoreUncheckedUpdateInput>
    /**
     * Choose, which More to update.
     */
    where: MoreWhereUniqueInput
  }


  /**
   * More updateMany
   */
  export type MoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Mores.
     */
    data: XOR<MoreUpdateManyMutationInput, MoreUncheckedUpdateManyInput>
    /**
     * Filter which Mores to update
     */
    where?: MoreWhereInput
  }


  /**
   * More upsert
   */
  export type MoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the More
     */
    select?: MoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MoreInclude<ExtArgs> | null
    /**
     * The filter to search for the More to update in case it exists.
     */
    where: MoreWhereUniqueInput
    /**
     * In case the More found by the `where` argument doesn't exist, create a new More with this data.
     */
    create: XOR<MoreCreateInput, MoreUncheckedCreateInput>
    /**
     * In case the More was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MoreUpdateInput, MoreUncheckedUpdateInput>
  }


  /**
   * More delete
   */
  export type MoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the More
     */
    select?: MoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MoreInclude<ExtArgs> | null
    /**
     * Filter which More to delete.
     */
    where: MoreWhereUniqueInput
  }


  /**
   * More deleteMany
   */
  export type MoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mores to delete
     */
    where?: MoreWhereInput
  }


  /**
   * More without action
   */
  export type MoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the More
     */
    select?: MoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MoreInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    created_at: 'created_at',
    updated_at: 'updated_at',
    image: 'image'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const HomeScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    logo_name: 'logo_name',
    image: 'image',
    title: 'title',
    description: 'description',
    copy_email: 'copy_email'
  };

  export type HomeScalarFieldEnum = (typeof HomeScalarFieldEnum)[keyof typeof HomeScalarFieldEnum]


  export const AboutScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    sub_title: 'sub_title',
    title: 'title',
    description: 'description',
    image: 'image'
  };

  export type AboutScalarFieldEnum = (typeof AboutScalarFieldEnum)[keyof typeof AboutScalarFieldEnum]


  export const AboutMeScalarFieldEnum: {
    id: 'id',
    about_id: 'about_id',
    about_me_title: 'about_me_title',
    about_me_description: 'about_me_description'
  };

  export type AboutMeScalarFieldEnum = (typeof AboutMeScalarFieldEnum)[keyof typeof AboutMeScalarFieldEnum]


  export const LanguagesScalarFieldEnum: {
    id: 'id',
    subTitle: 'subTitle',
    title: 'title',
    user_id: 'user_id'
  };

  export type LanguagesScalarFieldEnum = (typeof LanguagesScalarFieldEnum)[keyof typeof LanguagesScalarFieldEnum]


  export const LanguagesItemScalarFieldEnum: {
    id: 'id',
    languages_id: 'languages_id',
    image: 'image',
    language_name: 'language_name'
  };

  export type LanguagesItemScalarFieldEnum = (typeof LanguagesItemScalarFieldEnum)[keyof typeof LanguagesItemScalarFieldEnum]


  export const WhyMeScalarFieldEnum: {
    id: 'id',
    subTitle: 'subTitle',
    title: 'title',
    user_id: 'user_id'
  };

  export type WhyMeScalarFieldEnum = (typeof WhyMeScalarFieldEnum)[keyof typeof WhyMeScalarFieldEnum]


  export const WhyMeItemsScalarFieldEnum: {
    id: 'id',
    why_me_id: 'why_me_id',
    image: 'image',
    title: 'title',
    description: 'description'
  };

  export type WhyMeItemsScalarFieldEnum = (typeof WhyMeItemsScalarFieldEnum)[keyof typeof WhyMeItemsScalarFieldEnum]


  export const WorkScalarFieldEnum: {
    id: 'id',
    subtitle: 'subtitle',
    title: 'title',
    work_links: 'work_links',
    user_id: 'user_id'
  };

  export type WorkScalarFieldEnum = (typeof WorkScalarFieldEnum)[keyof typeof WorkScalarFieldEnum]


  export const WorkItemsScalarFieldEnum: {
    id: 'id',
    workId: 'workId',
    image: 'image',
    title: 'title',
    sub_title: 'sub_title',
    description: 'description'
  };

  export type WorkItemsScalarFieldEnum = (typeof WorkItemsScalarFieldEnum)[keyof typeof WorkItemsScalarFieldEnum]


  export const MoreScalarFieldEnum: {
    id: 'id',
    title: 'title',
    sub_title: 'sub_title',
    links: 'links',
    user_id: 'user_id'
  };

  export type MoreScalarFieldEnum = (typeof MoreScalarFieldEnum)[keyof typeof MoreScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    image?: StringNullableFilter<"User"> | string | null
    Home?: XOR<HomeNullableRelationFilter, HomeWhereInput> | null
    About?: XOR<AboutNullableRelationFilter, AboutWhereInput> | null
    languages?: XOR<LanguagesNullableRelationFilter, LanguagesWhereInput> | null
    work?: XOR<WorkNullableRelationFilter, WorkWhereInput> | null
    More?: XOR<MoreNullableRelationFilter, MoreWhereInput> | null
    whyMe?: XOR<WhyMeNullableRelationFilter, whyMeWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    image?: SortOrderInput | SortOrder
    Home?: HomeOrderByWithRelationInput
    About?: AboutOrderByWithRelationInput
    languages?: LanguagesOrderByWithRelationInput
    work?: WorkOrderByWithRelationInput
    More?: MoreOrderByWithRelationInput
    whyMe?: whyMeOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    password?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    image?: StringNullableFilter<"User"> | string | null
    Home?: XOR<HomeNullableRelationFilter, HomeWhereInput> | null
    About?: XOR<AboutNullableRelationFilter, AboutWhereInput> | null
    languages?: XOR<LanguagesNullableRelationFilter, LanguagesWhereInput> | null
    work?: XOR<WorkNullableRelationFilter, WorkWhereInput> | null
    More?: XOR<MoreNullableRelationFilter, MoreWhereInput> | null
    whyMe?: XOR<WhyMeNullableRelationFilter, whyMeWhereInput> | null
  }, "id" | "email" | "password">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    image?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type HomeWhereInput = {
    AND?: HomeWhereInput | HomeWhereInput[]
    OR?: HomeWhereInput[]
    NOT?: HomeWhereInput | HomeWhereInput[]
    id?: IntFilter<"Home"> | number
    user_id?: IntFilter<"Home"> | number
    logo_name?: StringFilter<"Home"> | string
    image?: StringFilter<"Home"> | string
    title?: StringFilter<"Home"> | string
    description?: StringFilter<"Home"> | string
    copy_email?: StringFilter<"Home"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type HomeOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    logo_name?: SortOrder
    image?: SortOrder
    title?: SortOrder
    description?: SortOrder
    copy_email?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type HomeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id?: number
    copy_email?: string
    AND?: HomeWhereInput | HomeWhereInput[]
    OR?: HomeWhereInput[]
    NOT?: HomeWhereInput | HomeWhereInput[]
    logo_name?: StringFilter<"Home"> | string
    image?: StringFilter<"Home"> | string
    title?: StringFilter<"Home"> | string
    description?: StringFilter<"Home"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "user_id" | "copy_email">

  export type HomeOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    logo_name?: SortOrder
    image?: SortOrder
    title?: SortOrder
    description?: SortOrder
    copy_email?: SortOrder
    _count?: HomeCountOrderByAggregateInput
    _avg?: HomeAvgOrderByAggregateInput
    _max?: HomeMaxOrderByAggregateInput
    _min?: HomeMinOrderByAggregateInput
    _sum?: HomeSumOrderByAggregateInput
  }

  export type HomeScalarWhereWithAggregatesInput = {
    AND?: HomeScalarWhereWithAggregatesInput | HomeScalarWhereWithAggregatesInput[]
    OR?: HomeScalarWhereWithAggregatesInput[]
    NOT?: HomeScalarWhereWithAggregatesInput | HomeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Home"> | number
    user_id?: IntWithAggregatesFilter<"Home"> | number
    logo_name?: StringWithAggregatesFilter<"Home"> | string
    image?: StringWithAggregatesFilter<"Home"> | string
    title?: StringWithAggregatesFilter<"Home"> | string
    description?: StringWithAggregatesFilter<"Home"> | string
    copy_email?: StringWithAggregatesFilter<"Home"> | string
  }

  export type AboutWhereInput = {
    AND?: AboutWhereInput | AboutWhereInput[]
    OR?: AboutWhereInput[]
    NOT?: AboutWhereInput | AboutWhereInput[]
    id?: IntFilter<"About"> | number
    user_id?: IntFilter<"About"> | number
    sub_title?: StringFilter<"About"> | string
    title?: StringFilter<"About"> | string
    description?: StringFilter<"About"> | string
    image?: StringFilter<"About"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    about_me?: AboutMeListRelationFilter
  }

  export type AboutOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    sub_title?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    User?: UserOrderByWithRelationInput
    about_me?: AboutMeOrderByRelationAggregateInput
  }

  export type AboutWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id?: number
    AND?: AboutWhereInput | AboutWhereInput[]
    OR?: AboutWhereInput[]
    NOT?: AboutWhereInput | AboutWhereInput[]
    sub_title?: StringFilter<"About"> | string
    title?: StringFilter<"About"> | string
    description?: StringFilter<"About"> | string
    image?: StringFilter<"About"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
    about_me?: AboutMeListRelationFilter
  }, "id" | "user_id">

  export type AboutOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    sub_title?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    _count?: AboutCountOrderByAggregateInput
    _avg?: AboutAvgOrderByAggregateInput
    _max?: AboutMaxOrderByAggregateInput
    _min?: AboutMinOrderByAggregateInput
    _sum?: AboutSumOrderByAggregateInput
  }

  export type AboutScalarWhereWithAggregatesInput = {
    AND?: AboutScalarWhereWithAggregatesInput | AboutScalarWhereWithAggregatesInput[]
    OR?: AboutScalarWhereWithAggregatesInput[]
    NOT?: AboutScalarWhereWithAggregatesInput | AboutScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"About"> | number
    user_id?: IntWithAggregatesFilter<"About"> | number
    sub_title?: StringWithAggregatesFilter<"About"> | string
    title?: StringWithAggregatesFilter<"About"> | string
    description?: StringWithAggregatesFilter<"About"> | string
    image?: StringWithAggregatesFilter<"About"> | string
  }

  export type AboutMeWhereInput = {
    AND?: AboutMeWhereInput | AboutMeWhereInput[]
    OR?: AboutMeWhereInput[]
    NOT?: AboutMeWhereInput | AboutMeWhereInput[]
    id?: IntFilter<"AboutMe"> | number
    about_id?: IntNullableFilter<"AboutMe"> | number | null
    about_me_title?: StringNullableFilter<"AboutMe"> | string | null
    about_me_description?: StringNullableFilter<"AboutMe"> | string | null
    About?: XOR<AboutNullableRelationFilter, AboutWhereInput> | null
  }

  export type AboutMeOrderByWithRelationInput = {
    id?: SortOrder
    about_id?: SortOrderInput | SortOrder
    about_me_title?: SortOrderInput | SortOrder
    about_me_description?: SortOrderInput | SortOrder
    About?: AboutOrderByWithRelationInput
  }

  export type AboutMeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AboutMeWhereInput | AboutMeWhereInput[]
    OR?: AboutMeWhereInput[]
    NOT?: AboutMeWhereInput | AboutMeWhereInput[]
    about_id?: IntNullableFilter<"AboutMe"> | number | null
    about_me_title?: StringNullableFilter<"AboutMe"> | string | null
    about_me_description?: StringNullableFilter<"AboutMe"> | string | null
    About?: XOR<AboutNullableRelationFilter, AboutWhereInput> | null
  }, "id">

  export type AboutMeOrderByWithAggregationInput = {
    id?: SortOrder
    about_id?: SortOrderInput | SortOrder
    about_me_title?: SortOrderInput | SortOrder
    about_me_description?: SortOrderInput | SortOrder
    _count?: AboutMeCountOrderByAggregateInput
    _avg?: AboutMeAvgOrderByAggregateInput
    _max?: AboutMeMaxOrderByAggregateInput
    _min?: AboutMeMinOrderByAggregateInput
    _sum?: AboutMeSumOrderByAggregateInput
  }

  export type AboutMeScalarWhereWithAggregatesInput = {
    AND?: AboutMeScalarWhereWithAggregatesInput | AboutMeScalarWhereWithAggregatesInput[]
    OR?: AboutMeScalarWhereWithAggregatesInput[]
    NOT?: AboutMeScalarWhereWithAggregatesInput | AboutMeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AboutMe"> | number
    about_id?: IntNullableWithAggregatesFilter<"AboutMe"> | number | null
    about_me_title?: StringNullableWithAggregatesFilter<"AboutMe"> | string | null
    about_me_description?: StringNullableWithAggregatesFilter<"AboutMe"> | string | null
  }

  export type LanguagesWhereInput = {
    AND?: LanguagesWhereInput | LanguagesWhereInput[]
    OR?: LanguagesWhereInput[]
    NOT?: LanguagesWhereInput | LanguagesWhereInput[]
    id?: IntFilter<"Languages"> | number
    subTitle?: StringFilter<"Languages"> | string
    title?: StringFilter<"Languages"> | string
    user_id?: IntFilter<"Languages"> | number
    language_items?: LanguagesItemListRelationFilter
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type LanguagesOrderByWithRelationInput = {
    id?: SortOrder
    subTitle?: SortOrder
    title?: SortOrder
    user_id?: SortOrder
    language_items?: LanguagesItemOrderByRelationAggregateInput
    User?: UserOrderByWithRelationInput
  }

  export type LanguagesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id?: number
    AND?: LanguagesWhereInput | LanguagesWhereInput[]
    OR?: LanguagesWhereInput[]
    NOT?: LanguagesWhereInput | LanguagesWhereInput[]
    subTitle?: StringFilter<"Languages"> | string
    title?: StringFilter<"Languages"> | string
    language_items?: LanguagesItemListRelationFilter
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "user_id">

  export type LanguagesOrderByWithAggregationInput = {
    id?: SortOrder
    subTitle?: SortOrder
    title?: SortOrder
    user_id?: SortOrder
    _count?: LanguagesCountOrderByAggregateInput
    _avg?: LanguagesAvgOrderByAggregateInput
    _max?: LanguagesMaxOrderByAggregateInput
    _min?: LanguagesMinOrderByAggregateInput
    _sum?: LanguagesSumOrderByAggregateInput
  }

  export type LanguagesScalarWhereWithAggregatesInput = {
    AND?: LanguagesScalarWhereWithAggregatesInput | LanguagesScalarWhereWithAggregatesInput[]
    OR?: LanguagesScalarWhereWithAggregatesInput[]
    NOT?: LanguagesScalarWhereWithAggregatesInput | LanguagesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Languages"> | number
    subTitle?: StringWithAggregatesFilter<"Languages"> | string
    title?: StringWithAggregatesFilter<"Languages"> | string
    user_id?: IntWithAggregatesFilter<"Languages"> | number
  }

  export type LanguagesItemWhereInput = {
    AND?: LanguagesItemWhereInput | LanguagesItemWhereInput[]
    OR?: LanguagesItemWhereInput[]
    NOT?: LanguagesItemWhereInput | LanguagesItemWhereInput[]
    id?: IntFilter<"LanguagesItem"> | number
    languages_id?: IntNullableFilter<"LanguagesItem"> | number | null
    image?: StringFilter<"LanguagesItem"> | string
    language_name?: StringFilter<"LanguagesItem"> | string
    Languages?: XOR<LanguagesNullableRelationFilter, LanguagesWhereInput> | null
  }

  export type LanguagesItemOrderByWithRelationInput = {
    id?: SortOrder
    languages_id?: SortOrderInput | SortOrder
    image?: SortOrder
    language_name?: SortOrder
    Languages?: LanguagesOrderByWithRelationInput
  }

  export type LanguagesItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LanguagesItemWhereInput | LanguagesItemWhereInput[]
    OR?: LanguagesItemWhereInput[]
    NOT?: LanguagesItemWhereInput | LanguagesItemWhereInput[]
    languages_id?: IntNullableFilter<"LanguagesItem"> | number | null
    image?: StringFilter<"LanguagesItem"> | string
    language_name?: StringFilter<"LanguagesItem"> | string
    Languages?: XOR<LanguagesNullableRelationFilter, LanguagesWhereInput> | null
  }, "id">

  export type LanguagesItemOrderByWithAggregationInput = {
    id?: SortOrder
    languages_id?: SortOrderInput | SortOrder
    image?: SortOrder
    language_name?: SortOrder
    _count?: LanguagesItemCountOrderByAggregateInput
    _avg?: LanguagesItemAvgOrderByAggregateInput
    _max?: LanguagesItemMaxOrderByAggregateInput
    _min?: LanguagesItemMinOrderByAggregateInput
    _sum?: LanguagesItemSumOrderByAggregateInput
  }

  export type LanguagesItemScalarWhereWithAggregatesInput = {
    AND?: LanguagesItemScalarWhereWithAggregatesInput | LanguagesItemScalarWhereWithAggregatesInput[]
    OR?: LanguagesItemScalarWhereWithAggregatesInput[]
    NOT?: LanguagesItemScalarWhereWithAggregatesInput | LanguagesItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LanguagesItem"> | number
    languages_id?: IntNullableWithAggregatesFilter<"LanguagesItem"> | number | null
    image?: StringWithAggregatesFilter<"LanguagesItem"> | string
    language_name?: StringWithAggregatesFilter<"LanguagesItem"> | string
  }

  export type whyMeWhereInput = {
    AND?: whyMeWhereInput | whyMeWhereInput[]
    OR?: whyMeWhereInput[]
    NOT?: whyMeWhereInput | whyMeWhereInput[]
    id?: IntFilter<"whyMe"> | number
    subTitle?: StringFilter<"whyMe"> | string
    title?: StringFilter<"whyMe"> | string
    user_id?: IntFilter<"whyMe"> | number
    why_me_items?: WhyMeItemsListRelationFilter
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type whyMeOrderByWithRelationInput = {
    id?: SortOrder
    subTitle?: SortOrder
    title?: SortOrder
    user_id?: SortOrder
    why_me_items?: whyMeItemsOrderByRelationAggregateInput
    User?: UserOrderByWithRelationInput
  }

  export type whyMeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id?: number
    AND?: whyMeWhereInput | whyMeWhereInput[]
    OR?: whyMeWhereInput[]
    NOT?: whyMeWhereInput | whyMeWhereInput[]
    subTitle?: StringFilter<"whyMe"> | string
    title?: StringFilter<"whyMe"> | string
    why_me_items?: WhyMeItemsListRelationFilter
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "user_id">

  export type whyMeOrderByWithAggregationInput = {
    id?: SortOrder
    subTitle?: SortOrder
    title?: SortOrder
    user_id?: SortOrder
    _count?: whyMeCountOrderByAggregateInput
    _avg?: whyMeAvgOrderByAggregateInput
    _max?: whyMeMaxOrderByAggregateInput
    _min?: whyMeMinOrderByAggregateInput
    _sum?: whyMeSumOrderByAggregateInput
  }

  export type whyMeScalarWhereWithAggregatesInput = {
    AND?: whyMeScalarWhereWithAggregatesInput | whyMeScalarWhereWithAggregatesInput[]
    OR?: whyMeScalarWhereWithAggregatesInput[]
    NOT?: whyMeScalarWhereWithAggregatesInput | whyMeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"whyMe"> | number
    subTitle?: StringWithAggregatesFilter<"whyMe"> | string
    title?: StringWithAggregatesFilter<"whyMe"> | string
    user_id?: IntWithAggregatesFilter<"whyMe"> | number
  }

  export type whyMeItemsWhereInput = {
    AND?: whyMeItemsWhereInput | whyMeItemsWhereInput[]
    OR?: whyMeItemsWhereInput[]
    NOT?: whyMeItemsWhereInput | whyMeItemsWhereInput[]
    id?: IntFilter<"whyMeItems"> | number
    why_me_id?: IntNullableFilter<"whyMeItems"> | number | null
    image?: StringFilter<"whyMeItems"> | string
    title?: StringFilter<"whyMeItems"> | string
    description?: StringFilter<"whyMeItems"> | string
    whyMe?: XOR<WhyMeNullableRelationFilter, whyMeWhereInput> | null
  }

  export type whyMeItemsOrderByWithRelationInput = {
    id?: SortOrder
    why_me_id?: SortOrderInput | SortOrder
    image?: SortOrder
    title?: SortOrder
    description?: SortOrder
    whyMe?: whyMeOrderByWithRelationInput
  }

  export type whyMeItemsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: whyMeItemsWhereInput | whyMeItemsWhereInput[]
    OR?: whyMeItemsWhereInput[]
    NOT?: whyMeItemsWhereInput | whyMeItemsWhereInput[]
    why_me_id?: IntNullableFilter<"whyMeItems"> | number | null
    image?: StringFilter<"whyMeItems"> | string
    title?: StringFilter<"whyMeItems"> | string
    description?: StringFilter<"whyMeItems"> | string
    whyMe?: XOR<WhyMeNullableRelationFilter, whyMeWhereInput> | null
  }, "id">

  export type whyMeItemsOrderByWithAggregationInput = {
    id?: SortOrder
    why_me_id?: SortOrderInput | SortOrder
    image?: SortOrder
    title?: SortOrder
    description?: SortOrder
    _count?: whyMeItemsCountOrderByAggregateInput
    _avg?: whyMeItemsAvgOrderByAggregateInput
    _max?: whyMeItemsMaxOrderByAggregateInput
    _min?: whyMeItemsMinOrderByAggregateInput
    _sum?: whyMeItemsSumOrderByAggregateInput
  }

  export type whyMeItemsScalarWhereWithAggregatesInput = {
    AND?: whyMeItemsScalarWhereWithAggregatesInput | whyMeItemsScalarWhereWithAggregatesInput[]
    OR?: whyMeItemsScalarWhereWithAggregatesInput[]
    NOT?: whyMeItemsScalarWhereWithAggregatesInput | whyMeItemsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"whyMeItems"> | number
    why_me_id?: IntNullableWithAggregatesFilter<"whyMeItems"> | number | null
    image?: StringWithAggregatesFilter<"whyMeItems"> | string
    title?: StringWithAggregatesFilter<"whyMeItems"> | string
    description?: StringWithAggregatesFilter<"whyMeItems"> | string
  }

  export type WorkWhereInput = {
    AND?: WorkWhereInput | WorkWhereInput[]
    OR?: WorkWhereInput[]
    NOT?: WorkWhereInput | WorkWhereInput[]
    id?: IntFilter<"Work"> | number
    subtitle?: StringFilter<"Work"> | string
    title?: StringFilter<"Work"> | string
    work_links?: StringFilter<"Work"> | string
    user_id?: IntFilter<"Work"> | number
    work_items?: WorkItemsListRelationFilter
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type WorkOrderByWithRelationInput = {
    id?: SortOrder
    subtitle?: SortOrder
    title?: SortOrder
    work_links?: SortOrder
    user_id?: SortOrder
    work_items?: workItemsOrderByRelationAggregateInput
    User?: UserOrderByWithRelationInput
  }

  export type WorkWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id?: number
    AND?: WorkWhereInput | WorkWhereInput[]
    OR?: WorkWhereInput[]
    NOT?: WorkWhereInput | WorkWhereInput[]
    subtitle?: StringFilter<"Work"> | string
    title?: StringFilter<"Work"> | string
    work_links?: StringFilter<"Work"> | string
    work_items?: WorkItemsListRelationFilter
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "user_id">

  export type WorkOrderByWithAggregationInput = {
    id?: SortOrder
    subtitle?: SortOrder
    title?: SortOrder
    work_links?: SortOrder
    user_id?: SortOrder
    _count?: WorkCountOrderByAggregateInput
    _avg?: WorkAvgOrderByAggregateInput
    _max?: WorkMaxOrderByAggregateInput
    _min?: WorkMinOrderByAggregateInput
    _sum?: WorkSumOrderByAggregateInput
  }

  export type WorkScalarWhereWithAggregatesInput = {
    AND?: WorkScalarWhereWithAggregatesInput | WorkScalarWhereWithAggregatesInput[]
    OR?: WorkScalarWhereWithAggregatesInput[]
    NOT?: WorkScalarWhereWithAggregatesInput | WorkScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Work"> | number
    subtitle?: StringWithAggregatesFilter<"Work"> | string
    title?: StringWithAggregatesFilter<"Work"> | string
    work_links?: StringWithAggregatesFilter<"Work"> | string
    user_id?: IntWithAggregatesFilter<"Work"> | number
  }

  export type workItemsWhereInput = {
    AND?: workItemsWhereInput | workItemsWhereInput[]
    OR?: workItemsWhereInput[]
    NOT?: workItemsWhereInput | workItemsWhereInput[]
    id?: IntFilter<"workItems"> | number
    workId?: IntNullableFilter<"workItems"> | number | null
    image?: StringFilter<"workItems"> | string
    title?: StringFilter<"workItems"> | string
    sub_title?: StringFilter<"workItems"> | string
    description?: StringFilter<"workItems"> | string
    Work?: XOR<WorkNullableRelationFilter, WorkWhereInput> | null
  }

  export type workItemsOrderByWithRelationInput = {
    id?: SortOrder
    workId?: SortOrderInput | SortOrder
    image?: SortOrder
    title?: SortOrder
    sub_title?: SortOrder
    description?: SortOrder
    Work?: WorkOrderByWithRelationInput
  }

  export type workItemsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: workItemsWhereInput | workItemsWhereInput[]
    OR?: workItemsWhereInput[]
    NOT?: workItemsWhereInput | workItemsWhereInput[]
    workId?: IntNullableFilter<"workItems"> | number | null
    image?: StringFilter<"workItems"> | string
    title?: StringFilter<"workItems"> | string
    sub_title?: StringFilter<"workItems"> | string
    description?: StringFilter<"workItems"> | string
    Work?: XOR<WorkNullableRelationFilter, WorkWhereInput> | null
  }, "id">

  export type workItemsOrderByWithAggregationInput = {
    id?: SortOrder
    workId?: SortOrderInput | SortOrder
    image?: SortOrder
    title?: SortOrder
    sub_title?: SortOrder
    description?: SortOrder
    _count?: workItemsCountOrderByAggregateInput
    _avg?: workItemsAvgOrderByAggregateInput
    _max?: workItemsMaxOrderByAggregateInput
    _min?: workItemsMinOrderByAggregateInput
    _sum?: workItemsSumOrderByAggregateInput
  }

  export type workItemsScalarWhereWithAggregatesInput = {
    AND?: workItemsScalarWhereWithAggregatesInput | workItemsScalarWhereWithAggregatesInput[]
    OR?: workItemsScalarWhereWithAggregatesInput[]
    NOT?: workItemsScalarWhereWithAggregatesInput | workItemsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"workItems"> | number
    workId?: IntNullableWithAggregatesFilter<"workItems"> | number | null
    image?: StringWithAggregatesFilter<"workItems"> | string
    title?: StringWithAggregatesFilter<"workItems"> | string
    sub_title?: StringWithAggregatesFilter<"workItems"> | string
    description?: StringWithAggregatesFilter<"workItems"> | string
  }

  export type MoreWhereInput = {
    AND?: MoreWhereInput | MoreWhereInput[]
    OR?: MoreWhereInput[]
    NOT?: MoreWhereInput | MoreWhereInput[]
    id?: IntFilter<"More"> | number
    title?: StringFilter<"More"> | string
    sub_title?: StringFilter<"More"> | string
    links?: StringFilter<"More"> | string
    user_id?: IntFilter<"More"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type MoreOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    sub_title?: SortOrder
    links?: SortOrder
    user_id?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type MoreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id?: number
    AND?: MoreWhereInput | MoreWhereInput[]
    OR?: MoreWhereInput[]
    NOT?: MoreWhereInput | MoreWhereInput[]
    title?: StringFilter<"More"> | string
    sub_title?: StringFilter<"More"> | string
    links?: StringFilter<"More"> | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "user_id">

  export type MoreOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    sub_title?: SortOrder
    links?: SortOrder
    user_id?: SortOrder
    _count?: MoreCountOrderByAggregateInput
    _avg?: MoreAvgOrderByAggregateInput
    _max?: MoreMaxOrderByAggregateInput
    _min?: MoreMinOrderByAggregateInput
    _sum?: MoreSumOrderByAggregateInput
  }

  export type MoreScalarWhereWithAggregatesInput = {
    AND?: MoreScalarWhereWithAggregatesInput | MoreScalarWhereWithAggregatesInput[]
    OR?: MoreScalarWhereWithAggregatesInput[]
    NOT?: MoreScalarWhereWithAggregatesInput | MoreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"More"> | number
    title?: StringWithAggregatesFilter<"More"> | string
    sub_title?: StringWithAggregatesFilter<"More"> | string
    links?: StringWithAggregatesFilter<"More"> | string
    user_id?: IntWithAggregatesFilter<"More"> | number
  }

  export type UserCreateInput = {
    email: string
    name: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    image?: string | null
    Home?: HomeCreateNestedOneWithoutUserInput
    About?: AboutCreateNestedOneWithoutUserInput
    languages?: LanguagesCreateNestedOneWithoutUserInput
    work?: WorkCreateNestedOneWithoutUserInput
    More?: MoreCreateNestedOneWithoutUserInput
    whyMe?: whyMeCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    name: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    image?: string | null
    Home?: HomeUncheckedCreateNestedOneWithoutUserInput
    About?: AboutUncheckedCreateNestedOneWithoutUserInput
    languages?: LanguagesUncheckedCreateNestedOneWithoutUserInput
    work?: WorkUncheckedCreateNestedOneWithoutUserInput
    More?: MoreUncheckedCreateNestedOneWithoutUserInput
    whyMe?: whyMeUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Home?: HomeUpdateOneWithoutUserNestedInput
    About?: AboutUpdateOneWithoutUserNestedInput
    languages?: LanguagesUpdateOneWithoutUserNestedInput
    work?: WorkUpdateOneWithoutUserNestedInput
    More?: MoreUpdateOneWithoutUserNestedInput
    whyMe?: whyMeUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Home?: HomeUncheckedUpdateOneWithoutUserNestedInput
    About?: AboutUncheckedUpdateOneWithoutUserNestedInput
    languages?: LanguagesUncheckedUpdateOneWithoutUserNestedInput
    work?: WorkUncheckedUpdateOneWithoutUserNestedInput
    More?: MoreUncheckedUpdateOneWithoutUserNestedInput
    whyMe?: whyMeUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    name: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    image?: string | null
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HomeCreateInput = {
    logo_name: string
    image: string
    title: string
    description: string
    copy_email: string
    User: UserCreateNestedOneWithoutHomeInput
  }

  export type HomeUncheckedCreateInput = {
    id?: number
    user_id: number
    logo_name: string
    image: string
    title: string
    description: string
    copy_email: string
  }

  export type HomeUpdateInput = {
    logo_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    copy_email?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutHomeNestedInput
  }

  export type HomeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    logo_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    copy_email?: StringFieldUpdateOperationsInput | string
  }

  export type HomeCreateManyInput = {
    id?: number
    user_id: number
    logo_name: string
    image: string
    title: string
    description: string
    copy_email: string
  }

  export type HomeUpdateManyMutationInput = {
    logo_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    copy_email?: StringFieldUpdateOperationsInput | string
  }

  export type HomeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    logo_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    copy_email?: StringFieldUpdateOperationsInput | string
  }

  export type AboutCreateInput = {
    sub_title: string
    title: string
    description: string
    image: string
    User: UserCreateNestedOneWithoutAboutInput
    about_me?: AboutMeCreateNestedManyWithoutAboutInput
  }

  export type AboutUncheckedCreateInput = {
    id?: number
    user_id: number
    sub_title: string
    title: string
    description: string
    image: string
    about_me?: AboutMeUncheckedCreateNestedManyWithoutAboutInput
  }

  export type AboutUpdateInput = {
    sub_title?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutAboutNestedInput
    about_me?: AboutMeUpdateManyWithoutAboutNestedInput
  }

  export type AboutUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    sub_title?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    about_me?: AboutMeUncheckedUpdateManyWithoutAboutNestedInput
  }

  export type AboutCreateManyInput = {
    id?: number
    user_id: number
    sub_title: string
    title: string
    description: string
    image: string
  }

  export type AboutUpdateManyMutationInput = {
    sub_title?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type AboutUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    sub_title?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type AboutMeCreateInput = {
    about_me_title?: string | null
    about_me_description?: string | null
    About?: AboutCreateNestedOneWithoutAbout_meInput
  }

  export type AboutMeUncheckedCreateInput = {
    id?: number
    about_id?: number | null
    about_me_title?: string | null
    about_me_description?: string | null
  }

  export type AboutMeUpdateInput = {
    about_me_title?: NullableStringFieldUpdateOperationsInput | string | null
    about_me_description?: NullableStringFieldUpdateOperationsInput | string | null
    About?: AboutUpdateOneWithoutAbout_meNestedInput
  }

  export type AboutMeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    about_id?: NullableIntFieldUpdateOperationsInput | number | null
    about_me_title?: NullableStringFieldUpdateOperationsInput | string | null
    about_me_description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AboutMeCreateManyInput = {
    id?: number
    about_id?: number | null
    about_me_title?: string | null
    about_me_description?: string | null
  }

  export type AboutMeUpdateManyMutationInput = {
    about_me_title?: NullableStringFieldUpdateOperationsInput | string | null
    about_me_description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AboutMeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    about_id?: NullableIntFieldUpdateOperationsInput | number | null
    about_me_title?: NullableStringFieldUpdateOperationsInput | string | null
    about_me_description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LanguagesCreateInput = {
    subTitle: string
    title: string
    language_items?: LanguagesItemCreateNestedManyWithoutLanguagesInput
    User: UserCreateNestedOneWithoutLanguagesInput
  }

  export type LanguagesUncheckedCreateInput = {
    id?: number
    subTitle: string
    title: string
    user_id: number
    language_items?: LanguagesItemUncheckedCreateNestedManyWithoutLanguagesInput
  }

  export type LanguagesUpdateInput = {
    subTitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    language_items?: LanguagesItemUpdateManyWithoutLanguagesNestedInput
    User?: UserUpdateOneRequiredWithoutLanguagesNestedInput
  }

  export type LanguagesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    subTitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    language_items?: LanguagesItemUncheckedUpdateManyWithoutLanguagesNestedInput
  }

  export type LanguagesCreateManyInput = {
    id?: number
    subTitle: string
    title: string
    user_id: number
  }

  export type LanguagesUpdateManyMutationInput = {
    subTitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type LanguagesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    subTitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type LanguagesItemCreateInput = {
    image: string
    language_name: string
    Languages?: LanguagesCreateNestedOneWithoutLanguage_itemsInput
  }

  export type LanguagesItemUncheckedCreateInput = {
    id?: number
    languages_id?: number | null
    image: string
    language_name: string
  }

  export type LanguagesItemUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    language_name?: StringFieldUpdateOperationsInput | string
    Languages?: LanguagesUpdateOneWithoutLanguage_itemsNestedInput
  }

  export type LanguagesItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    languages_id?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    language_name?: StringFieldUpdateOperationsInput | string
  }

  export type LanguagesItemCreateManyInput = {
    id?: number
    languages_id?: number | null
    image: string
    language_name: string
  }

  export type LanguagesItemUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    language_name?: StringFieldUpdateOperationsInput | string
  }

  export type LanguagesItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    languages_id?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    language_name?: StringFieldUpdateOperationsInput | string
  }

  export type whyMeCreateInput = {
    subTitle: string
    title: string
    why_me_items?: whyMeItemsCreateNestedManyWithoutWhyMeInput
    User: UserCreateNestedOneWithoutWhyMeInput
  }

  export type whyMeUncheckedCreateInput = {
    id?: number
    subTitle: string
    title: string
    user_id: number
    why_me_items?: whyMeItemsUncheckedCreateNestedManyWithoutWhyMeInput
  }

  export type whyMeUpdateInput = {
    subTitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    why_me_items?: whyMeItemsUpdateManyWithoutWhyMeNestedInput
    User?: UserUpdateOneRequiredWithoutWhyMeNestedInput
  }

  export type whyMeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    subTitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    why_me_items?: whyMeItemsUncheckedUpdateManyWithoutWhyMeNestedInput
  }

  export type whyMeCreateManyInput = {
    id?: number
    subTitle: string
    title: string
    user_id: number
  }

  export type whyMeUpdateManyMutationInput = {
    subTitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
  }

  export type whyMeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    subTitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type whyMeItemsCreateInput = {
    image: string
    title: string
    description: string
    whyMe?: whyMeCreateNestedOneWithoutWhy_me_itemsInput
  }

  export type whyMeItemsUncheckedCreateInput = {
    id?: number
    why_me_id?: number | null
    image: string
    title: string
    description: string
  }

  export type whyMeItemsUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    whyMe?: whyMeUpdateOneWithoutWhy_me_itemsNestedInput
  }

  export type whyMeItemsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    why_me_id?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type whyMeItemsCreateManyInput = {
    id?: number
    why_me_id?: number | null
    image: string
    title: string
    description: string
  }

  export type whyMeItemsUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type whyMeItemsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    why_me_id?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type WorkCreateInput = {
    subtitle: string
    title: string
    work_links: string
    work_items?: workItemsCreateNestedManyWithoutWorkInput
    User: UserCreateNestedOneWithoutWorkInput
  }

  export type WorkUncheckedCreateInput = {
    id?: number
    subtitle: string
    title: string
    work_links: string
    user_id: number
    work_items?: workItemsUncheckedCreateNestedManyWithoutWorkInput
  }

  export type WorkUpdateInput = {
    subtitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    work_links?: StringFieldUpdateOperationsInput | string
    work_items?: workItemsUpdateManyWithoutWorkNestedInput
    User?: UserUpdateOneRequiredWithoutWorkNestedInput
  }

  export type WorkUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    subtitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    work_links?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    work_items?: workItemsUncheckedUpdateManyWithoutWorkNestedInput
  }

  export type WorkCreateManyInput = {
    id?: number
    subtitle: string
    title: string
    work_links: string
    user_id: number
  }

  export type WorkUpdateManyMutationInput = {
    subtitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    work_links?: StringFieldUpdateOperationsInput | string
  }

  export type WorkUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    subtitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    work_links?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type workItemsCreateInput = {
    image: string
    title: string
    sub_title: string
    description: string
    Work?: WorkCreateNestedOneWithoutWork_itemsInput
  }

  export type workItemsUncheckedCreateInput = {
    id?: number
    workId?: number | null
    image: string
    title: string
    sub_title: string
    description: string
  }

  export type workItemsUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    sub_title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    Work?: WorkUpdateOneWithoutWork_itemsNestedInput
  }

  export type workItemsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    sub_title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type workItemsCreateManyInput = {
    id?: number
    workId?: number | null
    image: string
    title: string
    sub_title: string
    description: string
  }

  export type workItemsUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    sub_title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type workItemsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workId?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    sub_title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type MoreCreateInput = {
    title: string
    sub_title: string
    links: string
    User: UserCreateNestedOneWithoutMoreInput
  }

  export type MoreUncheckedCreateInput = {
    id?: number
    title: string
    sub_title: string
    links: string
    user_id: number
  }

  export type MoreUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    sub_title?: StringFieldUpdateOperationsInput | string
    links?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutMoreNestedInput
  }

  export type MoreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    sub_title?: StringFieldUpdateOperationsInput | string
    links?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type MoreCreateManyInput = {
    id?: number
    title: string
    sub_title: string
    links: string
    user_id: number
  }

  export type MoreUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    sub_title?: StringFieldUpdateOperationsInput | string
    links?: StringFieldUpdateOperationsInput | string
  }

  export type MoreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    sub_title?: StringFieldUpdateOperationsInput | string
    links?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type HomeNullableRelationFilter = {
    is?: HomeWhereInput | null
    isNot?: HomeWhereInput | null
  }

  export type AboutNullableRelationFilter = {
    is?: AboutWhereInput | null
    isNot?: AboutWhereInput | null
  }

  export type LanguagesNullableRelationFilter = {
    is?: LanguagesWhereInput | null
    isNot?: LanguagesWhereInput | null
  }

  export type WorkNullableRelationFilter = {
    is?: WorkWhereInput | null
    isNot?: WorkWhereInput | null
  }

  export type MoreNullableRelationFilter = {
    is?: MoreWhereInput | null
    isNot?: MoreWhereInput | null
  }

  export type WhyMeNullableRelationFilter = {
    is?: whyMeWhereInput | null
    isNot?: whyMeWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    image?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    image?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    image?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type HomeCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    logo_name?: SortOrder
    image?: SortOrder
    title?: SortOrder
    description?: SortOrder
    copy_email?: SortOrder
  }

  export type HomeAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type HomeMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    logo_name?: SortOrder
    image?: SortOrder
    title?: SortOrder
    description?: SortOrder
    copy_email?: SortOrder
  }

  export type HomeMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    logo_name?: SortOrder
    image?: SortOrder
    title?: SortOrder
    description?: SortOrder
    copy_email?: SortOrder
  }

  export type HomeSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type AboutMeListRelationFilter = {
    every?: AboutMeWhereInput
    some?: AboutMeWhereInput
    none?: AboutMeWhereInput
  }

  export type AboutMeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AboutCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    sub_title?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
  }

  export type AboutAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type AboutMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    sub_title?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
  }

  export type AboutMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    sub_title?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
  }

  export type AboutSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AboutMeCountOrderByAggregateInput = {
    id?: SortOrder
    about_id?: SortOrder
    about_me_title?: SortOrder
    about_me_description?: SortOrder
  }

  export type AboutMeAvgOrderByAggregateInput = {
    id?: SortOrder
    about_id?: SortOrder
  }

  export type AboutMeMaxOrderByAggregateInput = {
    id?: SortOrder
    about_id?: SortOrder
    about_me_title?: SortOrder
    about_me_description?: SortOrder
  }

  export type AboutMeMinOrderByAggregateInput = {
    id?: SortOrder
    about_id?: SortOrder
    about_me_title?: SortOrder
    about_me_description?: SortOrder
  }

  export type AboutMeSumOrderByAggregateInput = {
    id?: SortOrder
    about_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type LanguagesItemListRelationFilter = {
    every?: LanguagesItemWhereInput
    some?: LanguagesItemWhereInput
    none?: LanguagesItemWhereInput
  }

  export type LanguagesItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LanguagesCountOrderByAggregateInput = {
    id?: SortOrder
    subTitle?: SortOrder
    title?: SortOrder
    user_id?: SortOrder
  }

  export type LanguagesAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type LanguagesMaxOrderByAggregateInput = {
    id?: SortOrder
    subTitle?: SortOrder
    title?: SortOrder
    user_id?: SortOrder
  }

  export type LanguagesMinOrderByAggregateInput = {
    id?: SortOrder
    subTitle?: SortOrder
    title?: SortOrder
    user_id?: SortOrder
  }

  export type LanguagesSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type LanguagesItemCountOrderByAggregateInput = {
    id?: SortOrder
    languages_id?: SortOrder
    image?: SortOrder
    language_name?: SortOrder
  }

  export type LanguagesItemAvgOrderByAggregateInput = {
    id?: SortOrder
    languages_id?: SortOrder
  }

  export type LanguagesItemMaxOrderByAggregateInput = {
    id?: SortOrder
    languages_id?: SortOrder
    image?: SortOrder
    language_name?: SortOrder
  }

  export type LanguagesItemMinOrderByAggregateInput = {
    id?: SortOrder
    languages_id?: SortOrder
    image?: SortOrder
    language_name?: SortOrder
  }

  export type LanguagesItemSumOrderByAggregateInput = {
    id?: SortOrder
    languages_id?: SortOrder
  }

  export type WhyMeItemsListRelationFilter = {
    every?: whyMeItemsWhereInput
    some?: whyMeItemsWhereInput
    none?: whyMeItemsWhereInput
  }

  export type whyMeItemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type whyMeCountOrderByAggregateInput = {
    id?: SortOrder
    subTitle?: SortOrder
    title?: SortOrder
    user_id?: SortOrder
  }

  export type whyMeAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type whyMeMaxOrderByAggregateInput = {
    id?: SortOrder
    subTitle?: SortOrder
    title?: SortOrder
    user_id?: SortOrder
  }

  export type whyMeMinOrderByAggregateInput = {
    id?: SortOrder
    subTitle?: SortOrder
    title?: SortOrder
    user_id?: SortOrder
  }

  export type whyMeSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type whyMeItemsCountOrderByAggregateInput = {
    id?: SortOrder
    why_me_id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    description?: SortOrder
  }

  export type whyMeItemsAvgOrderByAggregateInput = {
    id?: SortOrder
    why_me_id?: SortOrder
  }

  export type whyMeItemsMaxOrderByAggregateInput = {
    id?: SortOrder
    why_me_id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    description?: SortOrder
  }

  export type whyMeItemsMinOrderByAggregateInput = {
    id?: SortOrder
    why_me_id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    description?: SortOrder
  }

  export type whyMeItemsSumOrderByAggregateInput = {
    id?: SortOrder
    why_me_id?: SortOrder
  }

  export type WorkItemsListRelationFilter = {
    every?: workItemsWhereInput
    some?: workItemsWhereInput
    none?: workItemsWhereInput
  }

  export type workItemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkCountOrderByAggregateInput = {
    id?: SortOrder
    subtitle?: SortOrder
    title?: SortOrder
    work_links?: SortOrder
    user_id?: SortOrder
  }

  export type WorkAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type WorkMaxOrderByAggregateInput = {
    id?: SortOrder
    subtitle?: SortOrder
    title?: SortOrder
    work_links?: SortOrder
    user_id?: SortOrder
  }

  export type WorkMinOrderByAggregateInput = {
    id?: SortOrder
    subtitle?: SortOrder
    title?: SortOrder
    work_links?: SortOrder
    user_id?: SortOrder
  }

  export type WorkSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type workItemsCountOrderByAggregateInput = {
    id?: SortOrder
    workId?: SortOrder
    image?: SortOrder
    title?: SortOrder
    sub_title?: SortOrder
    description?: SortOrder
  }

  export type workItemsAvgOrderByAggregateInput = {
    id?: SortOrder
    workId?: SortOrder
  }

  export type workItemsMaxOrderByAggregateInput = {
    id?: SortOrder
    workId?: SortOrder
    image?: SortOrder
    title?: SortOrder
    sub_title?: SortOrder
    description?: SortOrder
  }

  export type workItemsMinOrderByAggregateInput = {
    id?: SortOrder
    workId?: SortOrder
    image?: SortOrder
    title?: SortOrder
    sub_title?: SortOrder
    description?: SortOrder
  }

  export type workItemsSumOrderByAggregateInput = {
    id?: SortOrder
    workId?: SortOrder
  }

  export type MoreCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    sub_title?: SortOrder
    links?: SortOrder
    user_id?: SortOrder
  }

  export type MoreAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type MoreMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    sub_title?: SortOrder
    links?: SortOrder
    user_id?: SortOrder
  }

  export type MoreMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    sub_title?: SortOrder
    links?: SortOrder
    user_id?: SortOrder
  }

  export type MoreSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type HomeCreateNestedOneWithoutUserInput = {
    create?: XOR<HomeCreateWithoutUserInput, HomeUncheckedCreateWithoutUserInput>
    connectOrCreate?: HomeCreateOrConnectWithoutUserInput
    connect?: HomeWhereUniqueInput
  }

  export type AboutCreateNestedOneWithoutUserInput = {
    create?: XOR<AboutCreateWithoutUserInput, AboutUncheckedCreateWithoutUserInput>
    connectOrCreate?: AboutCreateOrConnectWithoutUserInput
    connect?: AboutWhereUniqueInput
  }

  export type LanguagesCreateNestedOneWithoutUserInput = {
    create?: XOR<LanguagesCreateWithoutUserInput, LanguagesUncheckedCreateWithoutUserInput>
    connectOrCreate?: LanguagesCreateOrConnectWithoutUserInput
    connect?: LanguagesWhereUniqueInput
  }

  export type WorkCreateNestedOneWithoutUserInput = {
    create?: XOR<WorkCreateWithoutUserInput, WorkUncheckedCreateWithoutUserInput>
    connectOrCreate?: WorkCreateOrConnectWithoutUserInput
    connect?: WorkWhereUniqueInput
  }

  export type MoreCreateNestedOneWithoutUserInput = {
    create?: XOR<MoreCreateWithoutUserInput, MoreUncheckedCreateWithoutUserInput>
    connectOrCreate?: MoreCreateOrConnectWithoutUserInput
    connect?: MoreWhereUniqueInput
  }

  export type whyMeCreateNestedOneWithoutUserInput = {
    create?: XOR<whyMeCreateWithoutUserInput, whyMeUncheckedCreateWithoutUserInput>
    connectOrCreate?: whyMeCreateOrConnectWithoutUserInput
    connect?: whyMeWhereUniqueInput
  }

  export type HomeUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<HomeCreateWithoutUserInput, HomeUncheckedCreateWithoutUserInput>
    connectOrCreate?: HomeCreateOrConnectWithoutUserInput
    connect?: HomeWhereUniqueInput
  }

  export type AboutUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<AboutCreateWithoutUserInput, AboutUncheckedCreateWithoutUserInput>
    connectOrCreate?: AboutCreateOrConnectWithoutUserInput
    connect?: AboutWhereUniqueInput
  }

  export type LanguagesUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<LanguagesCreateWithoutUserInput, LanguagesUncheckedCreateWithoutUserInput>
    connectOrCreate?: LanguagesCreateOrConnectWithoutUserInput
    connect?: LanguagesWhereUniqueInput
  }

  export type WorkUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<WorkCreateWithoutUserInput, WorkUncheckedCreateWithoutUserInput>
    connectOrCreate?: WorkCreateOrConnectWithoutUserInput
    connect?: WorkWhereUniqueInput
  }

  export type MoreUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<MoreCreateWithoutUserInput, MoreUncheckedCreateWithoutUserInput>
    connectOrCreate?: MoreCreateOrConnectWithoutUserInput
    connect?: MoreWhereUniqueInput
  }

  export type whyMeUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<whyMeCreateWithoutUserInput, whyMeUncheckedCreateWithoutUserInput>
    connectOrCreate?: whyMeCreateOrConnectWithoutUserInput
    connect?: whyMeWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type HomeUpdateOneWithoutUserNestedInput = {
    create?: XOR<HomeCreateWithoutUserInput, HomeUncheckedCreateWithoutUserInput>
    connectOrCreate?: HomeCreateOrConnectWithoutUserInput
    upsert?: HomeUpsertWithoutUserInput
    disconnect?: HomeWhereInput | boolean
    delete?: HomeWhereInput | boolean
    connect?: HomeWhereUniqueInput
    update?: XOR<XOR<HomeUpdateToOneWithWhereWithoutUserInput, HomeUpdateWithoutUserInput>, HomeUncheckedUpdateWithoutUserInput>
  }

  export type AboutUpdateOneWithoutUserNestedInput = {
    create?: XOR<AboutCreateWithoutUserInput, AboutUncheckedCreateWithoutUserInput>
    connectOrCreate?: AboutCreateOrConnectWithoutUserInput
    upsert?: AboutUpsertWithoutUserInput
    disconnect?: AboutWhereInput | boolean
    delete?: AboutWhereInput | boolean
    connect?: AboutWhereUniqueInput
    update?: XOR<XOR<AboutUpdateToOneWithWhereWithoutUserInput, AboutUpdateWithoutUserInput>, AboutUncheckedUpdateWithoutUserInput>
  }

  export type LanguagesUpdateOneWithoutUserNestedInput = {
    create?: XOR<LanguagesCreateWithoutUserInput, LanguagesUncheckedCreateWithoutUserInput>
    connectOrCreate?: LanguagesCreateOrConnectWithoutUserInput
    upsert?: LanguagesUpsertWithoutUserInput
    disconnect?: LanguagesWhereInput | boolean
    delete?: LanguagesWhereInput | boolean
    connect?: LanguagesWhereUniqueInput
    update?: XOR<XOR<LanguagesUpdateToOneWithWhereWithoutUserInput, LanguagesUpdateWithoutUserInput>, LanguagesUncheckedUpdateWithoutUserInput>
  }

  export type WorkUpdateOneWithoutUserNestedInput = {
    create?: XOR<WorkCreateWithoutUserInput, WorkUncheckedCreateWithoutUserInput>
    connectOrCreate?: WorkCreateOrConnectWithoutUserInput
    upsert?: WorkUpsertWithoutUserInput
    disconnect?: WorkWhereInput | boolean
    delete?: WorkWhereInput | boolean
    connect?: WorkWhereUniqueInput
    update?: XOR<XOR<WorkUpdateToOneWithWhereWithoutUserInput, WorkUpdateWithoutUserInput>, WorkUncheckedUpdateWithoutUserInput>
  }

  export type MoreUpdateOneWithoutUserNestedInput = {
    create?: XOR<MoreCreateWithoutUserInput, MoreUncheckedCreateWithoutUserInput>
    connectOrCreate?: MoreCreateOrConnectWithoutUserInput
    upsert?: MoreUpsertWithoutUserInput
    disconnect?: MoreWhereInput | boolean
    delete?: MoreWhereInput | boolean
    connect?: MoreWhereUniqueInput
    update?: XOR<XOR<MoreUpdateToOneWithWhereWithoutUserInput, MoreUpdateWithoutUserInput>, MoreUncheckedUpdateWithoutUserInput>
  }

  export type whyMeUpdateOneWithoutUserNestedInput = {
    create?: XOR<whyMeCreateWithoutUserInput, whyMeUncheckedCreateWithoutUserInput>
    connectOrCreate?: whyMeCreateOrConnectWithoutUserInput
    upsert?: whyMeUpsertWithoutUserInput
    disconnect?: whyMeWhereInput | boolean
    delete?: whyMeWhereInput | boolean
    connect?: whyMeWhereUniqueInput
    update?: XOR<XOR<whyMeUpdateToOneWithWhereWithoutUserInput, whyMeUpdateWithoutUserInput>, whyMeUncheckedUpdateWithoutUserInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type HomeUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<HomeCreateWithoutUserInput, HomeUncheckedCreateWithoutUserInput>
    connectOrCreate?: HomeCreateOrConnectWithoutUserInput
    upsert?: HomeUpsertWithoutUserInput
    disconnect?: HomeWhereInput | boolean
    delete?: HomeWhereInput | boolean
    connect?: HomeWhereUniqueInput
    update?: XOR<XOR<HomeUpdateToOneWithWhereWithoutUserInput, HomeUpdateWithoutUserInput>, HomeUncheckedUpdateWithoutUserInput>
  }

  export type AboutUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<AboutCreateWithoutUserInput, AboutUncheckedCreateWithoutUserInput>
    connectOrCreate?: AboutCreateOrConnectWithoutUserInput
    upsert?: AboutUpsertWithoutUserInput
    disconnect?: AboutWhereInput | boolean
    delete?: AboutWhereInput | boolean
    connect?: AboutWhereUniqueInput
    update?: XOR<XOR<AboutUpdateToOneWithWhereWithoutUserInput, AboutUpdateWithoutUserInput>, AboutUncheckedUpdateWithoutUserInput>
  }

  export type LanguagesUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<LanguagesCreateWithoutUserInput, LanguagesUncheckedCreateWithoutUserInput>
    connectOrCreate?: LanguagesCreateOrConnectWithoutUserInput
    upsert?: LanguagesUpsertWithoutUserInput
    disconnect?: LanguagesWhereInput | boolean
    delete?: LanguagesWhereInput | boolean
    connect?: LanguagesWhereUniqueInput
    update?: XOR<XOR<LanguagesUpdateToOneWithWhereWithoutUserInput, LanguagesUpdateWithoutUserInput>, LanguagesUncheckedUpdateWithoutUserInput>
  }

  export type WorkUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<WorkCreateWithoutUserInput, WorkUncheckedCreateWithoutUserInput>
    connectOrCreate?: WorkCreateOrConnectWithoutUserInput
    upsert?: WorkUpsertWithoutUserInput
    disconnect?: WorkWhereInput | boolean
    delete?: WorkWhereInput | boolean
    connect?: WorkWhereUniqueInput
    update?: XOR<XOR<WorkUpdateToOneWithWhereWithoutUserInput, WorkUpdateWithoutUserInput>, WorkUncheckedUpdateWithoutUserInput>
  }

  export type MoreUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<MoreCreateWithoutUserInput, MoreUncheckedCreateWithoutUserInput>
    connectOrCreate?: MoreCreateOrConnectWithoutUserInput
    upsert?: MoreUpsertWithoutUserInput
    disconnect?: MoreWhereInput | boolean
    delete?: MoreWhereInput | boolean
    connect?: MoreWhereUniqueInput
    update?: XOR<XOR<MoreUpdateToOneWithWhereWithoutUserInput, MoreUpdateWithoutUserInput>, MoreUncheckedUpdateWithoutUserInput>
  }

  export type whyMeUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<whyMeCreateWithoutUserInput, whyMeUncheckedCreateWithoutUserInput>
    connectOrCreate?: whyMeCreateOrConnectWithoutUserInput
    upsert?: whyMeUpsertWithoutUserInput
    disconnect?: whyMeWhereInput | boolean
    delete?: whyMeWhereInput | boolean
    connect?: whyMeWhereUniqueInput
    update?: XOR<XOR<whyMeUpdateToOneWithWhereWithoutUserInput, whyMeUpdateWithoutUserInput>, whyMeUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutHomeInput = {
    create?: XOR<UserCreateWithoutHomeInput, UserUncheckedCreateWithoutHomeInput>
    connectOrCreate?: UserCreateOrConnectWithoutHomeInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutHomeNestedInput = {
    create?: XOR<UserCreateWithoutHomeInput, UserUncheckedCreateWithoutHomeInput>
    connectOrCreate?: UserCreateOrConnectWithoutHomeInput
    upsert?: UserUpsertWithoutHomeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHomeInput, UserUpdateWithoutHomeInput>, UserUncheckedUpdateWithoutHomeInput>
  }

  export type UserCreateNestedOneWithoutAboutInput = {
    create?: XOR<UserCreateWithoutAboutInput, UserUncheckedCreateWithoutAboutInput>
    connectOrCreate?: UserCreateOrConnectWithoutAboutInput
    connect?: UserWhereUniqueInput
  }

  export type AboutMeCreateNestedManyWithoutAboutInput = {
    create?: XOR<AboutMeCreateWithoutAboutInput, AboutMeUncheckedCreateWithoutAboutInput> | AboutMeCreateWithoutAboutInput[] | AboutMeUncheckedCreateWithoutAboutInput[]
    connectOrCreate?: AboutMeCreateOrConnectWithoutAboutInput | AboutMeCreateOrConnectWithoutAboutInput[]
    createMany?: AboutMeCreateManyAboutInputEnvelope
    connect?: AboutMeWhereUniqueInput | AboutMeWhereUniqueInput[]
  }

  export type AboutMeUncheckedCreateNestedManyWithoutAboutInput = {
    create?: XOR<AboutMeCreateWithoutAboutInput, AboutMeUncheckedCreateWithoutAboutInput> | AboutMeCreateWithoutAboutInput[] | AboutMeUncheckedCreateWithoutAboutInput[]
    connectOrCreate?: AboutMeCreateOrConnectWithoutAboutInput | AboutMeCreateOrConnectWithoutAboutInput[]
    createMany?: AboutMeCreateManyAboutInputEnvelope
    connect?: AboutMeWhereUniqueInput | AboutMeWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutAboutNestedInput = {
    create?: XOR<UserCreateWithoutAboutInput, UserUncheckedCreateWithoutAboutInput>
    connectOrCreate?: UserCreateOrConnectWithoutAboutInput
    upsert?: UserUpsertWithoutAboutInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAboutInput, UserUpdateWithoutAboutInput>, UserUncheckedUpdateWithoutAboutInput>
  }

  export type AboutMeUpdateManyWithoutAboutNestedInput = {
    create?: XOR<AboutMeCreateWithoutAboutInput, AboutMeUncheckedCreateWithoutAboutInput> | AboutMeCreateWithoutAboutInput[] | AboutMeUncheckedCreateWithoutAboutInput[]
    connectOrCreate?: AboutMeCreateOrConnectWithoutAboutInput | AboutMeCreateOrConnectWithoutAboutInput[]
    upsert?: AboutMeUpsertWithWhereUniqueWithoutAboutInput | AboutMeUpsertWithWhereUniqueWithoutAboutInput[]
    createMany?: AboutMeCreateManyAboutInputEnvelope
    set?: AboutMeWhereUniqueInput | AboutMeWhereUniqueInput[]
    disconnect?: AboutMeWhereUniqueInput | AboutMeWhereUniqueInput[]
    delete?: AboutMeWhereUniqueInput | AboutMeWhereUniqueInput[]
    connect?: AboutMeWhereUniqueInput | AboutMeWhereUniqueInput[]
    update?: AboutMeUpdateWithWhereUniqueWithoutAboutInput | AboutMeUpdateWithWhereUniqueWithoutAboutInput[]
    updateMany?: AboutMeUpdateManyWithWhereWithoutAboutInput | AboutMeUpdateManyWithWhereWithoutAboutInput[]
    deleteMany?: AboutMeScalarWhereInput | AboutMeScalarWhereInput[]
  }

  export type AboutMeUncheckedUpdateManyWithoutAboutNestedInput = {
    create?: XOR<AboutMeCreateWithoutAboutInput, AboutMeUncheckedCreateWithoutAboutInput> | AboutMeCreateWithoutAboutInput[] | AboutMeUncheckedCreateWithoutAboutInput[]
    connectOrCreate?: AboutMeCreateOrConnectWithoutAboutInput | AboutMeCreateOrConnectWithoutAboutInput[]
    upsert?: AboutMeUpsertWithWhereUniqueWithoutAboutInput | AboutMeUpsertWithWhereUniqueWithoutAboutInput[]
    createMany?: AboutMeCreateManyAboutInputEnvelope
    set?: AboutMeWhereUniqueInput | AboutMeWhereUniqueInput[]
    disconnect?: AboutMeWhereUniqueInput | AboutMeWhereUniqueInput[]
    delete?: AboutMeWhereUniqueInput | AboutMeWhereUniqueInput[]
    connect?: AboutMeWhereUniqueInput | AboutMeWhereUniqueInput[]
    update?: AboutMeUpdateWithWhereUniqueWithoutAboutInput | AboutMeUpdateWithWhereUniqueWithoutAboutInput[]
    updateMany?: AboutMeUpdateManyWithWhereWithoutAboutInput | AboutMeUpdateManyWithWhereWithoutAboutInput[]
    deleteMany?: AboutMeScalarWhereInput | AboutMeScalarWhereInput[]
  }

  export type AboutCreateNestedOneWithoutAbout_meInput = {
    create?: XOR<AboutCreateWithoutAbout_meInput, AboutUncheckedCreateWithoutAbout_meInput>
    connectOrCreate?: AboutCreateOrConnectWithoutAbout_meInput
    connect?: AboutWhereUniqueInput
  }

  export type AboutUpdateOneWithoutAbout_meNestedInput = {
    create?: XOR<AboutCreateWithoutAbout_meInput, AboutUncheckedCreateWithoutAbout_meInput>
    connectOrCreate?: AboutCreateOrConnectWithoutAbout_meInput
    upsert?: AboutUpsertWithoutAbout_meInput
    disconnect?: AboutWhereInput | boolean
    delete?: AboutWhereInput | boolean
    connect?: AboutWhereUniqueInput
    update?: XOR<XOR<AboutUpdateToOneWithWhereWithoutAbout_meInput, AboutUpdateWithoutAbout_meInput>, AboutUncheckedUpdateWithoutAbout_meInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LanguagesItemCreateNestedManyWithoutLanguagesInput = {
    create?: XOR<LanguagesItemCreateWithoutLanguagesInput, LanguagesItemUncheckedCreateWithoutLanguagesInput> | LanguagesItemCreateWithoutLanguagesInput[] | LanguagesItemUncheckedCreateWithoutLanguagesInput[]
    connectOrCreate?: LanguagesItemCreateOrConnectWithoutLanguagesInput | LanguagesItemCreateOrConnectWithoutLanguagesInput[]
    createMany?: LanguagesItemCreateManyLanguagesInputEnvelope
    connect?: LanguagesItemWhereUniqueInput | LanguagesItemWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutLanguagesInput = {
    create?: XOR<UserCreateWithoutLanguagesInput, UserUncheckedCreateWithoutLanguagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLanguagesInput
    connect?: UserWhereUniqueInput
  }

  export type LanguagesItemUncheckedCreateNestedManyWithoutLanguagesInput = {
    create?: XOR<LanguagesItemCreateWithoutLanguagesInput, LanguagesItemUncheckedCreateWithoutLanguagesInput> | LanguagesItemCreateWithoutLanguagesInput[] | LanguagesItemUncheckedCreateWithoutLanguagesInput[]
    connectOrCreate?: LanguagesItemCreateOrConnectWithoutLanguagesInput | LanguagesItemCreateOrConnectWithoutLanguagesInput[]
    createMany?: LanguagesItemCreateManyLanguagesInputEnvelope
    connect?: LanguagesItemWhereUniqueInput | LanguagesItemWhereUniqueInput[]
  }

  export type LanguagesItemUpdateManyWithoutLanguagesNestedInput = {
    create?: XOR<LanguagesItemCreateWithoutLanguagesInput, LanguagesItemUncheckedCreateWithoutLanguagesInput> | LanguagesItemCreateWithoutLanguagesInput[] | LanguagesItemUncheckedCreateWithoutLanguagesInput[]
    connectOrCreate?: LanguagesItemCreateOrConnectWithoutLanguagesInput | LanguagesItemCreateOrConnectWithoutLanguagesInput[]
    upsert?: LanguagesItemUpsertWithWhereUniqueWithoutLanguagesInput | LanguagesItemUpsertWithWhereUniqueWithoutLanguagesInput[]
    createMany?: LanguagesItemCreateManyLanguagesInputEnvelope
    set?: LanguagesItemWhereUniqueInput | LanguagesItemWhereUniqueInput[]
    disconnect?: LanguagesItemWhereUniqueInput | LanguagesItemWhereUniqueInput[]
    delete?: LanguagesItemWhereUniqueInput | LanguagesItemWhereUniqueInput[]
    connect?: LanguagesItemWhereUniqueInput | LanguagesItemWhereUniqueInput[]
    update?: LanguagesItemUpdateWithWhereUniqueWithoutLanguagesInput | LanguagesItemUpdateWithWhereUniqueWithoutLanguagesInput[]
    updateMany?: LanguagesItemUpdateManyWithWhereWithoutLanguagesInput | LanguagesItemUpdateManyWithWhereWithoutLanguagesInput[]
    deleteMany?: LanguagesItemScalarWhereInput | LanguagesItemScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutLanguagesNestedInput = {
    create?: XOR<UserCreateWithoutLanguagesInput, UserUncheckedCreateWithoutLanguagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLanguagesInput
    upsert?: UserUpsertWithoutLanguagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLanguagesInput, UserUpdateWithoutLanguagesInput>, UserUncheckedUpdateWithoutLanguagesInput>
  }

  export type LanguagesItemUncheckedUpdateManyWithoutLanguagesNestedInput = {
    create?: XOR<LanguagesItemCreateWithoutLanguagesInput, LanguagesItemUncheckedCreateWithoutLanguagesInput> | LanguagesItemCreateWithoutLanguagesInput[] | LanguagesItemUncheckedCreateWithoutLanguagesInput[]
    connectOrCreate?: LanguagesItemCreateOrConnectWithoutLanguagesInput | LanguagesItemCreateOrConnectWithoutLanguagesInput[]
    upsert?: LanguagesItemUpsertWithWhereUniqueWithoutLanguagesInput | LanguagesItemUpsertWithWhereUniqueWithoutLanguagesInput[]
    createMany?: LanguagesItemCreateManyLanguagesInputEnvelope
    set?: LanguagesItemWhereUniqueInput | LanguagesItemWhereUniqueInput[]
    disconnect?: LanguagesItemWhereUniqueInput | LanguagesItemWhereUniqueInput[]
    delete?: LanguagesItemWhereUniqueInput | LanguagesItemWhereUniqueInput[]
    connect?: LanguagesItemWhereUniqueInput | LanguagesItemWhereUniqueInput[]
    update?: LanguagesItemUpdateWithWhereUniqueWithoutLanguagesInput | LanguagesItemUpdateWithWhereUniqueWithoutLanguagesInput[]
    updateMany?: LanguagesItemUpdateManyWithWhereWithoutLanguagesInput | LanguagesItemUpdateManyWithWhereWithoutLanguagesInput[]
    deleteMany?: LanguagesItemScalarWhereInput | LanguagesItemScalarWhereInput[]
  }

  export type LanguagesCreateNestedOneWithoutLanguage_itemsInput = {
    create?: XOR<LanguagesCreateWithoutLanguage_itemsInput, LanguagesUncheckedCreateWithoutLanguage_itemsInput>
    connectOrCreate?: LanguagesCreateOrConnectWithoutLanguage_itemsInput
    connect?: LanguagesWhereUniqueInput
  }

  export type LanguagesUpdateOneWithoutLanguage_itemsNestedInput = {
    create?: XOR<LanguagesCreateWithoutLanguage_itemsInput, LanguagesUncheckedCreateWithoutLanguage_itemsInput>
    connectOrCreate?: LanguagesCreateOrConnectWithoutLanguage_itemsInput
    upsert?: LanguagesUpsertWithoutLanguage_itemsInput
    disconnect?: LanguagesWhereInput | boolean
    delete?: LanguagesWhereInput | boolean
    connect?: LanguagesWhereUniqueInput
    update?: XOR<XOR<LanguagesUpdateToOneWithWhereWithoutLanguage_itemsInput, LanguagesUpdateWithoutLanguage_itemsInput>, LanguagesUncheckedUpdateWithoutLanguage_itemsInput>
  }

  export type whyMeItemsCreateNestedManyWithoutWhyMeInput = {
    create?: XOR<whyMeItemsCreateWithoutWhyMeInput, whyMeItemsUncheckedCreateWithoutWhyMeInput> | whyMeItemsCreateWithoutWhyMeInput[] | whyMeItemsUncheckedCreateWithoutWhyMeInput[]
    connectOrCreate?: whyMeItemsCreateOrConnectWithoutWhyMeInput | whyMeItemsCreateOrConnectWithoutWhyMeInput[]
    createMany?: whyMeItemsCreateManyWhyMeInputEnvelope
    connect?: whyMeItemsWhereUniqueInput | whyMeItemsWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutWhyMeInput = {
    create?: XOR<UserCreateWithoutWhyMeInput, UserUncheckedCreateWithoutWhyMeInput>
    connectOrCreate?: UserCreateOrConnectWithoutWhyMeInput
    connect?: UserWhereUniqueInput
  }

  export type whyMeItemsUncheckedCreateNestedManyWithoutWhyMeInput = {
    create?: XOR<whyMeItemsCreateWithoutWhyMeInput, whyMeItemsUncheckedCreateWithoutWhyMeInput> | whyMeItemsCreateWithoutWhyMeInput[] | whyMeItemsUncheckedCreateWithoutWhyMeInput[]
    connectOrCreate?: whyMeItemsCreateOrConnectWithoutWhyMeInput | whyMeItemsCreateOrConnectWithoutWhyMeInput[]
    createMany?: whyMeItemsCreateManyWhyMeInputEnvelope
    connect?: whyMeItemsWhereUniqueInput | whyMeItemsWhereUniqueInput[]
  }

  export type whyMeItemsUpdateManyWithoutWhyMeNestedInput = {
    create?: XOR<whyMeItemsCreateWithoutWhyMeInput, whyMeItemsUncheckedCreateWithoutWhyMeInput> | whyMeItemsCreateWithoutWhyMeInput[] | whyMeItemsUncheckedCreateWithoutWhyMeInput[]
    connectOrCreate?: whyMeItemsCreateOrConnectWithoutWhyMeInput | whyMeItemsCreateOrConnectWithoutWhyMeInput[]
    upsert?: whyMeItemsUpsertWithWhereUniqueWithoutWhyMeInput | whyMeItemsUpsertWithWhereUniqueWithoutWhyMeInput[]
    createMany?: whyMeItemsCreateManyWhyMeInputEnvelope
    set?: whyMeItemsWhereUniqueInput | whyMeItemsWhereUniqueInput[]
    disconnect?: whyMeItemsWhereUniqueInput | whyMeItemsWhereUniqueInput[]
    delete?: whyMeItemsWhereUniqueInput | whyMeItemsWhereUniqueInput[]
    connect?: whyMeItemsWhereUniqueInput | whyMeItemsWhereUniqueInput[]
    update?: whyMeItemsUpdateWithWhereUniqueWithoutWhyMeInput | whyMeItemsUpdateWithWhereUniqueWithoutWhyMeInput[]
    updateMany?: whyMeItemsUpdateManyWithWhereWithoutWhyMeInput | whyMeItemsUpdateManyWithWhereWithoutWhyMeInput[]
    deleteMany?: whyMeItemsScalarWhereInput | whyMeItemsScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutWhyMeNestedInput = {
    create?: XOR<UserCreateWithoutWhyMeInput, UserUncheckedCreateWithoutWhyMeInput>
    connectOrCreate?: UserCreateOrConnectWithoutWhyMeInput
    upsert?: UserUpsertWithoutWhyMeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWhyMeInput, UserUpdateWithoutWhyMeInput>, UserUncheckedUpdateWithoutWhyMeInput>
  }

  export type whyMeItemsUncheckedUpdateManyWithoutWhyMeNestedInput = {
    create?: XOR<whyMeItemsCreateWithoutWhyMeInput, whyMeItemsUncheckedCreateWithoutWhyMeInput> | whyMeItemsCreateWithoutWhyMeInput[] | whyMeItemsUncheckedCreateWithoutWhyMeInput[]
    connectOrCreate?: whyMeItemsCreateOrConnectWithoutWhyMeInput | whyMeItemsCreateOrConnectWithoutWhyMeInput[]
    upsert?: whyMeItemsUpsertWithWhereUniqueWithoutWhyMeInput | whyMeItemsUpsertWithWhereUniqueWithoutWhyMeInput[]
    createMany?: whyMeItemsCreateManyWhyMeInputEnvelope
    set?: whyMeItemsWhereUniqueInput | whyMeItemsWhereUniqueInput[]
    disconnect?: whyMeItemsWhereUniqueInput | whyMeItemsWhereUniqueInput[]
    delete?: whyMeItemsWhereUniqueInput | whyMeItemsWhereUniqueInput[]
    connect?: whyMeItemsWhereUniqueInput | whyMeItemsWhereUniqueInput[]
    update?: whyMeItemsUpdateWithWhereUniqueWithoutWhyMeInput | whyMeItemsUpdateWithWhereUniqueWithoutWhyMeInput[]
    updateMany?: whyMeItemsUpdateManyWithWhereWithoutWhyMeInput | whyMeItemsUpdateManyWithWhereWithoutWhyMeInput[]
    deleteMany?: whyMeItemsScalarWhereInput | whyMeItemsScalarWhereInput[]
  }

  export type whyMeCreateNestedOneWithoutWhy_me_itemsInput = {
    create?: XOR<whyMeCreateWithoutWhy_me_itemsInput, whyMeUncheckedCreateWithoutWhy_me_itemsInput>
    connectOrCreate?: whyMeCreateOrConnectWithoutWhy_me_itemsInput
    connect?: whyMeWhereUniqueInput
  }

  export type whyMeUpdateOneWithoutWhy_me_itemsNestedInput = {
    create?: XOR<whyMeCreateWithoutWhy_me_itemsInput, whyMeUncheckedCreateWithoutWhy_me_itemsInput>
    connectOrCreate?: whyMeCreateOrConnectWithoutWhy_me_itemsInput
    upsert?: whyMeUpsertWithoutWhy_me_itemsInput
    disconnect?: whyMeWhereInput | boolean
    delete?: whyMeWhereInput | boolean
    connect?: whyMeWhereUniqueInput
    update?: XOR<XOR<whyMeUpdateToOneWithWhereWithoutWhy_me_itemsInput, whyMeUpdateWithoutWhy_me_itemsInput>, whyMeUncheckedUpdateWithoutWhy_me_itemsInput>
  }

  export type workItemsCreateNestedManyWithoutWorkInput = {
    create?: XOR<workItemsCreateWithoutWorkInput, workItemsUncheckedCreateWithoutWorkInput> | workItemsCreateWithoutWorkInput[] | workItemsUncheckedCreateWithoutWorkInput[]
    connectOrCreate?: workItemsCreateOrConnectWithoutWorkInput | workItemsCreateOrConnectWithoutWorkInput[]
    createMany?: workItemsCreateManyWorkInputEnvelope
    connect?: workItemsWhereUniqueInput | workItemsWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutWorkInput = {
    create?: XOR<UserCreateWithoutWorkInput, UserUncheckedCreateWithoutWorkInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkInput
    connect?: UserWhereUniqueInput
  }

  export type workItemsUncheckedCreateNestedManyWithoutWorkInput = {
    create?: XOR<workItemsCreateWithoutWorkInput, workItemsUncheckedCreateWithoutWorkInput> | workItemsCreateWithoutWorkInput[] | workItemsUncheckedCreateWithoutWorkInput[]
    connectOrCreate?: workItemsCreateOrConnectWithoutWorkInput | workItemsCreateOrConnectWithoutWorkInput[]
    createMany?: workItemsCreateManyWorkInputEnvelope
    connect?: workItemsWhereUniqueInput | workItemsWhereUniqueInput[]
  }

  export type workItemsUpdateManyWithoutWorkNestedInput = {
    create?: XOR<workItemsCreateWithoutWorkInput, workItemsUncheckedCreateWithoutWorkInput> | workItemsCreateWithoutWorkInput[] | workItemsUncheckedCreateWithoutWorkInput[]
    connectOrCreate?: workItemsCreateOrConnectWithoutWorkInput | workItemsCreateOrConnectWithoutWorkInput[]
    upsert?: workItemsUpsertWithWhereUniqueWithoutWorkInput | workItemsUpsertWithWhereUniqueWithoutWorkInput[]
    createMany?: workItemsCreateManyWorkInputEnvelope
    set?: workItemsWhereUniqueInput | workItemsWhereUniqueInput[]
    disconnect?: workItemsWhereUniqueInput | workItemsWhereUniqueInput[]
    delete?: workItemsWhereUniqueInput | workItemsWhereUniqueInput[]
    connect?: workItemsWhereUniqueInput | workItemsWhereUniqueInput[]
    update?: workItemsUpdateWithWhereUniqueWithoutWorkInput | workItemsUpdateWithWhereUniqueWithoutWorkInput[]
    updateMany?: workItemsUpdateManyWithWhereWithoutWorkInput | workItemsUpdateManyWithWhereWithoutWorkInput[]
    deleteMany?: workItemsScalarWhereInput | workItemsScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutWorkNestedInput = {
    create?: XOR<UserCreateWithoutWorkInput, UserUncheckedCreateWithoutWorkInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkInput
    upsert?: UserUpsertWithoutWorkInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkInput, UserUpdateWithoutWorkInput>, UserUncheckedUpdateWithoutWorkInput>
  }

  export type workItemsUncheckedUpdateManyWithoutWorkNestedInput = {
    create?: XOR<workItemsCreateWithoutWorkInput, workItemsUncheckedCreateWithoutWorkInput> | workItemsCreateWithoutWorkInput[] | workItemsUncheckedCreateWithoutWorkInput[]
    connectOrCreate?: workItemsCreateOrConnectWithoutWorkInput | workItemsCreateOrConnectWithoutWorkInput[]
    upsert?: workItemsUpsertWithWhereUniqueWithoutWorkInput | workItemsUpsertWithWhereUniqueWithoutWorkInput[]
    createMany?: workItemsCreateManyWorkInputEnvelope
    set?: workItemsWhereUniqueInput | workItemsWhereUniqueInput[]
    disconnect?: workItemsWhereUniqueInput | workItemsWhereUniqueInput[]
    delete?: workItemsWhereUniqueInput | workItemsWhereUniqueInput[]
    connect?: workItemsWhereUniqueInput | workItemsWhereUniqueInput[]
    update?: workItemsUpdateWithWhereUniqueWithoutWorkInput | workItemsUpdateWithWhereUniqueWithoutWorkInput[]
    updateMany?: workItemsUpdateManyWithWhereWithoutWorkInput | workItemsUpdateManyWithWhereWithoutWorkInput[]
    deleteMany?: workItemsScalarWhereInput | workItemsScalarWhereInput[]
  }

  export type WorkCreateNestedOneWithoutWork_itemsInput = {
    create?: XOR<WorkCreateWithoutWork_itemsInput, WorkUncheckedCreateWithoutWork_itemsInput>
    connectOrCreate?: WorkCreateOrConnectWithoutWork_itemsInput
    connect?: WorkWhereUniqueInput
  }

  export type WorkUpdateOneWithoutWork_itemsNestedInput = {
    create?: XOR<WorkCreateWithoutWork_itemsInput, WorkUncheckedCreateWithoutWork_itemsInput>
    connectOrCreate?: WorkCreateOrConnectWithoutWork_itemsInput
    upsert?: WorkUpsertWithoutWork_itemsInput
    disconnect?: WorkWhereInput | boolean
    delete?: WorkWhereInput | boolean
    connect?: WorkWhereUniqueInput
    update?: XOR<XOR<WorkUpdateToOneWithWhereWithoutWork_itemsInput, WorkUpdateWithoutWork_itemsInput>, WorkUncheckedUpdateWithoutWork_itemsInput>
  }

  export type UserCreateNestedOneWithoutMoreInput = {
    create?: XOR<UserCreateWithoutMoreInput, UserUncheckedCreateWithoutMoreInput>
    connectOrCreate?: UserCreateOrConnectWithoutMoreInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMoreNestedInput = {
    create?: XOR<UserCreateWithoutMoreInput, UserUncheckedCreateWithoutMoreInput>
    connectOrCreate?: UserCreateOrConnectWithoutMoreInput
    upsert?: UserUpsertWithoutMoreInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMoreInput, UserUpdateWithoutMoreInput>, UserUncheckedUpdateWithoutMoreInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type HomeCreateWithoutUserInput = {
    logo_name: string
    image: string
    title: string
    description: string
    copy_email: string
  }

  export type HomeUncheckedCreateWithoutUserInput = {
    id?: number
    logo_name: string
    image: string
    title: string
    description: string
    copy_email: string
  }

  export type HomeCreateOrConnectWithoutUserInput = {
    where: HomeWhereUniqueInput
    create: XOR<HomeCreateWithoutUserInput, HomeUncheckedCreateWithoutUserInput>
  }

  export type AboutCreateWithoutUserInput = {
    sub_title: string
    title: string
    description: string
    image: string
    about_me?: AboutMeCreateNestedManyWithoutAboutInput
  }

  export type AboutUncheckedCreateWithoutUserInput = {
    id?: number
    sub_title: string
    title: string
    description: string
    image: string
    about_me?: AboutMeUncheckedCreateNestedManyWithoutAboutInput
  }

  export type AboutCreateOrConnectWithoutUserInput = {
    where: AboutWhereUniqueInput
    create: XOR<AboutCreateWithoutUserInput, AboutUncheckedCreateWithoutUserInput>
  }

  export type LanguagesCreateWithoutUserInput = {
    subTitle: string
    title: string
    language_items?: LanguagesItemCreateNestedManyWithoutLanguagesInput
  }

  export type LanguagesUncheckedCreateWithoutUserInput = {
    id?: number
    subTitle: string
    title: string
    language_items?: LanguagesItemUncheckedCreateNestedManyWithoutLanguagesInput
  }

  export type LanguagesCreateOrConnectWithoutUserInput = {
    where: LanguagesWhereUniqueInput
    create: XOR<LanguagesCreateWithoutUserInput, LanguagesUncheckedCreateWithoutUserInput>
  }

  export type WorkCreateWithoutUserInput = {
    subtitle: string
    title: string
    work_links: string
    work_items?: workItemsCreateNestedManyWithoutWorkInput
  }

  export type WorkUncheckedCreateWithoutUserInput = {
    id?: number
    subtitle: string
    title: string
    work_links: string
    work_items?: workItemsUncheckedCreateNestedManyWithoutWorkInput
  }

  export type WorkCreateOrConnectWithoutUserInput = {
    where: WorkWhereUniqueInput
    create: XOR<WorkCreateWithoutUserInput, WorkUncheckedCreateWithoutUserInput>
  }

  export type MoreCreateWithoutUserInput = {
    title: string
    sub_title: string
    links: string
  }

  export type MoreUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    sub_title: string
    links: string
  }

  export type MoreCreateOrConnectWithoutUserInput = {
    where: MoreWhereUniqueInput
    create: XOR<MoreCreateWithoutUserInput, MoreUncheckedCreateWithoutUserInput>
  }

  export type whyMeCreateWithoutUserInput = {
    subTitle: string
    title: string
    why_me_items?: whyMeItemsCreateNestedManyWithoutWhyMeInput
  }

  export type whyMeUncheckedCreateWithoutUserInput = {
    id?: number
    subTitle: string
    title: string
    why_me_items?: whyMeItemsUncheckedCreateNestedManyWithoutWhyMeInput
  }

  export type whyMeCreateOrConnectWithoutUserInput = {
    where: whyMeWhereUniqueInput
    create: XOR<whyMeCreateWithoutUserInput, whyMeUncheckedCreateWithoutUserInput>
  }

  export type HomeUpsertWithoutUserInput = {
    update: XOR<HomeUpdateWithoutUserInput, HomeUncheckedUpdateWithoutUserInput>
    create: XOR<HomeCreateWithoutUserInput, HomeUncheckedCreateWithoutUserInput>
    where?: HomeWhereInput
  }

  export type HomeUpdateToOneWithWhereWithoutUserInput = {
    where?: HomeWhereInput
    data: XOR<HomeUpdateWithoutUserInput, HomeUncheckedUpdateWithoutUserInput>
  }

  export type HomeUpdateWithoutUserInput = {
    logo_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    copy_email?: StringFieldUpdateOperationsInput | string
  }

  export type HomeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    logo_name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    copy_email?: StringFieldUpdateOperationsInput | string
  }

  export type AboutUpsertWithoutUserInput = {
    update: XOR<AboutUpdateWithoutUserInput, AboutUncheckedUpdateWithoutUserInput>
    create: XOR<AboutCreateWithoutUserInput, AboutUncheckedCreateWithoutUserInput>
    where?: AboutWhereInput
  }

  export type AboutUpdateToOneWithWhereWithoutUserInput = {
    where?: AboutWhereInput
    data: XOR<AboutUpdateWithoutUserInput, AboutUncheckedUpdateWithoutUserInput>
  }

  export type AboutUpdateWithoutUserInput = {
    sub_title?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    about_me?: AboutMeUpdateManyWithoutAboutNestedInput
  }

  export type AboutUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sub_title?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    about_me?: AboutMeUncheckedUpdateManyWithoutAboutNestedInput
  }

  export type LanguagesUpsertWithoutUserInput = {
    update: XOR<LanguagesUpdateWithoutUserInput, LanguagesUncheckedUpdateWithoutUserInput>
    create: XOR<LanguagesCreateWithoutUserInput, LanguagesUncheckedCreateWithoutUserInput>
    where?: LanguagesWhereInput
  }

  export type LanguagesUpdateToOneWithWhereWithoutUserInput = {
    where?: LanguagesWhereInput
    data: XOR<LanguagesUpdateWithoutUserInput, LanguagesUncheckedUpdateWithoutUserInput>
  }

  export type LanguagesUpdateWithoutUserInput = {
    subTitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    language_items?: LanguagesItemUpdateManyWithoutLanguagesNestedInput
  }

  export type LanguagesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    subTitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    language_items?: LanguagesItemUncheckedUpdateManyWithoutLanguagesNestedInput
  }

  export type WorkUpsertWithoutUserInput = {
    update: XOR<WorkUpdateWithoutUserInput, WorkUncheckedUpdateWithoutUserInput>
    create: XOR<WorkCreateWithoutUserInput, WorkUncheckedCreateWithoutUserInput>
    where?: WorkWhereInput
  }

  export type WorkUpdateToOneWithWhereWithoutUserInput = {
    where?: WorkWhereInput
    data: XOR<WorkUpdateWithoutUserInput, WorkUncheckedUpdateWithoutUserInput>
  }

  export type WorkUpdateWithoutUserInput = {
    subtitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    work_links?: StringFieldUpdateOperationsInput | string
    work_items?: workItemsUpdateManyWithoutWorkNestedInput
  }

  export type WorkUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    subtitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    work_links?: StringFieldUpdateOperationsInput | string
    work_items?: workItemsUncheckedUpdateManyWithoutWorkNestedInput
  }

  export type MoreUpsertWithoutUserInput = {
    update: XOR<MoreUpdateWithoutUserInput, MoreUncheckedUpdateWithoutUserInput>
    create: XOR<MoreCreateWithoutUserInput, MoreUncheckedCreateWithoutUserInput>
    where?: MoreWhereInput
  }

  export type MoreUpdateToOneWithWhereWithoutUserInput = {
    where?: MoreWhereInput
    data: XOR<MoreUpdateWithoutUserInput, MoreUncheckedUpdateWithoutUserInput>
  }

  export type MoreUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    sub_title?: StringFieldUpdateOperationsInput | string
    links?: StringFieldUpdateOperationsInput | string
  }

  export type MoreUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    sub_title?: StringFieldUpdateOperationsInput | string
    links?: StringFieldUpdateOperationsInput | string
  }

  export type whyMeUpsertWithoutUserInput = {
    update: XOR<whyMeUpdateWithoutUserInput, whyMeUncheckedUpdateWithoutUserInput>
    create: XOR<whyMeCreateWithoutUserInput, whyMeUncheckedCreateWithoutUserInput>
    where?: whyMeWhereInput
  }

  export type whyMeUpdateToOneWithWhereWithoutUserInput = {
    where?: whyMeWhereInput
    data: XOR<whyMeUpdateWithoutUserInput, whyMeUncheckedUpdateWithoutUserInput>
  }

  export type whyMeUpdateWithoutUserInput = {
    subTitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    why_me_items?: whyMeItemsUpdateManyWithoutWhyMeNestedInput
  }

  export type whyMeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    subTitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    why_me_items?: whyMeItemsUncheckedUpdateManyWithoutWhyMeNestedInput
  }

  export type UserCreateWithoutHomeInput = {
    email: string
    name: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    image?: string | null
    About?: AboutCreateNestedOneWithoutUserInput
    languages?: LanguagesCreateNestedOneWithoutUserInput
    work?: WorkCreateNestedOneWithoutUserInput
    More?: MoreCreateNestedOneWithoutUserInput
    whyMe?: whyMeCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutHomeInput = {
    id?: number
    email: string
    name: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    image?: string | null
    About?: AboutUncheckedCreateNestedOneWithoutUserInput
    languages?: LanguagesUncheckedCreateNestedOneWithoutUserInput
    work?: WorkUncheckedCreateNestedOneWithoutUserInput
    More?: MoreUncheckedCreateNestedOneWithoutUserInput
    whyMe?: whyMeUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutHomeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHomeInput, UserUncheckedCreateWithoutHomeInput>
  }

  export type UserUpsertWithoutHomeInput = {
    update: XOR<UserUpdateWithoutHomeInput, UserUncheckedUpdateWithoutHomeInput>
    create: XOR<UserCreateWithoutHomeInput, UserUncheckedCreateWithoutHomeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHomeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHomeInput, UserUncheckedUpdateWithoutHomeInput>
  }

  export type UserUpdateWithoutHomeInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    About?: AboutUpdateOneWithoutUserNestedInput
    languages?: LanguagesUpdateOneWithoutUserNestedInput
    work?: WorkUpdateOneWithoutUserNestedInput
    More?: MoreUpdateOneWithoutUserNestedInput
    whyMe?: whyMeUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHomeInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    About?: AboutUncheckedUpdateOneWithoutUserNestedInput
    languages?: LanguagesUncheckedUpdateOneWithoutUserNestedInput
    work?: WorkUncheckedUpdateOneWithoutUserNestedInput
    More?: MoreUncheckedUpdateOneWithoutUserNestedInput
    whyMe?: whyMeUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutAboutInput = {
    email: string
    name: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    image?: string | null
    Home?: HomeCreateNestedOneWithoutUserInput
    languages?: LanguagesCreateNestedOneWithoutUserInput
    work?: WorkCreateNestedOneWithoutUserInput
    More?: MoreCreateNestedOneWithoutUserInput
    whyMe?: whyMeCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAboutInput = {
    id?: number
    email: string
    name: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    image?: string | null
    Home?: HomeUncheckedCreateNestedOneWithoutUserInput
    languages?: LanguagesUncheckedCreateNestedOneWithoutUserInput
    work?: WorkUncheckedCreateNestedOneWithoutUserInput
    More?: MoreUncheckedCreateNestedOneWithoutUserInput
    whyMe?: whyMeUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAboutInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAboutInput, UserUncheckedCreateWithoutAboutInput>
  }

  export type AboutMeCreateWithoutAboutInput = {
    about_me_title?: string | null
    about_me_description?: string | null
  }

  export type AboutMeUncheckedCreateWithoutAboutInput = {
    id?: number
    about_me_title?: string | null
    about_me_description?: string | null
  }

  export type AboutMeCreateOrConnectWithoutAboutInput = {
    where: AboutMeWhereUniqueInput
    create: XOR<AboutMeCreateWithoutAboutInput, AboutMeUncheckedCreateWithoutAboutInput>
  }

  export type AboutMeCreateManyAboutInputEnvelope = {
    data: AboutMeCreateManyAboutInput | AboutMeCreateManyAboutInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAboutInput = {
    update: XOR<UserUpdateWithoutAboutInput, UserUncheckedUpdateWithoutAboutInput>
    create: XOR<UserCreateWithoutAboutInput, UserUncheckedCreateWithoutAboutInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAboutInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAboutInput, UserUncheckedUpdateWithoutAboutInput>
  }

  export type UserUpdateWithoutAboutInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Home?: HomeUpdateOneWithoutUserNestedInput
    languages?: LanguagesUpdateOneWithoutUserNestedInput
    work?: WorkUpdateOneWithoutUserNestedInput
    More?: MoreUpdateOneWithoutUserNestedInput
    whyMe?: whyMeUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAboutInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Home?: HomeUncheckedUpdateOneWithoutUserNestedInput
    languages?: LanguagesUncheckedUpdateOneWithoutUserNestedInput
    work?: WorkUncheckedUpdateOneWithoutUserNestedInput
    More?: MoreUncheckedUpdateOneWithoutUserNestedInput
    whyMe?: whyMeUncheckedUpdateOneWithoutUserNestedInput
  }

  export type AboutMeUpsertWithWhereUniqueWithoutAboutInput = {
    where: AboutMeWhereUniqueInput
    update: XOR<AboutMeUpdateWithoutAboutInput, AboutMeUncheckedUpdateWithoutAboutInput>
    create: XOR<AboutMeCreateWithoutAboutInput, AboutMeUncheckedCreateWithoutAboutInput>
  }

  export type AboutMeUpdateWithWhereUniqueWithoutAboutInput = {
    where: AboutMeWhereUniqueInput
    data: XOR<AboutMeUpdateWithoutAboutInput, AboutMeUncheckedUpdateWithoutAboutInput>
  }

  export type AboutMeUpdateManyWithWhereWithoutAboutInput = {
    where: AboutMeScalarWhereInput
    data: XOR<AboutMeUpdateManyMutationInput, AboutMeUncheckedUpdateManyWithoutAboutInput>
  }

  export type AboutMeScalarWhereInput = {
    AND?: AboutMeScalarWhereInput | AboutMeScalarWhereInput[]
    OR?: AboutMeScalarWhereInput[]
    NOT?: AboutMeScalarWhereInput | AboutMeScalarWhereInput[]
    id?: IntFilter<"AboutMe"> | number
    about_id?: IntNullableFilter<"AboutMe"> | number | null
    about_me_title?: StringNullableFilter<"AboutMe"> | string | null
    about_me_description?: StringNullableFilter<"AboutMe"> | string | null
  }

  export type AboutCreateWithoutAbout_meInput = {
    sub_title: string
    title: string
    description: string
    image: string
    User: UserCreateNestedOneWithoutAboutInput
  }

  export type AboutUncheckedCreateWithoutAbout_meInput = {
    id?: number
    user_id: number
    sub_title: string
    title: string
    description: string
    image: string
  }

  export type AboutCreateOrConnectWithoutAbout_meInput = {
    where: AboutWhereUniqueInput
    create: XOR<AboutCreateWithoutAbout_meInput, AboutUncheckedCreateWithoutAbout_meInput>
  }

  export type AboutUpsertWithoutAbout_meInput = {
    update: XOR<AboutUpdateWithoutAbout_meInput, AboutUncheckedUpdateWithoutAbout_meInput>
    create: XOR<AboutCreateWithoutAbout_meInput, AboutUncheckedCreateWithoutAbout_meInput>
    where?: AboutWhereInput
  }

  export type AboutUpdateToOneWithWhereWithoutAbout_meInput = {
    where?: AboutWhereInput
    data: XOR<AboutUpdateWithoutAbout_meInput, AboutUncheckedUpdateWithoutAbout_meInput>
  }

  export type AboutUpdateWithoutAbout_meInput = {
    sub_title?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutAboutNestedInput
  }

  export type AboutUncheckedUpdateWithoutAbout_meInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    sub_title?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type LanguagesItemCreateWithoutLanguagesInput = {
    image: string
    language_name: string
  }

  export type LanguagesItemUncheckedCreateWithoutLanguagesInput = {
    id?: number
    image: string
    language_name: string
  }

  export type LanguagesItemCreateOrConnectWithoutLanguagesInput = {
    where: LanguagesItemWhereUniqueInput
    create: XOR<LanguagesItemCreateWithoutLanguagesInput, LanguagesItemUncheckedCreateWithoutLanguagesInput>
  }

  export type LanguagesItemCreateManyLanguagesInputEnvelope = {
    data: LanguagesItemCreateManyLanguagesInput | LanguagesItemCreateManyLanguagesInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutLanguagesInput = {
    email: string
    name: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    image?: string | null
    Home?: HomeCreateNestedOneWithoutUserInput
    About?: AboutCreateNestedOneWithoutUserInput
    work?: WorkCreateNestedOneWithoutUserInput
    More?: MoreCreateNestedOneWithoutUserInput
    whyMe?: whyMeCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLanguagesInput = {
    id?: number
    email: string
    name: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    image?: string | null
    Home?: HomeUncheckedCreateNestedOneWithoutUserInput
    About?: AboutUncheckedCreateNestedOneWithoutUserInput
    work?: WorkUncheckedCreateNestedOneWithoutUserInput
    More?: MoreUncheckedCreateNestedOneWithoutUserInput
    whyMe?: whyMeUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLanguagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLanguagesInput, UserUncheckedCreateWithoutLanguagesInput>
  }

  export type LanguagesItemUpsertWithWhereUniqueWithoutLanguagesInput = {
    where: LanguagesItemWhereUniqueInput
    update: XOR<LanguagesItemUpdateWithoutLanguagesInput, LanguagesItemUncheckedUpdateWithoutLanguagesInput>
    create: XOR<LanguagesItemCreateWithoutLanguagesInput, LanguagesItemUncheckedCreateWithoutLanguagesInput>
  }

  export type LanguagesItemUpdateWithWhereUniqueWithoutLanguagesInput = {
    where: LanguagesItemWhereUniqueInput
    data: XOR<LanguagesItemUpdateWithoutLanguagesInput, LanguagesItemUncheckedUpdateWithoutLanguagesInput>
  }

  export type LanguagesItemUpdateManyWithWhereWithoutLanguagesInput = {
    where: LanguagesItemScalarWhereInput
    data: XOR<LanguagesItemUpdateManyMutationInput, LanguagesItemUncheckedUpdateManyWithoutLanguagesInput>
  }

  export type LanguagesItemScalarWhereInput = {
    AND?: LanguagesItemScalarWhereInput | LanguagesItemScalarWhereInput[]
    OR?: LanguagesItemScalarWhereInput[]
    NOT?: LanguagesItemScalarWhereInput | LanguagesItemScalarWhereInput[]
    id?: IntFilter<"LanguagesItem"> | number
    languages_id?: IntNullableFilter<"LanguagesItem"> | number | null
    image?: StringFilter<"LanguagesItem"> | string
    language_name?: StringFilter<"LanguagesItem"> | string
  }

  export type UserUpsertWithoutLanguagesInput = {
    update: XOR<UserUpdateWithoutLanguagesInput, UserUncheckedUpdateWithoutLanguagesInput>
    create: XOR<UserCreateWithoutLanguagesInput, UserUncheckedCreateWithoutLanguagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLanguagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLanguagesInput, UserUncheckedUpdateWithoutLanguagesInput>
  }

  export type UserUpdateWithoutLanguagesInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Home?: HomeUpdateOneWithoutUserNestedInput
    About?: AboutUpdateOneWithoutUserNestedInput
    work?: WorkUpdateOneWithoutUserNestedInput
    More?: MoreUpdateOneWithoutUserNestedInput
    whyMe?: whyMeUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLanguagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Home?: HomeUncheckedUpdateOneWithoutUserNestedInput
    About?: AboutUncheckedUpdateOneWithoutUserNestedInput
    work?: WorkUncheckedUpdateOneWithoutUserNestedInput
    More?: MoreUncheckedUpdateOneWithoutUserNestedInput
    whyMe?: whyMeUncheckedUpdateOneWithoutUserNestedInput
  }

  export type LanguagesCreateWithoutLanguage_itemsInput = {
    subTitle: string
    title: string
    User: UserCreateNestedOneWithoutLanguagesInput
  }

  export type LanguagesUncheckedCreateWithoutLanguage_itemsInput = {
    id?: number
    subTitle: string
    title: string
    user_id: number
  }

  export type LanguagesCreateOrConnectWithoutLanguage_itemsInput = {
    where: LanguagesWhereUniqueInput
    create: XOR<LanguagesCreateWithoutLanguage_itemsInput, LanguagesUncheckedCreateWithoutLanguage_itemsInput>
  }

  export type LanguagesUpsertWithoutLanguage_itemsInput = {
    update: XOR<LanguagesUpdateWithoutLanguage_itemsInput, LanguagesUncheckedUpdateWithoutLanguage_itemsInput>
    create: XOR<LanguagesCreateWithoutLanguage_itemsInput, LanguagesUncheckedCreateWithoutLanguage_itemsInput>
    where?: LanguagesWhereInput
  }

  export type LanguagesUpdateToOneWithWhereWithoutLanguage_itemsInput = {
    where?: LanguagesWhereInput
    data: XOR<LanguagesUpdateWithoutLanguage_itemsInput, LanguagesUncheckedUpdateWithoutLanguage_itemsInput>
  }

  export type LanguagesUpdateWithoutLanguage_itemsInput = {
    subTitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutLanguagesNestedInput
  }

  export type LanguagesUncheckedUpdateWithoutLanguage_itemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    subTitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type whyMeItemsCreateWithoutWhyMeInput = {
    image: string
    title: string
    description: string
  }

  export type whyMeItemsUncheckedCreateWithoutWhyMeInput = {
    id?: number
    image: string
    title: string
    description: string
  }

  export type whyMeItemsCreateOrConnectWithoutWhyMeInput = {
    where: whyMeItemsWhereUniqueInput
    create: XOR<whyMeItemsCreateWithoutWhyMeInput, whyMeItemsUncheckedCreateWithoutWhyMeInput>
  }

  export type whyMeItemsCreateManyWhyMeInputEnvelope = {
    data: whyMeItemsCreateManyWhyMeInput | whyMeItemsCreateManyWhyMeInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutWhyMeInput = {
    email: string
    name: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    image?: string | null
    Home?: HomeCreateNestedOneWithoutUserInput
    About?: AboutCreateNestedOneWithoutUserInput
    languages?: LanguagesCreateNestedOneWithoutUserInput
    work?: WorkCreateNestedOneWithoutUserInput
    More?: MoreCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWhyMeInput = {
    id?: number
    email: string
    name: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    image?: string | null
    Home?: HomeUncheckedCreateNestedOneWithoutUserInput
    About?: AboutUncheckedCreateNestedOneWithoutUserInput
    languages?: LanguagesUncheckedCreateNestedOneWithoutUserInput
    work?: WorkUncheckedCreateNestedOneWithoutUserInput
    More?: MoreUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWhyMeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWhyMeInput, UserUncheckedCreateWithoutWhyMeInput>
  }

  export type whyMeItemsUpsertWithWhereUniqueWithoutWhyMeInput = {
    where: whyMeItemsWhereUniqueInput
    update: XOR<whyMeItemsUpdateWithoutWhyMeInput, whyMeItemsUncheckedUpdateWithoutWhyMeInput>
    create: XOR<whyMeItemsCreateWithoutWhyMeInput, whyMeItemsUncheckedCreateWithoutWhyMeInput>
  }

  export type whyMeItemsUpdateWithWhereUniqueWithoutWhyMeInput = {
    where: whyMeItemsWhereUniqueInput
    data: XOR<whyMeItemsUpdateWithoutWhyMeInput, whyMeItemsUncheckedUpdateWithoutWhyMeInput>
  }

  export type whyMeItemsUpdateManyWithWhereWithoutWhyMeInput = {
    where: whyMeItemsScalarWhereInput
    data: XOR<whyMeItemsUpdateManyMutationInput, whyMeItemsUncheckedUpdateManyWithoutWhyMeInput>
  }

  export type whyMeItemsScalarWhereInput = {
    AND?: whyMeItemsScalarWhereInput | whyMeItemsScalarWhereInput[]
    OR?: whyMeItemsScalarWhereInput[]
    NOT?: whyMeItemsScalarWhereInput | whyMeItemsScalarWhereInput[]
    id?: IntFilter<"whyMeItems"> | number
    why_me_id?: IntNullableFilter<"whyMeItems"> | number | null
    image?: StringFilter<"whyMeItems"> | string
    title?: StringFilter<"whyMeItems"> | string
    description?: StringFilter<"whyMeItems"> | string
  }

  export type UserUpsertWithoutWhyMeInput = {
    update: XOR<UserUpdateWithoutWhyMeInput, UserUncheckedUpdateWithoutWhyMeInput>
    create: XOR<UserCreateWithoutWhyMeInput, UserUncheckedCreateWithoutWhyMeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWhyMeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWhyMeInput, UserUncheckedUpdateWithoutWhyMeInput>
  }

  export type UserUpdateWithoutWhyMeInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Home?: HomeUpdateOneWithoutUserNestedInput
    About?: AboutUpdateOneWithoutUserNestedInput
    languages?: LanguagesUpdateOneWithoutUserNestedInput
    work?: WorkUpdateOneWithoutUserNestedInput
    More?: MoreUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWhyMeInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Home?: HomeUncheckedUpdateOneWithoutUserNestedInput
    About?: AboutUncheckedUpdateOneWithoutUserNestedInput
    languages?: LanguagesUncheckedUpdateOneWithoutUserNestedInput
    work?: WorkUncheckedUpdateOneWithoutUserNestedInput
    More?: MoreUncheckedUpdateOneWithoutUserNestedInput
  }

  export type whyMeCreateWithoutWhy_me_itemsInput = {
    subTitle: string
    title: string
    User: UserCreateNestedOneWithoutWhyMeInput
  }

  export type whyMeUncheckedCreateWithoutWhy_me_itemsInput = {
    id?: number
    subTitle: string
    title: string
    user_id: number
  }

  export type whyMeCreateOrConnectWithoutWhy_me_itemsInput = {
    where: whyMeWhereUniqueInput
    create: XOR<whyMeCreateWithoutWhy_me_itemsInput, whyMeUncheckedCreateWithoutWhy_me_itemsInput>
  }

  export type whyMeUpsertWithoutWhy_me_itemsInput = {
    update: XOR<whyMeUpdateWithoutWhy_me_itemsInput, whyMeUncheckedUpdateWithoutWhy_me_itemsInput>
    create: XOR<whyMeCreateWithoutWhy_me_itemsInput, whyMeUncheckedCreateWithoutWhy_me_itemsInput>
    where?: whyMeWhereInput
  }

  export type whyMeUpdateToOneWithWhereWithoutWhy_me_itemsInput = {
    where?: whyMeWhereInput
    data: XOR<whyMeUpdateWithoutWhy_me_itemsInput, whyMeUncheckedUpdateWithoutWhy_me_itemsInput>
  }

  export type whyMeUpdateWithoutWhy_me_itemsInput = {
    subTitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutWhyMeNestedInput
  }

  export type whyMeUncheckedUpdateWithoutWhy_me_itemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    subTitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type workItemsCreateWithoutWorkInput = {
    image: string
    title: string
    sub_title: string
    description: string
  }

  export type workItemsUncheckedCreateWithoutWorkInput = {
    id?: number
    image: string
    title: string
    sub_title: string
    description: string
  }

  export type workItemsCreateOrConnectWithoutWorkInput = {
    where: workItemsWhereUniqueInput
    create: XOR<workItemsCreateWithoutWorkInput, workItemsUncheckedCreateWithoutWorkInput>
  }

  export type workItemsCreateManyWorkInputEnvelope = {
    data: workItemsCreateManyWorkInput | workItemsCreateManyWorkInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutWorkInput = {
    email: string
    name: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    image?: string | null
    Home?: HomeCreateNestedOneWithoutUserInput
    About?: AboutCreateNestedOneWithoutUserInput
    languages?: LanguagesCreateNestedOneWithoutUserInput
    More?: MoreCreateNestedOneWithoutUserInput
    whyMe?: whyMeCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWorkInput = {
    id?: number
    email: string
    name: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    image?: string | null
    Home?: HomeUncheckedCreateNestedOneWithoutUserInput
    About?: AboutUncheckedCreateNestedOneWithoutUserInput
    languages?: LanguagesUncheckedCreateNestedOneWithoutUserInput
    More?: MoreUncheckedCreateNestedOneWithoutUserInput
    whyMe?: whyMeUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWorkInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkInput, UserUncheckedCreateWithoutWorkInput>
  }

  export type workItemsUpsertWithWhereUniqueWithoutWorkInput = {
    where: workItemsWhereUniqueInput
    update: XOR<workItemsUpdateWithoutWorkInput, workItemsUncheckedUpdateWithoutWorkInput>
    create: XOR<workItemsCreateWithoutWorkInput, workItemsUncheckedCreateWithoutWorkInput>
  }

  export type workItemsUpdateWithWhereUniqueWithoutWorkInput = {
    where: workItemsWhereUniqueInput
    data: XOR<workItemsUpdateWithoutWorkInput, workItemsUncheckedUpdateWithoutWorkInput>
  }

  export type workItemsUpdateManyWithWhereWithoutWorkInput = {
    where: workItemsScalarWhereInput
    data: XOR<workItemsUpdateManyMutationInput, workItemsUncheckedUpdateManyWithoutWorkInput>
  }

  export type workItemsScalarWhereInput = {
    AND?: workItemsScalarWhereInput | workItemsScalarWhereInput[]
    OR?: workItemsScalarWhereInput[]
    NOT?: workItemsScalarWhereInput | workItemsScalarWhereInput[]
    id?: IntFilter<"workItems"> | number
    workId?: IntNullableFilter<"workItems"> | number | null
    image?: StringFilter<"workItems"> | string
    title?: StringFilter<"workItems"> | string
    sub_title?: StringFilter<"workItems"> | string
    description?: StringFilter<"workItems"> | string
  }

  export type UserUpsertWithoutWorkInput = {
    update: XOR<UserUpdateWithoutWorkInput, UserUncheckedUpdateWithoutWorkInput>
    create: XOR<UserCreateWithoutWorkInput, UserUncheckedCreateWithoutWorkInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkInput, UserUncheckedUpdateWithoutWorkInput>
  }

  export type UserUpdateWithoutWorkInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Home?: HomeUpdateOneWithoutUserNestedInput
    About?: AboutUpdateOneWithoutUserNestedInput
    languages?: LanguagesUpdateOneWithoutUserNestedInput
    More?: MoreUpdateOneWithoutUserNestedInput
    whyMe?: whyMeUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Home?: HomeUncheckedUpdateOneWithoutUserNestedInput
    About?: AboutUncheckedUpdateOneWithoutUserNestedInput
    languages?: LanguagesUncheckedUpdateOneWithoutUserNestedInput
    More?: MoreUncheckedUpdateOneWithoutUserNestedInput
    whyMe?: whyMeUncheckedUpdateOneWithoutUserNestedInput
  }

  export type WorkCreateWithoutWork_itemsInput = {
    subtitle: string
    title: string
    work_links: string
    User: UserCreateNestedOneWithoutWorkInput
  }

  export type WorkUncheckedCreateWithoutWork_itemsInput = {
    id?: number
    subtitle: string
    title: string
    work_links: string
    user_id: number
  }

  export type WorkCreateOrConnectWithoutWork_itemsInput = {
    where: WorkWhereUniqueInput
    create: XOR<WorkCreateWithoutWork_itemsInput, WorkUncheckedCreateWithoutWork_itemsInput>
  }

  export type WorkUpsertWithoutWork_itemsInput = {
    update: XOR<WorkUpdateWithoutWork_itemsInput, WorkUncheckedUpdateWithoutWork_itemsInput>
    create: XOR<WorkCreateWithoutWork_itemsInput, WorkUncheckedCreateWithoutWork_itemsInput>
    where?: WorkWhereInput
  }

  export type WorkUpdateToOneWithWhereWithoutWork_itemsInput = {
    where?: WorkWhereInput
    data: XOR<WorkUpdateWithoutWork_itemsInput, WorkUncheckedUpdateWithoutWork_itemsInput>
  }

  export type WorkUpdateWithoutWork_itemsInput = {
    subtitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    work_links?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutWorkNestedInput
  }

  export type WorkUncheckedUpdateWithoutWork_itemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    subtitle?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    work_links?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutMoreInput = {
    email: string
    name: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    image?: string | null
    Home?: HomeCreateNestedOneWithoutUserInput
    About?: AboutCreateNestedOneWithoutUserInput
    languages?: LanguagesCreateNestedOneWithoutUserInput
    work?: WorkCreateNestedOneWithoutUserInput
    whyMe?: whyMeCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMoreInput = {
    id?: number
    email: string
    name: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string
    image?: string | null
    Home?: HomeUncheckedCreateNestedOneWithoutUserInput
    About?: AboutUncheckedCreateNestedOneWithoutUserInput
    languages?: LanguagesUncheckedCreateNestedOneWithoutUserInput
    work?: WorkUncheckedCreateNestedOneWithoutUserInput
    whyMe?: whyMeUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMoreInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMoreInput, UserUncheckedCreateWithoutMoreInput>
  }

  export type UserUpsertWithoutMoreInput = {
    update: XOR<UserUpdateWithoutMoreInput, UserUncheckedUpdateWithoutMoreInput>
    create: XOR<UserCreateWithoutMoreInput, UserUncheckedCreateWithoutMoreInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMoreInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMoreInput, UserUncheckedUpdateWithoutMoreInput>
  }

  export type UserUpdateWithoutMoreInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Home?: HomeUpdateOneWithoutUserNestedInput
    About?: AboutUpdateOneWithoutUserNestedInput
    languages?: LanguagesUpdateOneWithoutUserNestedInput
    work?: WorkUpdateOneWithoutUserNestedInput
    whyMe?: whyMeUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMoreInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    Home?: HomeUncheckedUpdateOneWithoutUserNestedInput
    About?: AboutUncheckedUpdateOneWithoutUserNestedInput
    languages?: LanguagesUncheckedUpdateOneWithoutUserNestedInput
    work?: WorkUncheckedUpdateOneWithoutUserNestedInput
    whyMe?: whyMeUncheckedUpdateOneWithoutUserNestedInput
  }

  export type AboutMeCreateManyAboutInput = {
    id?: number
    about_me_title?: string | null
    about_me_description?: string | null
  }

  export type AboutMeUpdateWithoutAboutInput = {
    about_me_title?: NullableStringFieldUpdateOperationsInput | string | null
    about_me_description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AboutMeUncheckedUpdateWithoutAboutInput = {
    id?: IntFieldUpdateOperationsInput | number
    about_me_title?: NullableStringFieldUpdateOperationsInput | string | null
    about_me_description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AboutMeUncheckedUpdateManyWithoutAboutInput = {
    id?: IntFieldUpdateOperationsInput | number
    about_me_title?: NullableStringFieldUpdateOperationsInput | string | null
    about_me_description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LanguagesItemCreateManyLanguagesInput = {
    id?: number
    image: string
    language_name: string
  }

  export type LanguagesItemUpdateWithoutLanguagesInput = {
    image?: StringFieldUpdateOperationsInput | string
    language_name?: StringFieldUpdateOperationsInput | string
  }

  export type LanguagesItemUncheckedUpdateWithoutLanguagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    language_name?: StringFieldUpdateOperationsInput | string
  }

  export type LanguagesItemUncheckedUpdateManyWithoutLanguagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    language_name?: StringFieldUpdateOperationsInput | string
  }

  export type whyMeItemsCreateManyWhyMeInput = {
    id?: number
    image: string
    title: string
    description: string
  }

  export type whyMeItemsUpdateWithoutWhyMeInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type whyMeItemsUncheckedUpdateWithoutWhyMeInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type whyMeItemsUncheckedUpdateManyWithoutWhyMeInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type workItemsCreateManyWorkInput = {
    id?: number
    image: string
    title: string
    sub_title: string
    description: string
  }

  export type workItemsUpdateWithoutWorkInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    sub_title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type workItemsUncheckedUpdateWithoutWorkInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    sub_title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type workItemsUncheckedUpdateManyWithoutWorkInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    sub_title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AboutCountOutputTypeDefaultArgs instead
     */
    export type AboutCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AboutCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LanguagesCountOutputTypeDefaultArgs instead
     */
    export type LanguagesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LanguagesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WhyMeCountOutputTypeDefaultArgs instead
     */
    export type WhyMeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WhyMeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkCountOutputTypeDefaultArgs instead
     */
    export type WorkCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HomeDefaultArgs instead
     */
    export type HomeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HomeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AboutDefaultArgs instead
     */
    export type AboutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AboutDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AboutMeDefaultArgs instead
     */
    export type AboutMeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AboutMeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LanguagesDefaultArgs instead
     */
    export type LanguagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LanguagesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LanguagesItemDefaultArgs instead
     */
    export type LanguagesItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LanguagesItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use whyMeDefaultArgs instead
     */
    export type whyMeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = whyMeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use whyMeItemsDefaultArgs instead
     */
    export type whyMeItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = whyMeItemsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkDefaultArgs instead
     */
    export type WorkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkDefaultArgs<ExtArgs>
    /**
     * @deprecated Use workItemsDefaultArgs instead
     */
    export type workItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = workItemsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MoreDefaultArgs instead
     */
    export type MoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MoreDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}